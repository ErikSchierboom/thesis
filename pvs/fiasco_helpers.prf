(fiasco_helpers
 (timeout_dequeued_unchanged 0
  (timeout_dequeued_unchanged-1 nil 3377636422 3377636451
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "timeout")
          (("" (expand "state_change")
            (("" (expand "state_change_dirty")
              (("" (expand "TS_empty")
                (("" (expand "TS_full")
                  (("" (assert)
                    (("" (lift-if)
                      ((""
                        (case-replace "receiver!1 = state_old!1`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((timeout const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change const-decl "System_state" fiasco_functions nil))
   28782 650 t shostak))
 (kill_dequeued_unchanged 0
  (kill_dequeued_unchanged-1 nil 3377636454 3377636462
   ("" (skolem!)
    (("" (ground)
      (("" (flatten) (("" (expand "kill") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil))
   7673 140 t shostak))
 (receiver_ready_dequeued_unchanged 0
  (receiver_ready_dequeued_unchanged-2 nil 3387603245 3377629338
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "receiver_ready")
          (("" (expand "sender_dequeue_head")
            ((""
              (name-replace "prepare_receive_dirty_state"
               "prepare_receive_dirty(Receiver_partner_thread,
                                            receiver!1,
                                            state_old!1)" :hide? nil)
              ((""
                (name-replace "ipc_receiver_ready_change_state"
                 " ipc_receiver_ready_change(state_old!1`this,
                                                     receiver!1,
                                                     IF NOT
                                                        state_old!1`receiver_initialized
                                                     THEN prepare_receive_dirty_state
                                                          WITH [(receiver_initialized)
                                                                := TRUE]
                                                     ELSE state_old!1
                                                     ENDIF)" :hide?
                 nil)
                (("" (expand "prepare_receive_dirty")
                  (("" (expand "set_partner")
                    (("" (expand "state_change_dirty")
                      (("" (expand "ipc_receiver_ready_change")
                        (("" (expand "ipc_init")
                          (("" (expand "set_partner")
                            ((""
                              (name-replace "state_add_dirty_state"
                               "state_add_dirty
                                          (receiver!1,
                                           TS_empty
                                           WITH [thread_transfer_in_progress
                                                 := TRUE],
                                           IF NOT
                                              state_old!1`receiver_initialized
                                           THEN prepare_receive_dirty_state
                                                WITH [(receiver_initialized)
                                                      := TRUE]
                                           ELSE state_old!1
                                           ENDIF
                                           WITH [(threads)(receiver!1)`partner
                                                 := state_old!1`this])"
                               :hide? nil)
                              ((""
                                (name-replace
                                 "state_add_dirty_state2"
                                 "state_add_dirty(state_old!1`this,
                                          TS_empty
                                          WITH [thread_ready := TRUE,
                                                thread_transfer_in_progress
                                                := TRUE],
                                          state_add_dirty_state)"
                                 :hide?
                                 nil)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "state_del_dirty")
                                    ((""
                                      (expand "TS_full")
                                      ((""
                                        (expand "TS_empty")
                                        ((""
                                          (name-replace
                                           "ipc_receiver_ready_bool"
                                           "ipc_receiver_ready(state_old!1`this,
                                            receiver!1,
                                            IF NOT
                                               state_old!1`receiver_initialized
                                            THEN prepare_receive_dirty_state
                                                 WITH [(receiver_initialized)
                                                       := TRUE]
                                            ELSE state_old!1
                                            ENDIF)"
                                           :hide?
                                           nil)
                                          ((""
                                            (case
                                             "prepare_receive_dirty_state`threads(receiver!1)`sender_list = Dequeued")
                                            (("1"
                                              (case
                                               "ipc_receiver_ready_change_state`threads(receiver!1)`sender_list = Dequeued")
                                              (("1"
                                                (replace -1 +)
                                                (("1"
                                                  (replace -2 +)
                                                  (("1"
                                                    (replace -8 +)
                                                    (("1"
                                                      (hide-all-but
                                                       (1))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace
                                                   -5
                                                   +
                                                   rl
                                                   :hide?
                                                   T)
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (replace
                                                       -3
                                                       +
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("2"
                                                        (case-replace
                                                         "state_old!1`receiver_initialized")
                                                        (("1"
                                                          (case-replace
                                                           "state_old!1`this = receiver!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case-replace
                                                           "state_old!1`this = receiver!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -5 -6))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((receiver_ready const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil))
   2036 1460 nil nil)
  (receiver_ready_dequeued_unchanged-1 nil 3386392515 3387596585
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "receiver_ready")
          (("" (expand "sender_dequeue_head")
            ((""
              (name-replace "prepare_receive_dirty_state"
               "prepare_receive_dirty(Receiver_partner_thread,
                                          receiver!1,
                                          state_old!1)" :hide? nil)
              ((""
                (name-replace "ipc_receiver_ready_change_state"
                 " ipc_receiver_ready_change(state_old!1`this,
                                                   receiver!1,
                                                   IF NOT
                                                      state_old!1`receiver_initialized
                                                   THEN prepare_receive_dirty_state
                                                        WITH [(receiver_initialized)
                                                              := TRUE]
                                                   ELSE state_old!1
                                                   ENDIF)" :hide? nil)
                (("" (expand "prepare_receive_dirty")
                  (("" (expand "set_partner")
                    (("" (expand "state_change_dirty")
                      (("" (expand "ipc_receiver_ready_change")
                        (("" (expand "ipc_init")
                          (("" (expand "set_partner")
                            ((""
                              (name-replace "state_add_dirty_state"
                               "state_add_dirty
                                        (receiver!1,
                                         TS_empty
                                         WITH [thread_transfer_in_progress
                                               := TRUE],
                                         IF NOT
                                            state_old!1`receiver_initialized
                                         THEN prepare_receive_dirty_state
                                              WITH [(receiver_initialized)
                                                    := TRUE]
                                         ELSE state_old!1
                                         ENDIF
                                         WITH [(threads)(receiver!1)`partner
                                               := state_old!1`this])"
                               :hide? nil)
                              ((""
                                (name-replace
                                 "state_add_dirty_state2"
                                 "state_add_dirty(state_old!1`this,
                                        TS_empty
                                        WITH [thread_ready := TRUE,
                                              thread_transfer_in_progress
                                              := TRUE],
                                        state_add_dirty_state)"
                                 :hide?
                                 nil)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "state_del_dirty")
                                    ((""
                                      (expand "TS_full")
                                      ((""
                                        (expand "TS_empty")
                                        ((""
                                          (case-replace
                                           "state_old!1`receiver_initialized")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (case
                                               "not state_old!1`threads(receiver!1)`state`thread_receiving")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case
                                                 "not state_old!1`threads(receiver!1)`state`thread_ipc_in_progress ")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (case-replace
                                                   "state_old!1`threads(receiver!1)`state`thread_cancel")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       "state_old!1`this = state_old!1`threads(receiver!1)`partner")
                                                      (("1"
                                                        (case
                                                         "not in_sender_list(receiver!1, state_old!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "not ipc_receiver_ready(state_old!1`threads(receiver!1)`partner,
                                              receiver!1, state_old!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in_sender_list")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case-replace
                                                           "ipc_receiver_ready(state_old!1`this, receiver!1, state_old!1)")
                                                          (("1"
                                                            (expand
                                                             "ipc_receiver_ready")
                                                            (("1"
                                                              (expand
                                                               "sender_ok")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "prepare_receive_dirty_state`threads(receiver!1)`sender_list = Dequeued")
                                              (("1"
                                                (case
                                                 "ipc_receiver_ready_change_state`threads
                                          (receiver!1)`sender_list = Dequeued")
                                                (("1"
                                                  (case-replace
                                                   "prepare_receive_dirty_state`threads
                         (receiver!1)`state`thread_cancel")
                                                  (("1"
                                                    (rewrite 1)
                                                    (("1"
                                                      (case-replace
                                                       "state_old!1`this =
                  prepare_receive_dirty_state`threads(receiver!1)`partner")
                                                      (("1"
                                                        (case
                                                         "not in_sender_list(receiver!1,
                                       prepare_receive_dirty_state
                                         WITH [(receiver_initialized) := TRUE])")
                                                        (("1"
                                                          (rewrite 1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "not ipc_receiver_ready(prepare_receive_dirty_state`threads
                                                  (receiver!1)`partner,
                                              receiver!1,
                                              prepare_receive_dirty_state
                                                WITH [(receiver_initialized) := TRUE])")
                                                          (("1"
                                                            (rewrite 1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               -1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite 1)
                                                        (("2"
                                                          (case-replace
                                                           "ipc_receiver_ready(state_old!1`this, receiver!1,
                                          prepare_receive_dirty_state
                                            WITH [(receiver_initialized) := TRUE])")
                                                          (("2"
                                                            (rewrite 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (replace
                                                     -4
                                                     *
                                                     rl
                                                     :hide?
                                                     T)
                                                    (("2"
                                                      (case
                                                       "state_add_dirty_state`threads(receiver!1)`sender_list = Dequeued")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "state_add_dirty_state2")
                                                          (("1"
                                                            (expand
                                                             "state_add_dirty_state")
                                                            (("1"
                                                              (expand
                                                               "prepare_receive_dirty_state")
                                                              (("1"
                                                                (expand
                                                                 "prepare_receive_dirty")
                                                                (("1"
                                                                  (expand
                                                                   "set_partner")
                                                                  (("1"
                                                                    (expand
                                                                     "state_change_dirty")
                                                                    (("1"
                                                                      (expand
                                                                       "TS_full")
                                                                      (("1"
                                                                        (expand
                                                                         "TS_empty")
                                                                        (("1"
                                                                          (name-replace
                                                                           "state_temp"
                                                                           "state_add_dirty(receiver!1,
                                                TS
                                                WITH [thread_ready := FALSE,
                                                      thread_cancel := FALSE,
                                                      thread_dead := FALSE,
                                                      thread_busy := FALSE,
                                                      thread_invalid := FALSE,
                                                      thread_polling := FALSE,
                                                      thread_receiving := FALSE,
                                                      thread_ipc_in_progress
                                                      := FALSE,
                                                      thread_send_in_progress
                                                      := FALSE,
                                                      thread_transfer_in_progress
                                                      := TRUE],
                                                state_old!1
                                                WITH [(threads)(receiver!1)`partner
                                                      := state_old!1`this,
                                                      (threads)(receiver!1)`state
                                                      := state_old!1`threads
                                                         (receiver!1)`state
                                                         WITH [thread_ready
                                                               := state_old!1`threads
                                                                  (receiver!1)`state`thread_ready,
                                                               thread_cancel
                                                               := state_old!1`threads
                                                                  (receiver!1)`state`thread_cancel,
                                                               thread_dead
                                                               := state_old!1`threads
                                                                  (receiver!1)`state`thread_dead,
                                                               thread_busy
                                                               := state_old!1`threads
                                                                  (receiver!1)`state`thread_busy,
                                                               thread_invalid
                                                               := state_old!1`threads
                                                                  (receiver!1)`state`thread_invalid,
                                                               thread_polling
                                                               := FALSE,
                                                               thread_receiving
                                                               := TRUE,
                                                               thread_ipc_in_progress
                                                               := TRUE,
                                                               thread_send_in_progress
                                                               := FALSE,
                                                               thread_transfer_in_progress
                                                               := FALSE],
                                                      (receiver_initialized)
                                                      := TRUE])"
                                                                           :hide?
                                                                           nil)
                                                                          (("1"
                                                                            (expand
                                                                             "state_add_dirty")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "receiver!1 = state_old!1`this")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 -4)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "state_add_dirty_state")
                                                            (("2"
                                                              (expand
                                                               "state_add_dirty")
                                                              (("2"
                                                                (expand
                                                                 "prepare_receive_dirty_state")
                                                                (("2"
                                                                  (expand
                                                                   "prepare_receive_dirty")
                                                                  (("2"
                                                                    (expand
                                                                     "state_change_dirty")
                                                                    (("2"
                                                                      (expand
                                                                       "set_partner")
                                                                      (("2"
                                                                        (reveal
                                                                         -4)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 3)
                                                (("2"
                                                  (replace -4 * rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((receiver_ready const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (TS const-decl "Thread_state" fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil))
   28872 12740 t nil))
 (preemption_point_actions_dequeued_unchanged 0
  (preemption_point_actions_dequeued_unchanged-1 nil 3388824692
   3388826260
   ("" (induct "actions")
    (("1" (skolem!) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (assert) (("2" (flatten) nil nil)) nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (expand "sys_thread_ex_regs")
            (("3" (lemma "receiver_ready_dequeued_unchanged")
              (("3" (lemma "kill_dequeued_unchanged")
                (("3" (lemma "timeout_dequeued_unchanged")
                  (("3"
                    (case-replace " cons1_var!1 = Sys_thread_ex_regs")
                    (("1" (assert)
                      (("1"
                        (case-replace "state_old!1`this = partner!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case-replace "cons1_var!1 = Kill")
                        (("1" (assert)
                          (("1" (expand "kill")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (case-replace "cons1_var!1 = Timeout")
                            (("1" (assert)
                              (("1"
                                (case-replace "allow_timeout!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "timeout")
                                    (("1"
                                      (expand "state_change")
                                      (("1"
                                        (expand "state_change_dirty")
                                        (("1"
                                          (expand "TS_full")
                                          (("1"
                                            (expand "TS_empty")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "state_old!1`this = partner!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case-replace
                                 "cons1_var!1 = Receiver_ready")
                                (("1"
                                  (case-replace
                                   " state_old!1`this = partner!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -4
                                       "state_old!1`this"
                                       "partner!1"
                                       "state_old!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Sender_list type-decl nil fiasco_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list_induction formula-decl nil list_adt nil)
    (kill_dequeued_unchanged formula-decl nil fiasco_helpers nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (timeout_dequeued_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_dequeued_unchanged formula-decl nil fiasco_helpers
     nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   629833 5890 t shostak))
 (preemption_point_dequeued_unchanged 0
  (preemption_point_dequeued_unchanged-1 nil 3386392534 3388826365
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          (("" (lemma "preemption_point_actions_dequeued_unchanged")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_dequeued_unchanged formula-decl nil
     fiasco_helpers nil))
   94505 1350 t nil))
 (sender_enqueue_timeout_unchanged 0
  (sender_enqueue_timeout_unchanged-1 nil 3386392039 3377629340
   (";;; Proof sender_enqueue_timeout_unchanged-2 for formula fiasco_state.sender_enqueue_timeout_unchanged"
    (skolem!)
    ((";;; Proof sender_enqueue_timeout_unchanged-2 for formula fiasco_state.sender_enqueue_timeout_unchanged"
      (ground)
      ((";;; Proof sender_enqueue_timeout_unchanged-2 for formula fiasco_state.sender_enqueue_timeout_unchanged"
        (expand "sender_enqueue")
        ((";;; Proof sender_enqueue_timeout_unchanged-2 for formula fiasco_state.sender_enqueue_timeout_unchanged"
          (assert) nil))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil))
   163 120 nil nil))
 (kill_timeout_unchanged 0
  (kill_timeout_unchanged-1 nil 3377636049 3377636055
   ("" (skolem!)
    (("" (ground) (("" (expand "kill") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil))
   6011 80 t shostak))
 (receiver_ready_timeout_unchanged 0
  (receiver_ready_timeout_unchanged-2 nil 3377557294 3377629342
   ("" (skolem!)
    (("" (ground)
      (("" (expand "receiver_ready")
        (("" (expand "sender_dequeue_head")
          ((""
            (name-replace "prepare_receive_dirty_state"
             "prepare_receive_dirty(Receiver_partner_thread,
                                                   receiver!1,
                                                   state_old!1)" :hide?
             nil)
            (("" (expand "prepare_receive_dirty")
              (("" (expand "set_partner")
                (("" (expand "state_change_dirty")
                  (("" (expand "TS_full")
                    (("" (expand "TS_empty")
                      ((""
                        (name-replace "ipc_receiver_ready_change_state"
                         "ipc_receiver_ready_change(state_old!1`this,
                                                                receiver!1,
                                                                IF NOT
                                                                   state_old!1`receiver_initialized
                                                                THEN prepare_receive_dirty_state
                                                                     WITH [(receiver_initialized)
                                                                           := TRUE]
                                                                ELSE state_old!1
                                                                ENDIF)"
                         :hide? nil)
                        (("" (expand "ipc_receiver_ready_change")
                          (("" (expand "ipc_init")
                            (("" (expand "set_partner")
                              ((""
                                (name-replace
                                 "state_add_dirty_state"
                                 " state_add_dirty
                                                (receiver!1,
                                                 TS_empty
                                                 WITH [thread_transfer_in_progress
                                                       := TRUE],
                                                 IF NOT
                                                    state_old!1`receiver_initialized
                                                 THEN prepare_receive_dirty_state
                                                      WITH [(receiver_initialized)
                                                            := TRUE]
                                                 ELSE state_old!1
                                                 ENDIF
                                                 WITH [(threads)(receiver!1)`partner
                                                       := state_old!1`this])"
                                 :hide?
                                 nil)
                                ((""
                                  (name-replace
                                   "state_add_dirty_state2"
                                   "state_add_dirty(state_old!1`this,
                                                TS_empty
                                                WITH [thread_ready := TRUE,
                                                      thread_transfer_in_progress
                                                      := TRUE],
                                                state_add_dirty_state)"
                                   :hide?
                                   nil)
                                  ((""
                                    (expand "state_add_dirty")
                                    ((""
                                      (expand "TS_empty")
                                      ((""
                                        (expand "state_del_dirty")
                                        ((""
                                          (case
                                           " prepare_receive_dirty_state`timeout = state_old!1`timeout")
                                          (("1"
                                            (case
                                             "ipc_receiver_ready_change_state`timeout = state_old!1`timeout")
                                            (("1"
                                              (hide-all-but (-1 -2 1))
                                              (("1"
                                                (replace -1 *)
                                                (("1"
                                                  (replace -2 *)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case-replace
                                                       "state_old!1`receiver_initialized")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite 1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           *)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (replace
                                                 -4
                                                 +
                                                 rl
                                                 :hide?
                                                 T)
                                                (("2"
                                                  (beta)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     +
                                                     rl
                                                     :hide?
                                                     T)
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (replace
                                                         -2
                                                         +
                                                         rl
                                                         :hide?
                                                         T)
                                                        (("2"
                                                          (beta)
                                                          (("2"
                                                            (case-replace
                                                             " state_old!1`receiver_initialized")
                                                            (("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 +
                                                                 rl
                                                                 :hide?
                                                                 T)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -4))
                                            (("2"
                                              (replace
                                               -1
                                               +
                                               rl
                                               :hide?
                                               T)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil))
   1445 930 nil nil)
  (receiver_ready_timeout_unchanged-1 nil 3386392253 3377557208
   (";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
    (skolem!)
    ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
      (ground)
      ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
        (expand "receiver_ready")
        ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
          (expand "sender_dequeue_head")
          ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
            (name-replace "prepare_receive_dirty_state"
             "prepare_receive_dirty(Receiver_partner_thread,
                                                 receiver!1,
                                                 state_old!1)" :hide?
             nil)
            ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
              (expand "prepare_receive_dirty")
              ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                (expand "set_partner")
                ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                  (expand "state_change_dirty")
                  ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                    (expand "TS_full")
                    ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                      (expand "TS_empty")
                      ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                        (name-replace "ipc_receiver_ready_change_state"
                         "ipc_receiver_ready_change(state_old!1`this,
                                                              receiver!1,
                                                              IF NOT
                                                                 state_old!1`receiver_initialized
                                                              THEN prepare_receive_dirty_state
                                                                   WITH [(receiver_initialized)
                                                                         := TRUE]
                                                              ELSE state_old!1
                                                              ENDIF)"
                         :hide? nil)
                        ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                          (expand "ipc_receiver_ready_change")
                          ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                            (expand "ipc_init")
                            ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                              (expand "set_partner")
                              ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                (name-replace
                                 "state_add_dirty_state"
                                 " state_add_dirty
                                              (receiver!1,
                                               TS_empty
                                               WITH [thread_transfer_in_progress
                                                     := TRUE],
                                               IF NOT
                                                  state_old!1`receiver_initialized
                                               THEN prepare_receive_dirty_state
                                                    WITH [(receiver_initialized)
                                                          := TRUE]
                                               ELSE state_old!1
                                               ENDIF
                                               WITH [(threads)(receiver!1)`partner
                                                     := state_old!1`this])"
                                 :hide?
                                 nil)
                                ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                  (name-replace
                                   "state_add_dirty_state2"
                                   "state_add_dirty(state_old!1`this,
                                              TS_empty
                                              WITH [thread_ready := TRUE,
                                                    thread_transfer_in_progress
                                                    := TRUE],
                                              state_add_dirty_state)"
                                   :hide?
                                   nil)
                                  ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                    (expand "state_add_dirty")
                                    ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                      (expand "TS_empty")
                                      ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                        (expand "state_del_dirty")
                                        ((";;; Proof receiver_ready_timeout_unchanged-3 for formula fiasco_state.receiver_ready_timeout_unchanged"
                                          (case-replace
                                           "state_old!1`receiver_initialized")
                                          (("1"
                                            (case
                                             "not state_old!1`threads(receiver!1)`state`thread_receiving")
                                            (("1" (assert) nil)
                                             ("2"
                                              (case
                                               "not state_old!1`threads(receiver!1)`state`thread_ipc_in_progress")
                                              (("1" (assert) nil)
                                               ("2"
                                                (case-replace
                                                 "state_old!1`threads(receiver!1)`state`thread_cancel")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "state_old!1`this = state_old!1`threads(receiver!1)`partner")
                                                    (("1"
                                                      (case
                                                       "not in_sender_list(receiver!1, state_old!1)")
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "not ipc_receiver_ready(state_old!1`threads(receiver!1)`partner,
                                                                                                  receiver!1, state_old!1)")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "ipc_receiver_ready(state_old!1`this, receiver!1, state_old!1)")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))))))))))))))
                                           ("2"
                                            (rewrite 1)
                                            (("2"
                                              (case
                                               "not prepare_receive_dirty_state`threads
                                                  (receiver!1)`state`thread_receiving")
                                              (("1" (assert) nil)
                                               ("2"
                                                (case
                                                 "not  prepare_receive_dirty_state`threads
                                                           (receiver!1)`state`thread_ipc_in_progress")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (case-replace
                                                   " prepare_receive_dirty_state`threads
                                                    (receiver!1)`state`thread_cancel")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       " state_old!1`this =
                                                   prepare_receive_dirty_state`threads(receiver!1)`partner")
                                                      (("1"
                                                        (case
                                                         "not  in_sender_list(receiver!1,
                                                                                             prepare_receive_dirty_state
                                                                                               WITH [(receiver_initialized) := TRUE])")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "not ipc_receiver_ready(prepare_receive_dirty_state`threads
                                                                                                              (receiver!1)`partner,
                                                                                                          receiver!1,
                                                                                                          prepare_receive_dirty_state
                                                                                                            WITH [(receiver_initialized) := TRUE])")
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case-replace
                                                           "ipc_receiver_ready(state_old!1`this, receiver!1,
                                                                                 prepare_receive_dirty_state
                                                                                   WITH [(receiver_initialized) := TRUE])")
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished nil 128566 49850 nil nil))
 (preemption_point_actions_timeout_unchanged 0
  (preemption_point_actions_timeout_unchanged-1 nil 3388824417
   3388824613
   ("" (induct "actions")
    (("1" (skolem!) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (lemma "receiver_ready_timeout_unchanged")
            (("3" (lemma "kill_timeout_unchanged")
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (expand "sys_thread_ex_regs")
                        (("3" (replace -1 * rl)
                          (("3" (replace -2 * rl)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (FALSE const-decl "bool" booleans nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list_induction formula-decl nil list_adt nil)
    (receiver_ready_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (kill_timeout_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   103393 760 t shostak))
 (preemption_point_timeout_unchanged 0
  (preemption_point_timeout_unchanged-1 nil 3386392278 3388824634
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        (("" (lemma "preemption_point_actions_timeout_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_timeout_unchanged formula-decl nil
     fiasco_helpers nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   12826 150 t nil))
 (preemption_point_actions_timeout 0
  (preemption_point_actions_timeout-1 nil 3388831991 3388832296
   ("" (induct "actions")
    (("1" (skolem!)
      (("1" (ground)
        (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (flatten) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (expand "sys_thread_ex_regs")
          (("3" (expand "timeout")
            (("3" (expand "state_change")
              (("3" (expand "state_change_dirty")
                (("3" (expand "TS_full")
                  (("3" (expand "TS_empty")
                    (("3" (lemma "kill_timeout_unchanged")
                      (("3" (lemma "receiver_ready_timeout_unchanged")
                        (("3"
                          (inst -1 "state_old!1`this" "partner!1"
                           "state_old!1")
                          (("3" (inst -2 "partner!1" "state_old!1")
                            (("3" (assert)
                              (("3"
                                (inst?)
                                (("3"
                                  (case-replace
                                   "cons1_var!1 = Sys_thread_ex_regs")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (case-replace
                                     "cons1_var!1 = Timeout")
                                    (("1"
                                      (case-replace "allow_timeout!1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case-replace "Timeout = Kill")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case-replace
                                           "Timeout = Receiver_ready")
                                          (("1"
                                            (case-replace
                                             "state_old!1`this = partner!1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case-replace
                                       "cons1_var!1 = Sys_thread_ex_regs")
                                      (("2"
                                        (case-replace
                                         "cons1_var!1 = Kill")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case-replace
                                           "cons1_var!1 = Receiver_ready")
                                          (("1"
                                            (case-replace
                                             "state_old!1`this = partner!1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (kill_timeout_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (receiver_ready_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   304788 1440 t shostak))
 (preemption_point_timeout 0
  (preemption_point_timeout-1 nil 3388832302 3388832331
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          (("" (lemma "preemption_point_actions_timeout")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_timeout formula-decl nil fiasco_helpers
     nil))
   28929 140 t shostak))
 (sender_enqueue_error_unchanged 0
  (sender_enqueue_error_unchanged-1 nil 3388210268 3377629343
   ("" (skolem!)
    (("" (ground)
      (("" (expand "sender_enqueue") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil))
   141 120 t nil))
 (timeout_error_unchanged 0
  (timeout_error_unchanged-1 nil 3377634658 3377634670
   ("" (skolem!)
    (("" (ground)
      (("" (expand "timeout")
        (("" (expand "state_change")
          (("" (expand "state_change_dirty") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((state_change const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil))
   12495 310 t shostak))
 (kill_error_unchanged 0
  (kill_error_unchanged-1 nil 3377634674 3377634684
   ("" (skolem!)
    (("" (ground) (("" (expand "kill") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil))
   10515 50 t shostak))
 (ipc_receiver_ready_change_error_unchanged 0
  (ipc_receiver_ready_change_error_unchanged-1 nil 3388210295
   3377629343
   ("" (skolem!)
    (("" (ground)
      (("" (expand "ipc_receiver_ready_change")
        (("" (expand "ipc_init")
          (("" (expand "set_partner")
            ((""
              (name-replace "state_add_dirty_state" "state_add_dirty
                                         (partner!1,
                                          TS_empty
                                          WITH [thread_transfer_in_progress
                                                := TRUE],
                                          state_old!1
                                          WITH [(threads)(partner!1)`partner
                                                := state_old!1`this])"
               :hide? nil)
              ((""
                (name-replace "state_add_dirty_state2"
                 "state_add_dirty(state_old!1`this,
                                         TS_empty
                                         WITH [thread_ready := TRUE,
                                               thread_transfer_in_progress
                                               := TRUE],
                                         state_add_dirty_state)" :hide?
                 nil)
                (("" (expand "state_del_dirty")
                  (("" (expand "state_add_dirty")
                    (("" (expand "TS_empty") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ipc_init const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil))
   493 320 t nil))
 (receiver_ready_error_unchanged 0
  (receiver_ready_error_unchanged-1 nil 3388210319 3377629344
   ("" (skolem!)
    (("" (ground)
      (("" (expand "receiver_ready")
        ((""
          (name-replace "prepare_receive_dirty_state"
           "prepare_receive_dirty(Receiver_partner_thread,
                                         partner!1,
                                         state_old!1)" :hide? nil)
          (("" (expand "prepare_receive_dirty")
            (("" (expand "set_partner")
              (("" (expand "state_change_dirty")
                (("" (expand "sender_dequeue_head")
                  (("" (expand "TS_full")
                    (("" (expand "TS_empty")
                      ((""
                        (lemma
                         "ipc_receiver_ready_change_error_unchanged")
                        ((""
                          (case-replace
                           " state_old!1`receiver_initialized")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite 1)
                            (("2"
                              (inst -1 "partner!1"
                               "prepare_receive_dirty_state
                                                      WITH [(receiver_initialized)
                                                            := TRUE]")
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (case-replace
                                     "prepare_receive_dirty_state`threads
                     (partner!1)`state`thread_cancel")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ipc_receiver_ready_change_error_unchanged formula-decl nil
     fiasco_helpers nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil))
   1081 750 t nil))
 (preemption_point_actions_error_unchanged 0
  (preemption_point_actions_error_unchanged-1 nil 3388824196 3388824322
   ("" (induct "actions")
    (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (expand "sys_thread_ex_regs")
            (("3" (lemma "timeout_error_unchanged")
              (("3" (lemma "kill_error_unchanged")
                (("3" (lemma "receiver_ready_error_unchanged")
                  (("3" (inst?)
                    (("3" (inst?)
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (replace -1 * rl)
                            (("3" (replace -2 * rl)
                              (("3"
                                (replace -3 * rl)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (timeout_error_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_error_unchanged formula-decl nil fiasco_helpers
     nil)
    (kill_error_unchanged formula-decl nil fiasco_helpers nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   125861 700 t shostak))
 (preemption_point_error_unchanged 0
  (preemption_point_error_unchanged-1 nil 3388210342 3388824345
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        (("" (lemma "preemption_point_actions_error_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_error_unchanged formula-decl nil
     fiasco_helpers nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   14473 140 t nil))
 (sender_dequeue_this_unchanged 0
  (sender_dequeue_this_unchanged-1 nil 3386391582 3377629345
   (";;; Proof sender_dequeue_this_unchanged-1 for formula fiasco_lock.sender_dequeue_this_unchanged"
    (skolem!)
    ((";;; Proof sender_dequeue_this_unchanged-1 for formula fiasco_lock.sender_dequeue_this_unchanged"
      (ground)
      ((";;; Proof sender_dequeue_this_unchanged-1 for formula fiasco_lock.sender_dequeue_this_unchanged"
        (expand "sender_dequeue")
        ((";;; Proof sender_dequeue_this_unchanged-1 for formula fiasco_lock.sender_dequeue_this_unchanged"
          (propax) nil))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((sender_dequeue const-decl "System_state" fiasco_functions nil)) 90
   30 nil nil))
 (sender_enqueue_this_unchanged 0
  (sender_enqueue_this_unchanged-1 nil 3386391603 3377629345
   (";;; Proof sender_enqueue_this_unchanged-1 for formula fiasco_lock.sender_enqueue_this_unchanged"
    (skolem!)
    ((";;; Proof sender_enqueue_this_unchanged-1 for formula fiasco_lock.sender_enqueue_this_unchanged"
      (ground)
      ((";;; Proof sender_enqueue_this_unchanged-1 for formula fiasco_lock.sender_enqueue_this_unchanged"
        (expand "sender_enqueue")
        ((";;; Proof sender_enqueue_this_unchanged-1 for formula fiasco_lock.sender_enqueue_this_unchanged"
          (assert) nil))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil))
   251 190 nil nil))
 (prepare_receive_dirty_this_unchanged 0
  (prepare_receive_dirty_this_unchanged-1 nil 3386562556 3377629345
   ("" (skolem!)
    (("" (ground)
      (("" (expand "prepare_receive_dirty")
        (("" (expand "set_partner")
          (("" (expand "state_change_dirty") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((set_partner const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil))
   233 160 t shostak))
 (timeout_this_unchanged 0
  (timeout_this_unchanged-1 nil 3377628739 3377629346
   ("" (skolem!)
    (("" (ground)
      (("" (expand "timeout")
        (("" (expand "state_change")
          (("" (expand "state_change_dirty") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((state_change const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil))
   362 250 t shostak))
 (kill_this_unchanged 0
  (kill_this_unchanged-1 nil 3377628753 3377629346
   ("" (skolem!)
    (("" (ground) (("" (expand "kill") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil)) 81
   60 t shostak))
 (ipc_receiver_ready_change_this_unchanged 0
  (ipc_receiver_ready_change_this_unchanged-1 nil 3386391625 3377629347
   (";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
    (skolem!)
    ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
      (assert)
      ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
        (expand "ipc_receiver_ready_change")
        ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
          (expand "ipc_init")
          ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
            (expand "set_partner")
            ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
              (name-replace "state_add_dirty_state" "state_add_dirty
                                         (receiver!1,
                                          TS_empty
                                          WITH [thread_transfer_in_progress
                                                := TRUE],
                                          state_old!1
                                          WITH [(threads)(receiver!1)`partner
                                                := state_old!1`this])"
               :hide? nil)
              ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
                (expand "state_add_dirty")
                ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
                  (expand "TS_empty")
                  ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
                    (expand "state_del_dirty")
                    ((";;; Proof ipc_receiver_ready_change_this_unchanged-1 for formula fiasco_lock.ipc_receiver_ready_change_this_unchanged"
                      (assert) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((ipc_init const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil))
   952 640 nil nil))
 (receiver_ready_this_unchanged 0
  (receiver_ready_this_unchanged-1 nil 3386391650 3377629351
   (";;; Proof receiver_ready_this_unchanged-1 for formula fiasco_lock.receiver_ready_this_unchanged"
    (skolem!)
    ((";;; Proof receiver_ready_this_unchanged-1 for formula fiasco_lock.receiver_ready_this_unchanged"
      (assert)
      ((";;; Proof receiver_ready_this_unchanged-1 for formula fiasco_lock.receiver_ready_this_unchanged"
        (expand "receiver_ready")
        ((";;; Proof receiver_ready_this_unchanged-1 for formula fiasco_lock.receiver_ready_this_unchanged"
          (lemma "ipc_receiver_ready_change_this_unchanged")
          ((";;; Proof receiver_ready_this_unchanged-1 for formula fiasco_lock.receiver_ready_this_unchanged"
            (case-replace "state_old!1`receiver_initialized")
            (("1" (assert)
              (("1"
                (case "not state_old!1`threads(receiver!1)`state`thread_receiving")
                (("1" (assert) nil)
                 ("2"
                  (case "not state_old!1`threads(receiver!1)`state`thread_ipc_in_progress")
                  (("1" (assert) nil)
                   ("2"
                    (case "state_old!1`threads(receiver!1)`state`thread_cancel")
                    (("1" (assert) nil)
                     ("2" (assert)
                      (("2"
                        (case "not state_old!1`this = state_old!1`threads(receiver!1)`partner")
                        (("1" (assert)
                          (("1" (expand "sender_dequeue_head")
                            (("1"
                              (case-replace
                               "ipc_receiver_ready(state_old!1`this, receiver!1, state_old!1)")
                              (("1" (assert) (("1" (inst?) nil)))
                               ("2" (inst?) (("2" (assert) nil)))))))))
                         ("2" (assert)
                          (("2"
                            (case-replace
                             " in_sender_list(receiver!1, state_old!1)")
                            (("1"
                              (case-replace
                               "ipc_receiver_ready(state_old!1`this, receiver!1, state_old!1)")
                              (("1" (rewrite 1) (("1" (inst?) nil)))
                               ("2" (assert) nil)))
                             ("2" (rewrite 1) nil)))))))))))))))))
             ("2" (expand "sender_dequeue_head")
              (("2" (assert)
                (("2"
                  (case "not prepare_receive_dirty(Receiver_partner_thread, receiver!1,
                                         state_old!1)`threads
                       (receiver!1)`state`thread_receiving")
                  (("1"
                    (name-replace "prepare_receive_dirty_state"
                     "prepare_receive_dirty(Receiver_partner_thread,
                                            receiver!1,
                                            state_old!1)" :hide? nil)
                    (("1" (expand "prepare_receive_dirty")
                      (("1" (expand "set_partner")
                        (("1" (expand "state_change_dirty")
                          (("1" (expand "TS_empty")
                            (("1" (expand "TS_full")
                              (("1" (assert) nil)))))))))))))
                   ("2"
                    (name-replace "prepare_receive_dirty_state"
                     "prepare_receive_dirty(Receiver_partner_thread,
                                                      receiver!1,
                                                      state_old!1)"
                     :hide? nil)
                    (("2" (expand "prepare_receive_dirty")
                      (("2" (expand "set_partner")
                        (("2" (expand "state_change_dirty")
                          (("2" (expand "TS_full")
                            (("2" (expand "TS_empty")
                              (("2"
                                (assert)
                                (("2"
                                  (case
                                   "state_old!1`this =
                             prepare_receive_dirty_state`threads(receiver!1)`partner")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "not prepare_receive_dirty_state`threads
                               (receiver!1)`state`thread_cancel")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "not in_sender_list(receiver!1,
                                        prepare_receive_dirty_state
                                          WITH [(receiver_initialized) := TRUE])")
                                          (("1" (assert) nil)
                                           ("2"
                                            (case
                                             "not ipc_receiver_ready(state_old!1`this, receiver!1,
                                               prepare_receive_dirty_state
                                                 WITH [(receiver_initialized) := TRUE])")
                                            (("1" (assert) nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -6
                                                 "receiver!1"
                                                 "prepare_receive_dirty_state
                                                 WITH [(receiver_initialized)
                                                       := TRUE]")
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))
                                       ("2" (assert) nil)))))
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "prepare_receive_dirty_state`threads
                               (receiver!1)`state`thread_cancel")
                                      (("1" (assert) nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "ipc_receiver_ready(state_old!1`this, receiver!1,
                                                prepare_receive_dirty_state
                                                  WITH [(receiver_initialized) := TRUE])")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -4
                                               "receiver!1"
                                               "prepare_receive_dirty_state
                                               WITH [(receiver_initialized)
                                                     := TRUE]")
                                              (("1" (assert) nil)))))
                                           ("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((ipc_receiver_ready_change_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil))
   3957 2450 nil nil))
 (preemption_point_actions_this_unchanged 0
  (preemption_point_actions_this_unchanged-1 nil 3388823377 3388824140
   ("" (induct "actions")
    (("1" (skolem!)
      (("1" (inst -1 "partner!1" "have_timeout!1" "state_old!1")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (assert)
            (("3" (expand "sys_thread_ex_regs")
              (("3" (lemma "timeout_this_unchanged")
                (("3" (lemma "kill_this_unchanged")
                  (("3" (lemma "receiver_ready_this_unchanged")
                    (("3" (inst?)
                      (("3" (inst?)
                        (("3" (inst?)
                          (("3" (assert)
                            (("3" (replace -1 * rl)
                              (("3"
                                (replace -2 * rl)
                                (("3"
                                  (replace -3 * rl)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (timeout_this_unchanged formula-decl nil fiasco_helpers nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   550695 2210 t shostak))
 (preemption_point_this_unchanged 0
  (preemption_point_this_unchanged-1 nil 3386391672 3388823554
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        (("" (lemma "preemption_point_actions_this_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   20365 160 t nil))
 (abort_send_this_unchanged 0
  (abort_send_this_unchanged-1 nil 3386391689 3377629354
   (";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
    (skolem!)
    ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
      (ground)
      ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
        (expand "abort_send")
        ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
          (expand "clear_dirty")
          ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
            (expand "sender_dequeue")
            ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
              (expand "state_del_dirty")
              ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                (expand "TS_empty")
                ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                  (lemma "preemption_point_this_unchanged")
                  ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                    (lemma "preemption_point_this_unchanged")
                    ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                      (inst?)
                      ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                        (inst -2 "partner!1" "TRUE"
                         "IF in_sender_list(partner!1,
                                            preemption_point
                                            (partner!1,
                                             FALSE,
                                             state_old!1
                                             WITH [(threads)
                                                   (state_old!1`this)
                                                   `state
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state
                                                      WITH [thread_ready
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_ready,
                                                            thread_cancel
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_cancel,
                                                            thread_dead
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_dead,
                                                            thread_busy
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_busy,
                                                            thread_invalid
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_invalid,
                                                            thread_polling
                                                            := FALSE,
                                                            thread_receiving
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_receiving,
                                                            thread_ipc_in_progress
                                                            := FALSE,
                                                            thread_send_in_progress
                                                            := FALSE,
                                                            thread_transfer_in_progress
                                                            := FALSE]]))
                            THEN preemption_point(partner!1,
                                                  FALSE,
                                                  state_old!1
                                                  WITH [(threads)
                                                        (state_old!1`this)
                                                        `state
                                                        := state_old!1`threads
                                                           (state_old!1`this)`state
                                                           WITH [thread_ready
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_ready,
                                                                 thread_cancel
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_cancel,
                                                                 thread_dead
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_dead,
                                                                 thread_busy
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_busy,
                                                                 thread_invalid
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_invalid,
                                                                 thread_polling
                                                                 := FALSE,
                                                                 thread_receiving
                                                                 := state_old!1`threads
                                                                    (state_old!1`this)`state`thread_receiving,
                                                                 thread_ipc_in_progress
                                                                 := FALSE,
                                                                 thread_send_in_progress
                                                                 := FALSE,
                                                                 thread_transfer_in_progress
                                                                 := FALSE]])
                                   WITH [(threads)(partner!1)`sender_list
                                         := Dequeued]
                          ELSE preemption_point(partner!1,
                                                FALSE,
                                                state_old!1
                                                WITH [(threads)
                                                      (state_old!1`this)
                                                      `state
                                                      := state_old!1`threads
                                                         (state_old!1`this)`state
                                                         WITH [thread_ready
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_ready,
                                                               thread_cancel
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_cancel,
                                                               thread_dead
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_dead,
                                                               thread_busy
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_busy,
                                                               thread_invalid
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_invalid,
                                                               thread_polling
                                                               := FALSE,
                                                               thread_receiving
                                                               := state_old!1`threads
                                                                  (state_old!1`this)`state`thread_receiving,
                                                               thread_ipc_in_progress
                                                               := FALSE,
                                                               thread_send_in_progress
                                                               := FALSE,
                                                               thread_transfer_in_progress
                                                               := FALSE]])
                          ENDIF")
                        ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                          (assert)
                          ((";;; Proof abort_send_this_unchanged-1 for formula fiasco_lock.abort_send_this_unchanged"
                            (case-replace "in_sender_list(partner!1,
                                            preemption_point
                                            (partner!1,
                                             FALSE,
                                             state_old!1
                                             WITH [(threads)
                                                   (state_old!1`this)
                                                   `state
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state
                                                      WITH [thread_ready
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_ready,
                                                            thread_cancel
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_cancel,
                                                            thread_dead
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_dead,
                                                            thread_busy
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_busy,
                                                            thread_invalid
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_invalid,
                                                            thread_polling
                                                            := FALSE,
                                                            thread_receiving
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_receiving,
                                                            thread_ipc_in_progress
                                                            := FALSE,
                                                            thread_send_in_progress
                                                            := FALSE,
                                                            thread_transfer_in_progress
                                                            := FALSE]]))")
                            (("1" (assert) nil)
                             ("2" (assert)
                              nil))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (abort_send const-decl "System_state" fiasco_functions nil))
   3399 2250 nil nil))
 (do_send_wait_finish_this_unchanged 0
  (do_send_wait_finish_this_unchanged-1 nil 3386391729 3377629374
   (";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
    (skolem!)
    ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
      (ground)
      ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
        (expand "do_send_wait_finish")
        ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
          (name-replace "preemption_point_state" "preemption_point
                                                     (partner!1,
                                                      FALSE,
                                                      IF state_old!1`timeout
                                                      THEN state_add_dirty
                                                           (state_old!1`this,
                                                            TS_empty
                                                            WITH [thread_ipc_in_progress
                                                                  := TRUE],
                                                            state_old!1)
                                                      ELSE state_old!1
                                                      ENDIF)" :hide?
           nil)
          ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
            (expand "sender_dequeue")
            ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
              (name-replace "preemption_point_state2"
               "preemption_point(partner!1,
                                                    FALSE,
                                                    preemption_point_state
                                                    WITH [(threads)
                                                          (partner!1)
                                                          `sender_list
                                                          := Dequeued])"
               :hide? nil)
              ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                (lemma "preemption_point_this_unchanged")
                ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                  (lemma "preemption_point_this_unchanged")
                  ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                    (inst?)
                    ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                      (inst -2 "partner!1" "FALSE"
                       "IF state_old!1`timeout
                           THEN state_add_dirty(state_old!1`this,
                                                TS_empty
                                                WITH [thread_ipc_in_progress
                                                      := TRUE],
                                                state_old!1)
                         ELSE state_old!1
                         ENDIF")
                      ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                        (name-replace "state_add_dirty_state"
                         "state_add_dirty(state_old!1`this,
                                 TS_empty
                                   WITH [thread_ipc_in_progress := TRUE],
                                 state_old!1)" :hide? nil)
                        ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                          (name-replace "state_del_dirty_state"
                           "state_del_dirty(preemption_point_state2`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE],
                                            preemption_point_state2)"
                           :hide? nil)
                          ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                            (lemma "abort_send_this_unchanged")
                            ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                              (name-replace "state_change_dirty_state"
                               "state_change_dirty(partner!1,
                                                   TS_full
                                                   WITH [thread_ipc_in_progress
                                                         := FALSE],
                                                   TS_empty
                                                   WITH [thread_cancel
                                                         := TRUE,
                                                         thread_ready
                                                         := TRUE],
                                                   state_del_dirty_state)"
                               :hide? nil)
                              ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                (expand "state_del_dirty")
                                ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                  (expand "state_change_dirty")
                                  ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                    (expand "state_add_dirty")
                                    ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                      (expand "TS_empty")
                                      ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                        (expand "TS_full")
                                        ((";;; Proof do_send_wait_finish_this_unchanged-1 for formula fiasco_lock.do_send_wait_finish_this_unchanged"
                                          (case-replace
                                           "state_del_dirty_state`threads
                (state_del_dirty_state`this)`state`thread_cancel")
                                          (("1"
                                            (case-replace
                                             "in_ipc(state_del_dirty_state`this, partner!1,
                         state_del_dirty_state)")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   " state_old!1`timeout")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      nil)))
                                                   ("2"
                                                    (assert)
                                                    nil)))))))
                                             ("2"
                                              (rewrite 1)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "state_old!1`timeout ")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (rewrite 1)
                                              (("2"
                                                (case-replace
                                                 "in_ipc(state_del_dirty_state`this, partner!1,
                         state_del_dirty_state)")
                                                (("1"
                                                  (case-replace
                                                   "state_del_dirty_state`threads(partner!1)`state`thread_dead")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case-replace
                                                         "state_old!1`timeout ")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       "state_old!1`timeout")
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil)))))))
                                                 ("2"
                                                  (rewrite 1)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         " state_old!1`timeout ")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (abort_send_this_unchanged formula-decl nil fiasco_helpers nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (do_send_wait_finish const-decl "System_state" fiasco_functions
     nil))
   20211 12050 nil nil))
 (do_send_wait_loop_this_unchanged 0
  (do_send_wait_loop_this_unchanged-1 nil 3386391757 3377629382
   (";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
    (skolem!)
    ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
      (ground)
      ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
        (expand "do_send_wait_loop")
        ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
          (expand "lock_dirty")
          ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
            (expand "clear_dirty")
            ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
              (name-replace "preemption_point_state" "preemption_point
                                           (partner!1,
                                            TRUE,
                                            state_old!1
                                            WITH [(threads)
                                                  (partner!1)
                                                  `thread_lock
                                                  := Zero_thread])"
               :hide? nil)
              ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
                (lemma "preemption_point_this_unchanged")
                ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
                  (inst?)
                  ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
                    (assert)
                    ((";;; Proof do_send_wait_loop_this_unchanged-1 for formula fiasco_lock.do_send_wait_loop_this_unchanged"
                      (case-replace "preemption_point_state`threads
              WITH [(partner!1)`thread_lock := preemption_point_state`this]
                (preemption_point_state`this)`state`thread_cancel")
                      (("1"
                        (lemma "do_send_wait_finish_this_unchanged")
                        (("1" (inst?) (("1" (assert) nil)))))
                       ("2" (assert)
                        (("2"
                          (case-replace "preemption_point_state`threads
                WITH [(partner!1)`thread_lock := preemption_point_state`this]
                  (preemption_point_state`this)`state`thread_transfer_in_progress")
                          (("1"
                            (lemma
                             "do_send_wait_finish_this_unchanged")
                            (("1" (inst?) (("1" (assert) nil)))))
                           ("2" (assert)
                            (("2"
                              (case-replace
                               "preemption_point_state`timeout")
                              (("1"
                                (lemma "abort_send_this_unchanged")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 + rl)
                                      (("1" (assert) nil)))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "preemption_point_state`threads(partner!1)`state`thread_dead")
                                  (("1"
                                    (lemma "abort_send_this_unchanged")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 + rl)
                                          (("1" (assert) nil)))))))))
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "state_add_dirty")
                                      (("2"
                                        (expand "TS_empty")
                                        (("2"
                                          (lemma
                                           "do_send_wait_finish_this_unchanged")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1 + rl)
                                                (("2"
                                                  (assert)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((lock_dirty const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (do_send_wait_finish_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abort_send_this_unchanged formula-decl nil fiasco_helpers nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (do_send_wait_loop const-decl "System_state" fiasco_functions nil))
   7091 2810 nil nil))
 (do_send_wait_this_unchanged 0
  (do_send_wait_this_unchanged-1 nil 3386391780 3377629385
   (";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
    (skolem!)
    ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
      (ground)
      ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
        (expand "do_send_wait")
        ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
          (expand "lock_dirty")
          ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
            (name-replace "state_add_dirty_state" "state_add_dirty
                                               (state_old!1`this,
                                                TS_empty
                                                WITH [thread_polling := TRUE,
                                                      thread_send_in_progress
                                                      := TRUE,
                                                      thread_ipc_in_progress
                                                      := TRUE],
                                                state_old!1
                                                WITH [(assertions_held)
                                                      := state_old!1`assertions_held
                                                         AND
                                                         (state_old!1`threads
                                                          (partner!1)`thread_lock
                                                          =
                                                          Zero_thread
                                                          OR
                                                          state_old!1`threads
                                                          (partner!1)`thread_lock
                                                          =
                                                          state_old!1`this)])"
             :hide? nil)
            ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
              (lemma "preemption_point_this_unchanged")
              ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                (lemma "preemption_point_this_unchanged")
                ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                  (lemma "sender_enqueue_this_unchanged")
                  ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                    (inst?)
                    ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                      (inst?)
                      ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                        (expand "clear_dirty")
                        ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                          (inst -3 "partner!1" "TRUE" "sender_enqueue
                                       (partner!1,
                                        preemption_point
                                        (partner!1,
                                         FALSE,
                                         state_add_dirty_state
                                         WITH [(threads)
                                               (partner!1)
                                               `thread_lock
                                               := state_add_dirty_state`this]))")
                          ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                            (expand "state_add_dirty")
                            ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                              (expand "TS_empty")
                              ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                                (assert)
                                ((";;; Proof do_send_wait_this_unchanged-1 for formula fiasco_lock.do_send_wait_this_unchanged"
                                  (case
                                   "state_add_dirty_state`this = state_old!1`this")
                                  (("1"
                                    (replace -1 * :hide? T)
                                    (("1"
                                      (case-replace
                                       "preemption_point(partner!1, FALSE,
                               state_add_dirty_state
                                 WITH [(threads)(partner!1)`thread_lock
                                         := state_old!1`this])`threads
                  (preemption_point(partner!1, FALSE,
                                    state_add_dirty_state
                                      WITH [(threads)(partner!1)`thread_lock
                                            := state_old!1`this])`this)`state`thread_cancel")
                                      (("1"
                                        (expand "state_del_dirty")
                                        (("1" (propax) nil)))
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "sender_ok(preemption_point(partner!1,
                                           FALSE,
                                           state_add_dirty_state
                                           WITH [(threads)(partner!1)`thread_lock
                                                 := state_old!1`this])`this,
                          partner!1,
                          preemption_point(partner!1,
                                           FALSE,
                                           state_add_dirty_state
                                           WITH [(threads)(partner!1)`thread_lock
                                                 := state_old!1`this]))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               "preemption_point(partner!1, TRUE,
                                 sender_enqueue(partner!1,
                                                preemption_point
                                                (partner!1,
                                                 FALSE,
                                                 state_add_dirty_state
                                                 WITH [(threads)
                                                       (partner!1)
                                                       `thread_lock
                                                       := state_old!1`this])))`timeout")
                                              (("1"
                                                (lemma
                                                 "abort_send_this_unchanged")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil)))))
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "do_send_wait_loop_this_unchanged")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))))
                                   ("2"
                                    (hide-all-but (-4 1))
                                    (("2"
                                      (replace -1 + rl :hide? T)
                                      (("2"
                                        (assert)
                                        nil))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((lock_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (sender_enqueue_this_unchanged formula-decl nil fiasco_helpers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (abort_send_this_unchanged formula-decl nil fiasco_helpers nil)
    (do_send_wait_loop_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (do_send_wait const-decl "System_state" fiasco_functions nil))
   3408 2530 nil nil))
 (try_handshake_receiver_this_unchanged 0
  (try_handshake_receiver_this_unchanged-1 nil 3386391823 3377629387
   (";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
    (skolem!)
    ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
      (ground)
      ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
        (expand "try_handshake_receiver")
        ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
          (expand "lock_dirty")
          ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
            (name-replace "preemption_point_state"
             "preemption_point(partner!1,
                                                FALSE,
                                                state_old!1
                                                WITH [handshake_attempted
                                                      := TRUE])" :hide?
             nil)
            ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
              (lemma "preemption_point_this_unchanged")
              ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                (inst?)
                ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                  (expand "clear_dirty")
                  ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                    (assert)
                    ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                      (case-replace "partner!1 = Zero_thread")
                      ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                        (case-replace
                         "state_old!1`threads(partner!1)`state`thread_invalid ")
                        ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                          (case-replace "partner!1 = Nil_thread")
                          ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                            (assert)
                            ((";;; Proof try_handshake_receiver_this_unchanged-1 for formula fiasco_lock.try_handshake_receiver_this_unchanged"
                              (case-replace
                               "state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                              (("1"
                                (case-replace
                                 "state_old!1`threads(state_old!1`this)`state`thread_cancel")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case-replace
                                     "sender_ok(state_old!1`this, partner!1,
                            state_old!1 WITH [handshake_attempted := TRUE])")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "do_send_wait_this_unchanged")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "preemption_point_state`threads
                WITH [(partner!1)`thread_lock := preemption_point_state`this]
                  (preemption_point_state`this)`state`thread_cancel")
                                  (("1" (assert) nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case-replace
                                       "sender_ok(preemption_point_state`this, partner!1,
                              preemption_point_state
                                WITH [(threads)(partner!1)`thread_lock
                                        := preemption_point_state`this])")
                                      (("1" (assert) nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "do_send_wait_this_unchanged")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((lock_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (do_send_wait_this_unchanged formula-decl nil fiasco_helpers nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil))
   2225 1500 nil nil))
 (do_ipc_send_part_this_unchanged 0
  (do_ipc_send_part_this_unchanged-1 nil 3386391842 3377629398
   (";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
    (skolem!)
    ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
      (ground)
      ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
        (name-replace "do_ipc_send_part_state"
         "do_ipc_send_part(partner!1, have_receive!1, state_old!1)"
         :hide? nil)
        ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
          (expand "do_ipc_send_part")
          ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
            (name-replace "transfer_msg_state" "transfer_msg
                                                                       (partner!1,
                                                                        ipc_init
                                                                        (try_handshake_receiver
                                                                         (partner!1,
                                                                          state_old!1)`this,
                                                                         partner!1,
                                                                         try_handshake_receiver
                                                                         (partner!1,
                                                                          state_old!1)
                                                                         WITH [(assertions_held)
                                                                               := try_handshake_receiver
                                                                                  (partner!1,
                                                                                   state_old!1)`assertions_held
                                                                                  AND
                                                                                  NOT
                                                                                  try_handshake_receiver
                                                                                  (partner!1,
                                                                                   state_old!1)`threads
                                                                                  (try_handshake_receiver
                                                                                   (partner!1,
                                                                                    state_old!1)`this)`state`thread_polling]))"
             :hide? nil)
            ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
              (expand "clear_dirty_dont_switch")
              ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                (expand "wake_receiver")
                ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                  (expand "state_change_dirty")
                  ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                    (expand "TS_empty")
                    ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                      (expand "TS_full")
                      ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                        (expand "clear_dirty")
                        ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                          (expand "transfer_msg")
                          ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                            (expand "ipc_init")
                            ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                              (expand "set_partner")
                              ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                (expand "state_add_dirty")
                                ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                  (expand "TS_empty")
                                  ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                    (assert)
                                    ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                      (lemma
                                       "try_handshake_receiver_this_unchanged")
                                      ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                        (inst?)
                                        ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                          (assert)
                                          ((";;; Proof do_ipc_send_part_this_unchanged-1 for formula fiasco_lock.do_ipc_send_part_this_unchanged"
                                            (case-replace
                                             "try_handshake_receiver(partner!1, state_old!1)`error")
                                            (("1" (assert) nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "state_del")
                                                (("2"
                                                  (case
                                                   "state_old!1`this = transfer_msg_state`this")
                                                  (("1"
                                                    (expand
                                                     "TS_ipc_end_mask")
                                                    (("1"
                                                      (expand
                                                       "TS_ipc_sending_mask")
                                                      (("1"
                                                        (expand
                                                         "TS_empty")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           +
                                                           rl
                                                           :hide?
                                                           T)
                                                          (("1"
                                                            (case
                                                             "transfer_msg_state`error")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "state_del_dirty")
                                                                (("1"
                                                                  (case-replace
                                                                   "in_ipc(transfer_msg_state`this, partner!1,
                         transfer_msg_state
                           WITH [(assertions_held)
                                   := transfer_msg_state`assertions_held AND
                                       (transfer_msg_state`threads
                                            (partner!1)`thread_lock
                                         = Zero_thread
                                         OR
                                         transfer_msg_state`threads
                                             (partner!1)`thread_lock
                                          = transfer_msg_state`this)])")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "not have_receive!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "state_del_dirty")
                                                                    (("1"
                                                                      (case-replace
                                                                       "in_ipc(transfer_msg_state`this, partner!1,
                           transfer_msg_state
                             WITH [(assertions_held)
                                     := transfer_msg_state`assertions_held AND
                                         (transfer_msg_state`threads
                                              (partner!1)`thread_lock
                                           = Zero_thread
                                           OR
                                           transfer_msg_state`threads
                                               (partner!1)`thread_lock
                                            = transfer_msg_state`this)])")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "state_del_dirty")
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))))))
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (replace
                                                       -2
                                                       +
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("2"
                                                        (assert)
                                                        nil))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((clear_dirty_dont_switch const-decl "System_state" fiasco_functions
     nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (TS_ipc_sending_mask const-decl "Thread_state" fiasco_states nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TS_ipc_end_mask const-decl "Thread_state" fiasco_states nil)
    (state_del const-decl "System_state" fiasco_functions nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (wake_receiver const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (transfer_msg const-decl "System_state" fiasco_functions nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   10730 4650 nil nil))
 (do_ipc_receive_part_this_unchanged 0
  (do_ipc_receive_part_this_unchanged-1 nil 3388815022 3388815418
   ("" (skolem!)
    (("" (ground)
      (("" (expand "do_ipc_receive_part") (("" (propax) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil))
   6979 40 t shostak))
 (sys_ipc_this_unchanged 0
  (sys_ipc_this_unchanged-3 nil 3377629566 3388815157
   ("" (skolem!)
    (("" (ground)
      (("" (expand "sys_ipc")
        (("" (expand "do_ipc")
          (("" (lemma "do_ipc_send_part_this_unchanged")
            (("" (lemma "do_ipc_receive_part_this_unchanged")
              ((""
                (inst -2 "partner!1" "have_receive!1" " state_old!1
                                           WITH [(error) := FALSE,
                                                 (timeout) := FALSE,
                                                 (handshake_attempted)
                                                 := FALSE,
                                                 (assertions_held) := TRUE,
                                                 (receiver_initialized)
                                                 := FALSE]")
                ((""
                  (inst -1 "sender!1" "TRUE" "IF have_send!1
                                         THEN do_ipc_send_part
                                              (partner!1,
                                               TRUE,
                                               state_old!1
                                               WITH [(error) := FALSE,
                                                     (timeout) := FALSE,
                                                     (handshake_attempted)
                                                     := FALSE,
                                                     (assertions_held)
                                                     := TRUE,
                                                     (receiver_initialized)
                                                     := FALSE])
                                         ELSE state_old!1
                                              WITH [(error) := FALSE,
                                                    (timeout) := FALSE,
                                                    (handshake_attempted)
                                                    := FALSE,
                                                    (assertions_held)
                                                    := TRUE,
                                                    (receiver_initialized)
                                                    := FALSE]
                                         ENDIF")
                  (("" (assert)
                    (("" (case-replace " have_send!1")
                      (("1" (case-replace "have_receive!1")
                        (("1"
                          (case-replace
                           "do_ipc_send_part(partner!1, TRUE,
                               state_old!1
                                 WITH [(error) := FALSE,
                                       (timeout) := FALSE,
                                       (handshake_attempted) := FALSE,
                                       (assertions_held) := TRUE,
                                       (receiver_initialized)
                                       := FALSE])`error")
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert)
                        (("2" (case-replace "have_receive!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_receive_part_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (do_ipc_send_part_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil))
   120442 450 t nil)
  (sys_ipc_this_unchanged-2 nil 3377629523 3377629556
   ("" (skolem!)
    (("" (ground)
      ((""
        (name-replace "sys_ipc_state"
         "sys_ipc(have_send!1, partner!1, have_receive!1, state_old!1)"
         :hide? nil)
        (("" (expand "sys_ipc")
          (("" (expand "do_ipc")
            (("" (expand "do_ipc_receive_part")
              (("" (lemma "do_ipc_send_part_this_unchanged")
                (("" (case-replace " have_send!1")
                  (("1" (case-replace "have_receive!1")
                    (("1"
                      (case-replace "do_ipc_send_part(partner!1, TRUE,
                                          state_old!1
                                            WITH [(error) := FALSE,
                                                  (timeout) := FALSE,
                                                  (handshake_attempted) := FALSE,
                                                  (assertions_held) := TRUE,
                                                  (receiver_initialized) := FALSE]`error")
                      (("1" (inst?) (("1" (assert) nil)))
                       ("2" (inst?) (("2" (assert) nil)))))
                     ("2" (inst?) (("2" (assert) nil)))))
                   ("2" (assert)
                    (("2" (case-replace "have_receive!1")
                      (("1" (assert) nil)
                       ("2" (assert) nil))))))))))))))))))))
    nil)
   unfinished nil 5105 10 t nil)
  (sys_ipc_this_unchanged-1 nil 3386391860 3377629459
   (";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
    (skolem!)
    ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
      (ground)
      ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
        (name-replace "sys_ipc_state"
         "sys_ipc(have_send!1, partner!1, have_receive!1, state_old!1)"
         :hide? nil)
        ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
          (expand "sys_ipc")
          ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
            (expand "do_ipc")
            ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
              (expand "do_ipc_receive_part")
              ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
                (lemma "do_ipc_send_part_this_unchanged")
                ((";;; Proof sys_ipc_this_unchanged-1 for formula fiasco_lock.sys_ipc_this_unchanged"
                  (case-replace " have_send!1")
                  (("1" (case-replace "have_receive!1")
                    (("1"
                      (case-replace "do_ipc_send_part(partner!1, TRUE,
                                    state_old!1
                                      WITH [(error) := FALSE,
                                            (timeout) := FALSE,
                                            (handshake_attempted) := FALSE,
                                            (assertions_held) := TRUE,
                                            (receiver_initialized) := FALSE,
                                            (last_preemption_action)
                                            := Nothing])`error")
                      (("1" (inst?) (("1" (assert) nil)))
                       ("2" (inst?) (("2" (assert) nil)))))
                     ("2" (inst?) (("2" (assert) nil)))))
                   ("2" (assert)
                    (("2" (case-replace "have_receive!1")
                      (("1" (assert) nil)
                       ("2" (assert) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished
   ((do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (Nothing? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Nothing adt-constructor-decl "(Nothing?)" fiasco_types nil)
    (do_ipc_send_part_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   29471 460 t nil)))

