(fiasco_lock
 (abort_send_lock_free 0
  (abort_send_lock_free-1 nil 3384756838 3377630261
   ("" (skolem!)
    (("" (ground)
      (("" (expand "abort_send")
        (("" (expand "clear_dirty") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (abort_send const-decl "System_state" fiasco_functions nil))
   152 70 t shostak))
 (sender_enqueue_lock_unchanged 0
  (sender_enqueue_lock_unchanged-1 nil 3377455667 3377630261
   ("" (skolem!)
    (("" (ground)
      (("" (expand "sender_enqueue") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil))
   304 150 t shostak))
 (timeout_lock_unchanged 0
  (timeout_lock_unchanged-1 nil 3377638727 3377638754
   ("" (skolem!)
    (("" (ground)
      (("" (expand "timeout")
        (("" (expand "state_change")
          (("" (expand "state_change_dirty")
            (("" (expand "TS_empty")
              (("" (expand "TS_full")
                (("" (assert)
                  (("" (lift-if)
                    (("" (case-replace "partner!1 = state_old!1`this")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((state_change const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil))
   27070 520 t shostak))
 (kill_lock_unchanged 0
  (kill_lock_unchanged-1 nil 3377638717 3377638723
   ("" (skolem!)
    (("" (ground) (("" (expand "kill") (("" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil))
   6481 60 t shostak))
 (ipc_receiver_ready_change_lock_unchanged 0
  (ipc_receiver_ready_change_lock_unchanged-1 nil 3385376043 3377630262
   ("" (skolem!)
    (("" (ground)
      (("" (expand "ipc_receiver_ready_change")
        (("" (expand "ipc_init")
          (("" (expand "set_partner")
            (("" (expand "state_del_dirty")
              ((""
                (name-replace "state_add_dirty_state"
                 "state_add_dirty(partner!1,
                                       TS_empty
                                       WITH [thread_transfer_in_progress
                                             := TRUE],
                                       state_old!1
                                       WITH [(threads)(partner!1)`partner
                                             := state_old!1`this])"
                 :hide? nil)
                (("" (expand "state_add_dirty")
                  (("" (expand "TS_empty")
                    (("" (lift-if)
                      ((""
                        (case-replace "partner!1 = state_old!1`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ipc_init const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil))
   559 420 t shostak))
 (receiver_ready_lock_unchanged 0
  (receiver_ready_lock_unchanged-1 nil 3385375971 3377630266
   ("" (skolem!)
    (("" (ground)
      (("" (expand "receiver_ready")
        ((""
          (name-replace "prepare_receive_dirty_state"
           "prepare_receive_dirty(Receiver_partner_thread,
                                       partner!1,
                                       state_old!1)" :hide? nil)
          (("" (expand "prepare_receive_dirty")
            (("" (expand "set_partner")
              (("" (expand "state_change_dirty")
                (("" (lift-if)
                  (("" (expand "TS_full")
                    (("" (expand "TS_empty")
                      (("" (expand "sender_dequeue_head")
                        ((""
                          (case "prepare_receive_dirty_state`threads(partner!1)`thread_lock =  state_old!1`threads(partner!1)`thread_lock")
                          (("1"
                            (case " ipc_receiver_ready_change(state_old!1`this,
                                                             partner!1,
                                                             prepare_receive_dirty_state
                                                             WITH [(receiver_initialized)
                                                                   := TRUE])`threads
                                       (partner!1)`thread_lock = state_old!1`threads(partner!1)`thread_lock")
                            (("1"
                              (case "state_old!1`threads(partner!1)`thread_lock = ipc_receiver_ready_change(state_old!1`this,
                                                       partner!1,
                                                       state_old!1)`threads
                                 (partner!1)`thread_lock")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "state_old!1`receiver_initialized")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "not  state_old!1`threads(partner!1)`state`thread_receiving")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case
                                         "not state_old!1`threads(partner!1)`state`thread_ipc_in_progress")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case
                                           " state_old!1`threads(partner!1)`state`thread_cancel")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               "state_old!1`this = state_old!1`threads(partner!1)`partner")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "not  in_sender_list(partner!1, state_old!1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "not ipc_receiver_ready(state_old!1`threads(partner!1)`partner,
                              partner!1, state_old!1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "ipc_receiver_ready(state_old!1`this, partner!1, state_old!1)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case-replace
                                       "prepare_receive_dirty_state`threads
                  (partner!1)`state`thread_cancel")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "state_old!1`this =
           prepare_receive_dirty_state`threads(partner!1)`partner")
                                          (("1"
                                            (case
                                             "not in_sender_list(partner!1,
                         prepare_receive_dirty_state
                           WITH [(receiver_initialized) := TRUE])")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case
                                               "not ipc_receiver_ready(prepare_receive_dirty_state`threads
                                  (partner!1)`partner,
                              partner!1,
                              prepare_receive_dirty_state
                                WITH [(receiver_initialized) := TRUE])")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               " ipc_receiver_ready(state_old!1`this, partner!1,
                                 prepare_receive_dirty_state
                                   WITH [(receiver_initialized) := TRUE])")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "ipc_receiver_ready_change")
                                  (("2"
                                    (expand "state_del_dirty")
                                    (("2"
                                      (expand "ipc_init")
                                      (("2"
                                        (name-replace
                                         "state_add_dirty_state"
                                         "state_add_dirty(partner!1,
                                       TS_empty
                                       WITH [thread_transfer_in_progress
                                             := TRUE],
                                       set_partner
                                       (state_old!1`this,
                                        partner!1,
                                        state_old!1))"
                                         :hide?
                                         nil)
                                        (("2"
                                          (expand "set_partner")
                                          (("2"
                                            (expand "state_add_dirty")
                                            (("2"
                                              (expand "TS_empty")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (case-replace
                                                   " partner!1 = state_old!1`this")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -2 1))
                              (("2"
                                (replace -2 * rl :hide? T)
                                (("2"
                                  (lemma
                                   "ipc_receiver_ready_change_lock_unchanged")
                                  (("2"
                                    (inst
                                     -1
                                     "partner!1"
                                     "state_old!1
                                  WITH [(threads)(partner!1)`partner
                                        := Receiver_partner_thread,
                                        (threads)(partner!1)`state
                                        := state_old!1`threads
                                           (partner!1)`state
                                           WITH [thread_ready
                                                 := state_old!1`threads
                                                    (partner!1)`state`thread_ready,
                                                 thread_cancel
                                                 := state_old!1`threads
                                                    (partner!1)`state`thread_cancel,
                                                 thread_dead
                                                 := state_old!1`threads
                                                    (partner!1)`state`thread_dead,
                                                 thread_busy
                                                 := state_old!1`threads
                                                    (partner!1)`state`thread_busy,
                                                 thread_invalid
                                                 := state_old!1`threads
                                                    (partner!1)`state`thread_invalid,
                                                 thread_polling := FALSE,
                                                 thread_receiving := TRUE,
                                                 thread_ipc_in_progress
                                                 := TRUE,
                                                 thread_send_in_progress
                                                 := FALSE,
                                                 thread_transfer_in_progress
                                                 := FALSE]]
                                  WITH [(receiver_initialized)
                                        := TRUE]")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (replace -1 * rl :hide? T)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (ipc_receiver_ready_change_lock_unchanged formula-decl nil
     fiasco_lock nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil))
   3891 2810 t shostak))
 (preemption_point_actions_lock_unchanged 0
  (preemption_point_actions_lock_unchanged-1 nil 3388826477 3388827581
   ("" (induct "actions")
    (("1" (skolem!) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (expand "sys_thread_ex_regs")
            (("3" (lemma "timeout_lock_unchanged")
              (("3" (lemma "kill_lock_unchanged")
                (("3" (lemma "receiver_ready_lock_unchanged")
                  (("3" (inst -1 "partner!1" "state_old!1")
                    (("3" (inst -2 "partner!1" "state_old!1")
                      (("3" (assert)
                        (("3" (replace -1 * rl)
                          (("3" (replace -2 * rl)
                            (("3" (inst -3 "partner!1" "state_old!1")
                              (("3"
                                (replace -3 * rl)
                                (("3"
                                  (assert)
                                  (("3"
                                    (case
                                     "state_old!1`threads
               WITH [(state_old!1`this)`state`thread_cancel := TRUE]
                 (partner!1)`thread_lock = state_old!1`threads(partner!1)`thread_lock")
                                    (("1"
                                      (replace -1 *)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (case-replace
                                         "state_old!1`this = partner!1")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (timeout_lock_unchanged formula-decl nil fiasco_lock nil)
    (receiver_ready_lock_unchanged formula-decl nil fiasco_lock nil)
    (TRUE const-decl "bool" booleans nil)
    (kill_lock_unchanged formula-decl nil fiasco_lock nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   1103306 1210 t shostak))
 (preemption_point_lock_unchanged 0
  (preemption_point_lock_unchanged-4 nil 3377447705 3388827604
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        (("" (lemma "preemption_point_actions_lock_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_lock_unchanged formula-decl nil
     fiasco_lock nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   16573 160 t nil)
  (preemption_point_lock_unchanged-3 nil 3377441407 3377441529
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        ((""
          (case "preemption_action(1 + state_old!1`seed) = Sys_thread_ex_regs")
          (("1" (assert)
            (("1" (expand "sys_thread_ex_regs")
              (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert)
            (("2"
              (case "preemption_action(1 + state_old!1`seed) = Timeout")
              (("1" (assert)
                (("1" (case "have_timeout!1")
                  (("1" (assert)
                    (("1" (expand "timeout")
                      (("1" (expand "state_change")
                        (("1" (expand "state_change_dirty")
                          (("1" (expand "TS_full")
                            (("1" (expand "TS_empty")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2"
                  (case "preemption_action(1 + state_old!1`seed) = Kill")
                  (("1" (assert)
                    (("1" (expand "kill")
                      (("1"
                        (case "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "preemption_action(1 + state_old!1`seed) = Receiver_ready")
                      (("1" (assert)
                        (("1" (expand "receiver_ready")
                          (("1"
                            (case "state_old!1`this = state_old!1`threads(partner!1)`partner")
                            (("1" (assert)
                              (("1"
                                (case
                                 "in_sender_list(partner!1,
                                                           state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "ipc_receiver_ready(state_old!1`this, partner!1,
                                                                   state_old!1
                                                                     WITH [seed := 1 + state_old!1`seed])")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "state_del_dirty")
                                            (("1"
                                              (expand "ipc_init")
                                              (("1"
                                                (expand "set_partner")
                                                (("1"
                                                  (expand
                                                   "state_add_dirty")
                                                  (("1"
                                                    (name-replace
                                                     "state_expanded"
                                                     "state_old!1`threads
                                                                            (partner!1)`state
                                                                            WITH [thread_ready
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_ready
                                                                                     OR
                                                                                     TS_empty`thread_ready,
                                                                                  thread_cancel
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_cancel
                                                                                     OR
                                                                                     TS_empty`thread_cancel,
                                                                                  thread_dead
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_dead
                                                                                     OR
                                                                                     TS_empty`thread_dead,
                                                                                  thread_busy
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_busy
                                                                                     OR
                                                                                     TS_empty`thread_busy,
                                                                                  thread_invalid
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_invalid
                                                                                     OR
                                                                                     TS_empty`thread_invalid,
                                                                                  thread_polling
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_polling
                                                                                     OR
                                                                                     TS_empty`thread_polling,
                                                                                  thread_receiving
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_receiving
                                                                                     OR
                                                                                     TS_empty`thread_receiving,
                                                                                  thread_ipc_in_progress
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_ipc_in_progress
                                                                                     OR
                                                                                     TS_empty`thread_ipc_in_progress,
                                                                                  thread_send_in_progress
                                                                                  := state_old!1`threads
                                                                                     (partner!1)`state`thread_send_in_progress
                                                                                     OR
                                                                                     TS_empty`thread_send_in_progress,
                                                                                  thread_transfer_in_progress
                                                                                  := TRUE]")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "in_sender_list(partner!1,
                                                               state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                  (("1" (propax) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case
                                 "NOT ipc_receiver_ready(state_old!1`this, partner!1,
                                                                   state_old!1
                                                                     WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sender_dequeue_head")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("2"
                                      (expand "ipc_init")
                                      (("2"
                                        (expand "set_partner")
                                        (("2"
                                          (expand "state_del_dirty")
                                          (("2"
                                            (expand "state_add_dirty")
                                            (("2"
                                              (name-replace
                                               "state_with"
                                               "state_old!1`threads
                                                                        (partner!1)`state
                                                                        WITH [thread_ready
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_ready
                                                                                 OR
                                                                                 TS_empty`thread_ready,
                                                                              thread_cancel
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_cancel
                                                                                 OR
                                                                                 TS_empty`thread_cancel,
                                                                              thread_dead
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_dead
                                                                                 OR
                                                                                 TS_empty`thread_dead,
                                                                              thread_busy
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_busy
                                                                                 OR
                                                                                 TS_empty`thread_busy,
                                                                              thread_invalid
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_invalid
                                                                                 OR
                                                                                 TS_empty`thread_invalid,
                                                                              thread_polling
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_polling
                                                                                 OR
                                                                                 TS_empty`thread_polling,
                                                                              thread_receiving
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_receiving
                                                                                 OR
                                                                                 TS_empty`thread_receiving,
                                                                              thread_ipc_in_progress
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_ipc_in_progress
                                                                                 OR
                                                                                 TS_empty`thread_ipc_in_progress,
                                                                              thread_send_in_progress
                                                                              := state_old!1`threads
                                                                                 (partner!1)`state`thread_send_in_progress
                                                                                 OR
                                                                                 TS_empty`thread_send_in_progress,
                                                                              thread_transfer_in_progress
                                                                              := TRUE]")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil))
   119580 7690 nil nil)
  (preemption_point_lock_unchanged-2 nil 3377441060 3377441366
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        ((""
          (case "preemption_action(1 + state_old!1`seed) = Sys_thread_ex_regs")
          (("1" (assert)
            (("1" (expand "sys_thread_ex_regs")
              (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert)
            (("2"
              (case "preemption_action(1 + state_old!1`seed) = Timeout")
              (("1" (assert)
                (("1" (case "have_timeout!1")
                  (("1" (assert)
                    (("1" (expand "timeout")
                      (("1" (expand "state_change")
                        (("1" (expand "state_change_dirty")
                          (("1" (expand "TS_full")
                            (("1" (expand "TS_empty")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2"
                  (case "preemption_action(1 + state_old!1`seed) = Kill")
                  (("1" (assert)
                    (("1" (expand "kill")
                      (("1"
                        (case "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "preemption_action(1 + state_old!1`seed) = Receiver_ready")
                      (("1" (assert)
                        (("1" (expand "receiver_ready")
                          (("1"
                            (case "state_old!1`this = state_old!1`threads(partner!1)`partner")
                            (("1" (assert)
                              (("1"
                                (case
                                 "in_sender_list(partner!1,
                                          state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "ipc_receiver_ready(state_old!1`this, partner!1,
                                                state_old!1
                                                  WITH [seed := 1 + state_old!1`seed])")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "state_del_dirty")
                                            (("1"
                                              (expand "ipc_init")
                                              (("1"
                                                (expand "set_partner")
                                                (("1"
                                                  (expand
                                                   "state_add_dirty")
                                                  (("1"
                                                    (name-replace
                                                     "state_expanded"
                                                     "state_old!1`threads
                                                            (partner!1)`state
                                                            WITH [thread_ready
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_ready
                                                                     OR
                                                                     TS_empty`thread_ready,
                                                                  thread_cancel
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_cancel
                                                                     OR
                                                                     TS_empty`thread_cancel,
                                                                  thread_dead
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_dead
                                                                     OR
                                                                     TS_empty`thread_dead,
                                                                  thread_busy
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_busy
                                                                     OR
                                                                     TS_empty`thread_busy,
                                                                  thread_invalid
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_invalid
                                                                     OR
                                                                     TS_empty`thread_invalid,
                                                                  thread_polling
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_polling
                                                                     OR
                                                                     TS_empty`thread_polling,
                                                                  thread_receiving
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_receiving
                                                                     OR
                                                                     TS_empty`thread_receiving,
                                                                  thread_ipc_in_progress
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_ipc_in_progress
                                                                     OR
                                                                     TS_empty`thread_ipc_in_progress,
                                                                  thread_send_in_progress
                                                                  := state_old!1`threads
                                                                     (partner!1)`state`thread_send_in_progress
                                                                     OR
                                                                     TS_empty`thread_send_in_progress,
                                                                  thread_transfer_in_progress
                                                                  := TRUE]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "in_sender_list(partner!1,
                                            state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                  (("1" (propax) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case
                                 "NOT ipc_receiver_ready(state_old!1`this, partner!1,
                                                  state_old!1
                                                    WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sender_dequeue_head")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("2"
                                      (expand "ipc_init")
                                      (("2"
                                        (expand "set_partner")
                                        (("2"
                                          (expand "state_del_dirty")
                                          (("2"
                                            (expand "state_add_dirty")
                                            (("2"
                                              (name-replace
                                               "state_with"
                                               "state_old!1`threads
                                                          (partner!1)`state
                                                          WITH [thread_ready
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_ready
                                                                   OR
                                                                   TS_empty`thread_ready,
                                                                thread_cancel
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_cancel
                                                                   OR
                                                                   TS_empty`thread_cancel,
                                                                thread_dead
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_dead
                                                                   OR
                                                                   TS_empty`thread_dead,
                                                                thread_busy
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_busy
                                                                   OR
                                                                   TS_empty`thread_busy,
                                                                thread_invalid
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_invalid
                                                                   OR
                                                                   TS_empty`thread_invalid,
                                                                thread_polling
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_polling
                                                                   OR
                                                                   TS_empty`thread_polling,
                                                                thread_receiving
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_receiving
                                                                   OR
                                                                   TS_empty`thread_receiving,
                                                                thread_ipc_in_progress
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_ipc_in_progress
                                                                   OR
                                                                   TS_empty`thread_ipc_in_progress,
                                                                thread_send_in_progress
                                                                := state_old!1`threads
                                                                   (partner!1)`state`thread_send_in_progress
                                                                   OR
                                                                   TS_empty`thread_send_in_progress,
                                                                thread_transfer_in_progress
                                                                := TRUE]")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil))
   61448 7980 t nil)
  (preemption_point_lock_unchanged-1 nil 3384164326 3377440962
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        ((""
          (case "preemption_action(1 + state_old!1`seed) = Sys_thread_ex_regs")
          (("1" (assert)
            (("1" (expand "sys_thread_ex_regs") (("1" (grind) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (case "preemption_action(1 + state_old!1`seed) = Timeout")
              (("1" (assert)
                (("1" (case "have_timeout!1")
                  (("1" (assert)
                    (("1" (expand "timeout")
                      (("1" (expand "state_change")
                        (("1" (expand "state_change_dirty")
                          (("1" (expand "TS_full")
                            (("1" (expand "TS_empty")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2"
                  (case "preemption_action(1 + state_old!1`seed) = Kill")
                  (("1" (assert)
                    (("1" (expand "kill")
                      (("1"
                        (case "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "preemption_action(1 + state_old!1`seed) = Receiver_ready")
                      (("1" (assert)
                        (("1" (expand "receiver_ready")
                          (("1"
                            (case "state_old!1`this = state_old!1`threads(partner!1)`partner")
                            (("1" (assert)
                              (("1"
                                (case
                                 "in_sender_list(partner!1,
                         state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "ipc_receiver_ready(state_old!1`this, partner!1,
                             state_old!1
                               WITH [seed := 1 + state_old!1`seed])")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "state_del_dirty")
                                            (("1"
                                              (expand "ipc_init")
                                              (("1"
                                                (expand "set_partner")
                                                (("1"
                                                  (expand
                                                   "state_add_dirty")
                                                  (("1"
                                                    (name-replace
                                                     "state_expanded"
                                                     "state_old!1`threads
                                            (partner!1)`state
                                            WITH [thread_ready
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_ready
                                                     OR
                                                     TS_empty`thread_ready,
                                                  thread_cancel
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_cancel
                                                     OR
                                                     TS_empty`thread_cancel,
                                                  thread_dead
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_dead
                                                     OR
                                                     TS_empty`thread_dead,
                                                  thread_busy
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_busy
                                                     OR
                                                     TS_empty`thread_busy,
                                                  thread_invalid
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_invalid
                                                     OR
                                                     TS_empty`thread_invalid,
                                                  thread_polling
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_polling
                                                     OR
                                                     TS_empty`thread_polling,
                                                  thread_receiving
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_receiving
                                                     OR
                                                     TS_empty`thread_receiving,
                                                  thread_ipc_in_progress
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_ipc_in_progress
                                                     OR
                                                     TS_empty`thread_ipc_in_progress,
                                                  thread_send_in_progress
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_send_in_progress
                                                     OR
                                                     TS_empty`thread_send_in_progress,
                                                  thread_transfer_in_progress
                                                  := TRUE]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "in_sender_list(partner!1,
                         state_old!1 WITH [seed := 1 + state_old!1`seed])")
                                  (("1" (propax) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case
                                 "NOT ipc_receiver_ready(state_old!1`this, partner!1,
                                 state_old!1
                                   WITH [seed := 1 + state_old!1`seed])")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sender_dequeue_head")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand
                                     "ipc_receiver_ready_change")
                                    (("2"
                                      (expand "ipc_init")
                                      (("2"
                                        (expand "set_partner")
                                        (("2"
                                          (expand "state_del_dirty")
                                          (("2"
                                            (expand "state_add_dirty")
                                            (("2"
                                              (name-replace
                                               "state_with"
                                               "state_old!1`threads
                                            (partner!1)`state
                                            WITH [thread_ready
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_ready
                                                     OR
                                                     TS_empty`thread_ready,
                                                  thread_cancel
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_cancel
                                                     OR
                                                     TS_empty`thread_cancel,
                                                  thread_dead
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_dead
                                                     OR
                                                     TS_empty`thread_dead,
                                                  thread_busy
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_busy
                                                     OR
                                                     TS_empty`thread_busy,
                                                  thread_invalid
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_invalid
                                                     OR
                                                     TS_empty`thread_invalid,
                                                  thread_polling
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_polling
                                                     OR
                                                     TS_empty`thread_polling,
                                                  thread_receiving
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_receiving
                                                     OR
                                                     TS_empty`thread_receiving,
                                                  thread_ipc_in_progress
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_ipc_in_progress
                                                     OR
                                                     TS_empty`thread_ipc_in_progress,
                                                  thread_send_in_progress
                                                  := state_old!1`threads
                                                     (partner!1)`state`thread_send_in_progress
                                                     OR
                                                     TS_empty`thread_send_in_progress,
                                                  thread_transfer_in_progress
                                                  := TRUE]")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   22074 6600 t shostak))
 (do_send_wait_finish_no_error_lock_free_or_held 0
  (do_send_wait_finish_no_error_lock_free_or_held-1 nil 3384578781
   3377630276
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state"
             "preemption_point(partner!1,
                                                  FALSE,
                                                  sender_dequeue
                                                  (partner!1,
                                                   preemption_point
                                                   (partner!1,
                                                    FALSE,
                                                    IF state_old!1`timeout
                                                    THEN state_add_dirty
                                                         (state_old!1`this,
                                                          TS_empty
                                                          WITH [thread_ipc_in_progress
                                                                := TRUE],
                                                          state_old!1)
                                                    ELSE state_old!1
                                                    ENDIF)))" :hide?
             nil)
            ((""
              (case "state_del_dirty(preemption_point_state`this,
                         TS_empty WITH [thread_polling := TRUE],
                         preemption_point_state)`threads
             (state_del_dirty(preemption_point_state`this,
                              TS_empty WITH [thread_polling := TRUE],
                              preemption_point_state)`this)`state`thread_cancel")
              (("1" (rewrite -1)
                (("1"
                  (case " NOT in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))")
                  (("1" (rewrite 1)
                    (("1" (lemma "abort_send_lock_free")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite -1)
                    (("2" (lemma "abort_send_lock_free")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite 1)
                (("2"
                  (case "NOT in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))
          OR
          state_del_dirty(preemption_point_state`this,
                          TS_empty WITH [thread_polling := TRUE],
                          preemption_point_state)`threads
              (partner!1)`state`thread_dead")
                  (("1" (rewrite -1)
                    (("1" (ground)
                      (("1" (lemma "abort_send_lock_free")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "abort_send_lock_free")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "abort_send_lock_free")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite 1)
                    (("2" (expand "state_del_dirty")
                      (("2" (expand "TS_empty")
                        (("2" (lemma "preemption_point_lock_unchanged")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (case "state_old!1`timeout")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sender_dequeue")
                                    (("1"
                                      (lemma
                                       "preemption_point_lock_unchanged")
                                      (("1"
                                        (inst
                                         -1
                                         "partner!1"
                                         "FALSE"
                                         "preemption_point(partner!1,
                                        FALSE,
                                        state_add_dirty
                                        (state_old!1`this,
                                         TS
                                         WITH [thread_ready := FALSE,
                                               thread_cancel := FALSE,
                                               thread_dead := FALSE,
                                               thread_busy := FALSE,
                                               thread_invalid := FALSE,
                                               thread_polling := FALSE,
                                               thread_receiving := FALSE,
                                               thread_ipc_in_progress
                                               := TRUE,
                                               thread_send_in_progress
                                               := FALSE,
                                               thread_transfer_in_progress
                                               := FALSE],
                                         state_old!1))
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                        (("1"
                                          (expand "state_add_dirty")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "preemption_point_state`this = state_old!1`this")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (case
                                                   "partner!1 = preemption_point_state`this")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "preemption_point_this_unchanged")
                                                (("2"
                                                  (lemma
                                                   "preemption_point_this_unchanged")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "partner!1"
                                                       "FALSE"
                                                       "preemption_point(partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [(threads)
                                              (state_old!1`this)
                                              `state
                                              := state_old!1`threads
                                                 (state_old!1`this)`state
                                                 WITH [thread_ready
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_ready,
                                                       thread_cancel
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_cancel,
                                                       thread_dead
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_dead,
                                                       thread_busy
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_busy,
                                                       thread_invalid
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_invalid,
                                                       thread_polling
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_polling,
                                                       thread_receiving
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_receiving,
                                                       thread_ipc_in_progress
                                                       := TRUE,
                                                       thread_send_in_progress
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_send_in_progress,
                                                       thread_transfer_in_progress
                                                       := state_old!1`threads
                                                          (state_old!1`this)`state`thread_transfer_in_progress]])
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "sender_dequeue")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "preemption_point_lock_unchanged")
                                      (("2"
                                        (inst
                                         -1
                                         "partner!1"
                                         "FALSE"
                                         "preemption_point(partner!1, FALSE, state_old!1)
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "preemption_point_state`this =  state_old!1`this")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case
                                                 "partner!1 = preemption_point_state`this")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "preemption_point_this_unchanged")
                                              (("2"
                                                (lemma
                                                 "preemption_point_this_unchanged")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "partner!1"
                                                     "FALSE"
                                                     "preemption_point(partner!1, FALSE, state_old!1)
                          WITH [(threads)(partner!1)`sender_list
                                  := Dequeued]")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (preemption_point_lock_unchanged formula-decl nil fiasco_lock nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (TS const-decl "Thread_state" fiasco_types nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   8688 6200 t shostak))
 (do_send_wait_loop_no_error_lock_free_or_held 0
  (do_send_wait_loop_no_error_lock_free_or_held-1 nil 3384581195
   3377630281
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_loop")
          ((""
            (name-replace "lock_dirty_state" "lock_dirty
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           TRUE,
                                           clear_dirty
                                           (partner!1,
                                            state_old!1)))" :hide? nil)
            ((""
              (case "lock_dirty_state`threads
             (lock_dirty_state`this)`state`thread_cancel")
              (("1" (assert)
                (("1"
                  (lemma
                   "do_send_wait_finish_no_error_lock_free_or_held")
                  (("1" (inst -1 "partner!1" "lock_dirty_state")
                    (("1" (expand "clear_dirty")
                      (("1" (expand "lock_dirty")
                        (("1"
                          (lemma "preemption_point_error_unchanged")
                          (("1" (inst?)
                            (("1" (assert) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2"
                  (case "lock_dirty_state`threads
             (lock_dirty_state`this)`state`thread_transfer_in_progress")
                  (("1" (assert)
                    (("1"
                      (lemma
                       "do_send_wait_finish_no_error_lock_free_or_held")
                      (("1" (inst -1 "partner!1" "lock_dirty_state")
                        (("1"
                          (lemma "preemption_point_error_unchanged")
                          (("1" (expand "lock_dirty")
                            (("1" (expand "clear_dirty")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case " lock_dirty_state`timeout")
                      (("1" (assert)
                        (("1" (expand "abort_send")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case "lock_dirty_state`threads(partner!1)`state`thread_dead")
                          (("1" (assert)
                            (("1" (expand "abort_send")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "do_send_wait_finish_no_error_lock_free_or_held")
                              (("2"
                                (lemma
                                 "preemption_point_error_unchanged")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "lock_dirty")
                                    (("2"
                                      (expand "clear_dirty")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "state_add_dirty")
                                            (("2"
                                              (expand "TS_empty")
                                              (("2"
                                                (name-replace
                                                 "lock_dirty_state_with"
                                                 "lock_dirty_state`threads
                                        (lock_dirty_state`this)`state
                                        WITH [thread_ready
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_ready,
                                              thread_cancel := FALSE,
                                              thread_dead
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_dead,
                                              thread_busy
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_busy,
                                              thread_invalid
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_invalid,
                                              thread_polling := TRUE,
                                              thread_receiving
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_receiving,
                                              thread_ipc_in_progress
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_ipc_in_progress,
                                              thread_send_in_progress
                                              := lock_dirty_state`threads
                                                 (lock_dirty_state`this)`state`thread_send_in_progress,
                                              thread_transfer_in_progress
                                              := FALSE]"
                                                 :hide?
                                                 nil)
                                                (("2"
                                                  (lemma
                                                   "preemption_point_lock_unchanged")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (case
                                                               " partner!1 = lock_dirty_state`this")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_loop const-decl "System_state" fiasco_functions nil)
    (do_send_wait_finish_no_error_lock_free_or_held formula-decl nil
     fiasco_lock nil)
    (preemption_point_error_unchanged formula-decl nil fiasco_helpers
     nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (abort_send const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (preemption_point_lock_unchanged formula-decl nil fiasco_lock nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   4937 3210 t shostak))
 (do_send_wait_no_error_lock_free_or_held 0
  (do_send_wait_no_error_lock_free_or_held-1 nil 3384576912 3377630284
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "do_send_wait_this_unchanged")
          (("" (inst?)
            (("" (assert)
              (("" (replace -1 * rl)
                ((""
                  (name-replace "do_send_wait_state"
                   "do_send_wait(partner!1, state_old!1)`threads(partner!1)"
                   :hide? nil)
                  (("" (expand "do_send_wait")
                    ((""
                      (name-replace "state_add_dirty_state"
                       "state_add_dirty
                                                      (state_old!1`this,
                                                       TS_empty
                                                       WITH [thread_polling
                                                             := TRUE,
                                                             thread_send_in_progress
                                                             := TRUE,
                                                             thread_ipc_in_progress
                                                             := TRUE],
                                                       state_old!1
                                                       WITH [(assertions_held)
                                                             := state_old!1`assertions_held
                                                                AND
                                                                (state_old!1`threads
                                                                 (partner!1)`thread_lock
                                                                 =
                                                                 Zero_thread
                                                                 OR
                                                                 state_old!1`threads
                                                                 (partner!1)`thread_lock
                                                                 =
                                                                 state_old!1`this)])"
                       :hide? nil)
                      (("" (expand "lock_dirty")
                        ((""
                          (name-replace "preemption_point_state"
                           "preemption_point                                                    (partner!1,
                                                     FALSE,
                                                     state_add_dirty_state
                                                     WITH [(threads)
                                                           (partner!1)
                                                           `thread_lock
                                                           := state_add_dirty_state`this])"
                           :hide? nil)
                          ((""
                            (name-replace "preemption_point_state2"
                             "preemption_point(partner!1,
                                    TRUE,
                                    sender_enqueue
                                    (partner!1,
                                     preemption_point_state))" :hide?
                             nil)
                            ((""
                              (case-replace
                               "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_cancel")
                              ((""
                                (rewrite 1)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "TS_empty")
                                    ((""
                                      (lemma
                                       "preemption_point_lock_unchanged")
                                      ((""
                                        (lemma
                                         "preemption_point_lock_unchanged")
                                        ((""
                                          (lemma
                                           "sender_enqueue_lock_unchanged")
                                          ((""
                                            (inst
                                             -1
                                             "partner!1"
                                             "preemption_point_state")
                                            ((""
                                              (inst?)
                                              ((""
                                                (inst
                                                 -3
                                                 "partner!1"
                                                 "FALSE"
                                                 "state_add_dirty_state
                         WITH [(threads)(partner!1)`thread_lock
                                 := state_add_dirty_state`this]")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (case
                                                     "state_add_dirty_state`this = state_old!1`this")
                                                    (("1"
                                                      (replace -1 *)
                                                      (("1"
                                                        (replace -6 *)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           *
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             *
                                                             rl)
                                                            (("1"
                                                              (case-replace
                                                               "sender_ok(preemption_point_state`this, partner!1,
                   preemption_point_state)")
                                                              (("1"
                                                                (replace
                                                                 -9
                                                                 +
                                                                 rl
                                                                 :hide?
                                                                 T)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 1)
                                                                (("2"
                                                                  (case-replace
                                                                   "preemption_point_state2`timeout")
                                                                  (("1"
                                                                    (lemma
                                                                     "abort_send_lock_free")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "partner!1"
                                                                       "preemption_point_state2")
                                                                      (("1"
                                                                        (replace
                                                                         -10
                                                                         +
                                                                         rl
                                                                         :hide?
                                                                         T)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "do_send_wait_loop_no_error_lock_free_or_held")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "partner!1"
                                                                         "preemption_point_state2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "preemption_point_this_unchanged")
                                                                            (("2"
                                                                              (lemma
                                                                               "preemption_point_this_unchanged")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "partner!1"
                                                                                   "FALSE"
                                                                                   "state_add_dirty_state
                         WITH [(threads)(partner!1)`thread_lock
                                 := state_old!1`this]")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sender_enqueue_this_unchanged")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -5
                                                                                           *)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -10
                                                                                             *)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -9
                                                                                               *)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   *
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "preemption_point_error_unchanged")
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "preemption_point_error_unchanged")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sender_enqueue_error_unchanged")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "partner!1"
                                                                                                           "preemption_point_state")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "partner!1"
                                                                                                             "TRUE"
                                                                                                             "sender_enqueue(partner!1, preemption_point_state)")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "partner!1"
                                                                                                               "FALSE"
                                                                                                               "state_add_dirty_state
                         WITH [(threads)(partner!1)`thread_lock
                                 := state_old!1`this]")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "do_send_wait_loop_no_error_lock_free_or_held")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "partner!1"
                                                                                                                     "preemption_point_state2")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (beta)
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (1
                                                                                                                            -15
                                                                                                                            -4))
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             *
                                                                                                                             rl
                                                                                                                             :hide?
                                                                                                                             T)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -6))
                                                      (("2"
                                                        (replace
                                                         -1
                                                         *
                                                         rl
                                                         :hide?
                                                         T)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_this_unchanged formula-decl nil fiasco_helpers nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Thread type-eq-decl nil fiasco_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (do_send_wait const-decl "System_state" fiasco_functions nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (preemption_point_lock_unchanged formula-decl nil fiasco_lock nil)
    (sender_enqueue_lock_unchanged formula-decl nil fiasco_lock nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (do_send_wait_loop_no_error_lock_free_or_held formula-decl nil
     fiasco_lock nil)
    (sender_enqueue_error_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_error_unchanged formula-decl nil fiasco_helpers
     nil)
    (sender_enqueue_this_unchanged formula-decl nil fiasco_helpers nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   3297 1900 t shostak))
 (try_handshake_receiver_no_error_lock_free_or_held 0
  (try_handshake_receiver_no_error_lock_free_or_held-1 nil 3384576556
   3377630287
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "try_handshake_receiver")
          ((""
            (name-replace "lock_dirty_state" "lock_dirty
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           state_old!1
                                           WITH [handshake_attempted
                                                 := TRUE]))" :hide?
             nil)
            (("" (case " partner!1 = Zero_thread")
              (("1" (assert) nil nil)
               ("2"
                (case "state_old!1`threads(partner!1)`state`thread_invalid ")
                (("1" (assert) nil nil)
                 ("2" (case "partner!1 = Nil_thread")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2"
                      (case "NOT state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                      (("1" (assert)
                        (("1"
                          (case "lock_dirty_state`threads
              (lock_dirty_state`this)`state`thread_cancel")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2"
                              (case " sender_ok(lock_dirty_state`this, partner!1, lock_dirty_state)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "lock_dirty")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "do_send_wait_no_error_lock_free_or_held")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "lock_dirty")
                                        (("2"
                                          (lemma
                                           "preemption_point_error_unchanged")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "lock_dirty_state")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case " state_old!1`threads(state_old!1`this)`state`thread_cancel")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2"
                              (case "sender_ok(state_old!1`this, partner!1,
                       state_old!1 WITH [handshake_attempted := TRUE])")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "do_send_wait_no_error_lock_free_or_held")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (do_send_wait_no_error_lock_free_or_held formula-decl nil
     fiasco_lock nil)
    (preemption_point_error_unchanged formula-decl nil fiasco_helpers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   2238 1450 t shostak))
 (do_send_wait_finish_error_lock_free 0
  (do_send_wait_finish_error_lock_free-2 nil 3390018613 3390018864
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state"
             "preemption_point(partner!1,
                                                   FALSE,
                                                   sender_dequeue
                                                   (partner!1,
                                                    preemption_point
                                                    (partner!1,
                                                     FALSE,
                                                     IF state_old!1`timeout
                                                     THEN state_add_dirty
                                                          (state_old!1`this,
                                                           TS_empty
                                                           WITH [thread_ipc_in_progress
                                                                 := TRUE],
                                                           state_old!1)
                                                     ELSE state_old!1
                                                     ENDIF)))" :hide?
             nil)
            (("" (lemma "abort_send_lock_free")
              ((""
                (case-replace
                 "state_del_dirty(preemption_point_state`this,
                         TS_empty WITH [thread_polling := TRUE],
                         preemption_point_state)`threads
             (state_del_dirty(preemption_point_state`this,
                              TS_empty WITH [thread_polling := TRUE],
                              preemption_point_state)`this)`state`thread_cancel")
                (("1"
                  (case-replace
                   "in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (rewrite 1)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (rewrite 1)
                  (("2"
                    (case-replace
                     "in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))")
                    (("1"
                      (case-replace
                       "state_del_dirty(preemption_point_state`this,
                         TS_empty WITH [thread_polling := TRUE],
                         preemption_point_state)`threads
             (partner!1)`state`thread_dead")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)
                       ("2" (rewrite 1) nil nil))
                      nil)
                     ("2" (rewrite 1)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (do_send_wait_finish const-decl "System_state" fiasco_functions
     nil))
   249469 2370 nil nil)
  (do_send_wait_finish_error_lock_free-1 nil 3384163099 3377630288
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state"
             "preemption_point(partner!1,
                                                 FALSE,
                                                 sender_dequeue
                                                 (partner!1,
                                                  preemption_point
                                                  (partner!1,
                                                   FALSE,
                                                   IF state_old!1`timeout
                                                   THEN state_add_dirty
                                                        (state_old!1`this,
                                                         TS_empty
                                                         WITH [thread_ipc_in_progress
                                                               := TRUE],
                                                         state_old!1)
                                                   ELSE state_old!1
                                                   ENDIF)))" :hide?
             nil)
            ((""
              (case "state_del_dirty(preemption_point_state`this,
                         TS_empty WITH [thread_polling := TRUE],
                         preemption_point_state)`threads
             (state_del_dirty(preemption_point_state`this,
                              TS_empty WITH [thread_polling := TRUE],
                              preemption_point_state)`this)`state`thread_cancel")
              (("1" (rewrite -1)
                (("1"
                  (case "NOT in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))")
                  (("1" (rewrite 1)
                    (("1" (lemma "abort_send_lock_free")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite -1)
                    (("2" (lemma "abort_send_lock_free")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite 1)
                (("2"
                  (case " NOT in_ipc(state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state)`this,
                    partner!1,
                    state_del_dirty(preemption_point_state`this,
                                    TS_empty WITH [thread_polling := TRUE],
                                    preemption_point_state))
          OR
          state_del_dirty(preemption_point_state`this,
                          TS_empty WITH [thread_polling := TRUE],
                          preemption_point_state)`threads
              (partner!1)`state`thread_dead")
                  (("1" (ground)
                    (("1" (lemma "abort_send_lock_free")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (lemma "abort_send_lock_free")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (lemma "abort_send_lock_free")
                      (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
                     ("4" (lemma "abort_send_lock_free")
                      (("4" (inst?) (("4" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1268 840 t shostak))
 (do_send_wait_loop_error_lock_free 0
  (do_send_wait_loop_error_lock_free-1 nil 3384163291 3377630295
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_loop")
          ((""
            (name-replace "lock_dirty_state" "lock_dirty
                                                     (partner!1,
                                                      preemption_point
                                                      (partner!1,
                                                       TRUE,
                                                       clear_dirty
                                                       (partner!1,
                                                        state_old!1)))"
             :hide? nil)
            ((""
              (case "lock_dirty_state`threads
             (lock_dirty_state`this)`state`thread_cancel OR lock_dirty_state`threads
              (lock_dirty_state`this)`state`thread_transfer_in_progress")
              (("1" (rewrite -1)
                (("1" (lemma "do_send_wait_finish_error_lock_free")
                  (("1" (inst?)
                    (("1" (assert) (("1" (rewrite -3) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma " do_send_wait_finish_error_lock_free")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (rewrite 1)
                (("2" (case "lock_dirty_state`timeout")
                  (("1" (rewrite -1)
                    (("1" (lemma "abort_send_lock_free")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite 1)
                    (("2"
                      (case "lock_dirty_state`threads(partner!1)`state`thread_dead")
                      (("1" (rewrite -1)
                        (("1" (lemma "abort_send_lock_free")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (rewrite 1)
                        (("2"
                          (lemma "do_send_wait_finish_error_lock_free")
                          (("2" (inst?)
                            (("2" (assert) (("2" (rewrite -3) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_loop const-decl "System_state" fiasco_functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (do_send_wait_finish_error_lock_free formula-decl nil fiasco_lock
     nil)
    (do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   7147 1030 t shostak))
 (do_send_wait_error_lock_free 0
  (do_send_wait_error_lock_free-1 nil 3384163481 3377630297
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait")
          ((""
            (name-replace "preemption_point_state" "preemption_point
                                         (partner!1,
                                          FALSE,
                                          lock_dirty
                                          (partner!1,
                                           state_add_dirty
                                           (state_old!1`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE,
                                                  thread_send_in_progress
                                                  := TRUE,
                                                  thread_ipc_in_progress
                                                  := TRUE],
                                            state_old!1
                                            WITH [(assertions_held)
                                                  := state_old!1`assertions_held
                                                     AND
                                                     (state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      Zero_thread
                                                      OR
                                                      state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      state_old!1`this)])))"
             :hide? nil)
            ((""
              (case "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_cancel")
              (("1" (rewrite -1)
                (("1" (expand "clear_dirty")
                  (("1" (expand "state_del_dirty")
                    (("1" (lift-if)
                      (("1"
                        (case "partner!1 = preemption_point_state`this")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite 1)
                (("2"
                  (case "sender_ok(preemption_point_state`this, partner!1,
                   preemption_point_state)")
                  (("1" (rewrite -1) nil nil)
                   ("2" (rewrite 1)
                    (("2"
                      (case "preemption_point(partner!1, TRUE,
                          sender_enqueue(partner!1,
                                         preemption_point_state))`timeout")
                      (("1" (rewrite -1)
                        (("1" (lemma "abort_send_lock_free")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (rewrite 1)
                        (("2"
                          (lemma "do_send_wait_loop_error_lock_free")
                          (("2" (inst?)
                            (("2" (assert) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (abort_send_lock_free formula-decl nil fiasco_lock nil)
    (do_send_wait_loop_error_lock_free formula-decl nil fiasco_lock
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1550 960 t shostak))
 (try_handshake_receiver_handshake_error_lock_free 0
  (try_handshake_receiver_handshake_error_lock_free-1 nil 3384162896
   3377630299
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "try_handshake_receiver")
          ((""
            (name-replace "lock_dirty_state" "lock_dirty(partner!1,
                                       preemption_point
                                       (partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [handshake_attempted
                                              := TRUE]))" :hide? nil)
            (("" (case "partner!1 = Zero_thread")
              (("1" (assert) nil nil)
               ("2"
                (case "state_old!1`threads(partner!1)`state`thread_invalid")
                (("1" (assert) nil nil)
                 ("2" (case "partner!1 = Nil_thread")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2"
                      (case "state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                      (("1" (assert)
                        (("1"
                          (case "state_old!1`threads(state_old!1`this)`state`thread_cancel")
                          (("1" (assert)
                            (("1" (expand "clear_dirty" +)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "sender_ok(state_old!1`this, partner!1,
                       state_old!1 WITH [handshake_attempted := TRUE])")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "do_send_wait_error_lock_free")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case "lock_dirty_state`threads
             (lock_dirty_state`this)`state`thread_cancel")
                          (("1" (assert)
                            (("1" (expand "clear_dirty" +)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case " sender_ok(lock_dirty_state`this, partner!1, lock_dirty_state)")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "do_send_wait_error_lock_free")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (do_send_wait_error_lock_free formula-decl nil fiasco_lock nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1768 1110 t shostak))
 (do_ipc_send_part_handshake_attempted_lock_free 0
  (do_ipc_send_part_handshake_attempted_lock_free-1 nil 3384148147
   3377630306
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_ipc_send_part")
          ((""
            (name-replace "transfer_msg_state" "transfer_msg
                                                                (partner!1,
                                                                 ipc_init
                                                                 (try_handshake_receiver
                                                                  (partner!1,
                                                                   state_old!1)`this,
                                                                  partner!1,
                                                                  try_handshake_receiver
                                                                  (partner!1,
                                                                   state_old!1)
                                                                  WITH [(assertions_held)
                                                                        := try_handshake_receiver
                                                                           (partner!1,
                                                                            state_old!1)`assertions_held
                                                                           AND
                                                                           NOT
                                                                           try_handshake_receiver
                                                                           (partner!1,
                                                                            state_old!1)`threads
                                                                           (try_handshake_receiver
                                                                            (partner!1,
                                                                             state_old!1)`this)`state`thread_polling]))"
             :hide? nil)
            ((""
              (case "try_handshake_receiver(partner!1, state_old!1)`error")
              (("1" (assert)
                (("1"
                  (lemma
                   "try_handshake_receiver_handshake_error_lock_free")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (case "transfer_msg_state`error")
                (("1" (rewrite 1)
                  (("1" (expand "clear_dirty_dont_switch")
                    (("1" (expand "clear_dirty")
                      (("1"
                        (name-replace "wake_receiver_state"
                         "wake_receiver(partner!1,
                                            transfer_msg_state
                                            WITH [(assertions_held)
                                                  := transfer_msg_state`assertions_held
                                                     AND
                                                     (transfer_msg_state`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      Zero_thread
                                                      OR
                                                      transfer_msg_state`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      transfer_msg_state`this)])"
                         :hide? nil)
                        (("1" (rewrite -2)
                          (("1"
                            (case "in_ipc(transfer_msg_state`this, partner!1,
                          transfer_msg_state
                            WITH [(assertions_held)
                                    := transfer_msg_state`assertions_held
                                       AND
                                       (transfer_msg_state`threads
                                        (partner!1)`thread_lock
                                        =
                                        Zero_thread
                                        OR
                                        transfer_msg_state`threads
                                        (partner!1)`thread_lock
                                        =
                                        transfer_msg_state`this)])")
                            (("1" (rewrite -1)
                              (("1"
                                (expand "state_del")
                                (("1"
                                  (expand "state_del_dirty")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (case
                                       "partner!1 = wake_receiver_state`this")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite 1)
                              (("2"
                                (expand "state_del")
                                (("2"
                                  (expand "state_del_dirty")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (case
                                       " partner!1 = transfer_msg_state`this")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "NOT have_receive!1")
                    (("1" (assert)
                      (("1"
                        (name-replace "wake_receiver_state"
                         "wake_receiver(partner!1,
                                                 transfer_msg_state
                                                 WITH [(assertions_held)
                                                       := transfer_msg_state`assertions_held
                                                          AND
                                                          (transfer_msg_state`threads
                                                           (partner!1)`thread_lock
                                                           =
                                                           Zero_thread
                                                           OR
                                                           transfer_msg_state`threads
                                                           (partner!1)`thread_lock
                                                           =
                                                           transfer_msg_state`this)])"
                         :hide? nil)
                        (("1"
                          (case "in_ipc(transfer_msg_state`this,
                                      partner!1,
                                      transfer_msg_state
                                      WITH [(assertions_held)
                                            := transfer_msg_state`assertions_held
                                               AND
                                               (transfer_msg_state`threads
                                                (partner!1)`thread_lock
                                                =
                                                Zero_thread
                                                OR
                                                transfer_msg_state`threads
                                                (partner!1)`thread_lock
                                                =
                                                transfer_msg_state`this)])")
                          (("1" (rewrite -1)
                            (("1" (expand "clear_dirty")
                              (("1"
                                (expand "state_del")
                                (("1"
                                  (expand "state_del_dirty")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (case
                                       "partner!1 = wake_receiver_state`this")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite 1)
                            (("2" (expand "clear_dirty")
                              (("2"
                                (expand "state_del")
                                (("2"
                                  (expand "state_del_dirty")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (case
                                       " partner!1 = transfer_msg_state`this")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "clear_dirty_dont_switch")
                        (("2"
                          (case "in_ipc(transfer_msg_state`this, partner!1,
                    transfer_msg_state
                      WITH [(assertions_held)
                              := transfer_msg_state`assertions_held AND
                                  (transfer_msg_state`threads
                                       (partner!1)`thread_lock
                                    = Zero_thread
                                    OR
                                    transfer_msg_state`threads
                                    (partner!1)`thread_lock
                                    =
                                    transfer_msg_state`this),
                            (threads)(partner!1)`thread_lock
                              := Zero_thread])")
                          (("1" (rewrite -1)
                            (("1" (expand "wake_receiver")
                              (("1"
                                (expand "state_change_dirty")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite 1)
                            (("2" (expand "state_del")
                              (("2"
                                (expand "state_del_dirty")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (case
                                     "partner!1 = transfer_msg_state`this")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver_handshake_error_lock_free formula-decl nil
     fiasco_lock nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (state_del const-decl "System_state" fiasco_functions nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (wake_receiver const-decl "System_state" fiasco_functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (clear_dirty_dont_switch const-decl "System_state" fiasco_functions
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (transfer_msg const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   7108 4840 t shostak))
 (handshake_attempted_lock_free 0
  (handshake_attempted_lock_free-1 nil 3377359346 3377630307
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "sys_ipc")
          (("" (case "not have_send!1")
            (("1" (case "not have_receive!1")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (expand "do_ipc")
                  (("2" (expand "do_ipc_receive_part")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "not have_receive!1")
                (("1" (expand "do_ipc")
                  (("1" (assert)
                    (("1"
                      (lemma
                       "do_ipc_send_part_handshake_attempted_lock_free")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "do_ipc")
                  (("2" (assert)
                    (("2" (expand "do_ipc_receive_part")
                      (("2"
                        (lemma
                         "do_ipc_send_part_handshake_attempted_lock_free")
                        (("2" (inst?)
                          (("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sys_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_send_part_handshake_attempted_lock_free formula-decl nil
     fiasco_lock nil)
    (TRUE const-decl "bool" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   1170 500 t shostak)))

