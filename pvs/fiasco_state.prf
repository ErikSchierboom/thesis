(fiasco_state
 (sender_enqueue_ipc_in_progress_unchanged 0
  (sender_enqueue_ipc_in_progress_unchanged-1 nil 3377545082 3377646106
   ("" (skolem!)
    (("" (ground)
      (("" (expand "sender_enqueue")
        (("" (lift-if)
          (("" (case-replace "state_old!1`this = receiver!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil))
   452 300 t nil))
 (kill_ipc_in_progress_unchanged 0
  (kill_ipc_in_progress_unchanged-1 nil 3377644330 3377646106
   ("" (skolem!)
    (("" (ground)
      (("" (expand "kill")
        (("" (assert)
          ((""
            (case-replace
             "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
            (("" (assert)
              ((""
                (case-replace
                 "state_old!1`threads(partner!1)`state`thread_invalid")
                (("" (assert)
                  (("" (case-replace "state_old!1`this = partner!1")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (kill const-decl "System_state" fiasco_functions nil))
   259 150 t shostak))
 (receiver_ready_ipc_in_progress_unchanged 0
  (receiver_ready_ipc_in_progress_unchanged-1 nil 3377545468 3377646123
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "receiver_ready_this_unchanged")
          (("" (inst?)
            (("" (assert)
              (("" (replace -1 * rl)
                ((""
                  (name-replace "receiver_ready_state"
                   "receiver_ready(state_old!1`this, receiver!1, state_old!1)"
                   :hide? nil)
                  (("" (expand "receiver_ready")
                    (("" (expand "sender_dequeue_head")
                      ((""
                        (name-replace "prepare_receive_dirty_state"
                         "prepare_receive_dirty(Receiver_partner_thread, receiver!1, state_old!1)"
                         :hide? nil)
                        ((""
                          (name-replace
                           "ipc_receiver_ready_change_state"
                           "ipc_receiver_ready_change(state_old!1`this, receiver!1,
                                                 IF NOT state_old!1`receiver_initialized
                                                   THEN prepare_receive_dirty_state WITH [(receiver_initialized) := TRUE]
                                                 ELSE state_old!1
                                                 ENDIF)" :hide? nil)
                          ((""
                            (name-replace "ipc_receiver_ready_bool"
                             "ipc_receiver_ready(state_old!1`this, receiver!1,
                                           IF NOT state_old!1`receiver_initialized THEN prepare_receive_dirty_state WITH [(receiver_initialized) := TRUE]
                                           ELSE state_old!1
                                           ENDIF)" :hide? nil)
                            (("" (expand "ipc_receiver_ready_change")
                              ((""
                                (expand "prepare_receive_dirty")
                                ((""
                                  (expand "ipc_init")
                                  ((""
                                    (expand "set_partner")
                                    ((""
                                      (name-replace
                                       "state_add_dirty_state"
                                       "state_add_dirty(receiver!1, TS_empty WITH [thread_transfer_in_progress := TRUE],
                                                      IF NOT state_old!1`receiver_initialized
                                                        THEN prepare_receive_dirty_state WITH [(receiver_initialized) := TRUE]
                                                      ELSE state_old!1
                                                      ENDIF
                                                        WITH [(threads)(receiver!1)`partner := state_old!1`this])"
                                       :hide?
                                       nil)
                                      ((""
                                        (name-replace
                                         "state_add_dirty_state2"
                                         "state_add_dirty(state_old!1`this, TS_empty WITH [thread_ready := TRUE, thread_transfer_in_progress := TRUE],
                                      state_add_dirty_state)"
                                         :hide?
                                         nil)
                                        ((""
                                          (expand "state_add_dirty")
                                          ((""
                                            (expand
                                             "state_change_dirty")
                                            ((""
                                              (expand
                                               "state_del_dirty")
                                              ((""
                                                (expand "TS_full")
                                                ((""
                                                  (expand "TS_empty")
                                                  ((""
                                                    (case
                                                     "prepare_receive_dirty_state`threads(state_old!1`this)`state`thread_ipc_in_progress = state_old!1`threads(state_old!1`this)`state`thread_ipc_in_progress")
                                                    (("1"
                                                      (case
                                                       "ipc_receiver_ready_change_state`threads(state_old!1`this)`state`thread_ipc_in_progress = state_old!1`threads(state_old!1`this)`state`thread_ipc_in_progress")
                                                      (("1"
                                                        (case-replace
                                                         "state_old!1`receiver_initialized")
                                                        (("1"
                                                          (case-replace
                                                           "state_old!1`threads(receiver!1)`state`thread_receiving ")
                                                          (("1"
                                                            (case-replace
                                                             "state_old!1`threads(receiver!1)`state`thread_ipc_in_progress")
                                                            (("1"
                                                              (case-replace
                                                               "state_old!1`threads(receiver!1)`state`thread_cancel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case-replace
                                                                   "state_old!1`this = state_old!1`threads(receiver!1)`partner")
                                                                  (("1"
                                                                    (case-replace
                                                                     "in_sender_list(receiver!1, state_old!1)")
                                                                    (("1"
                                                                      (case-replace
                                                                       "ipc_receiver_ready_bool")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     1)
                                                                    (("2"
                                                                      (case-replace
                                                                       " ipc_receiver_ready_bool")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite 1)
                                                          (("2"
                                                            (case-replace
                                                             "prepare_receive_dirty_state`threads(receiver!1)`state`thread_receiving")
                                                            (("1"
                                                              (case-replace
                                                               "prepare_receive_dirty_state`threads(receiver!1)`state`thread_ipc_in_progress ")
                                                              (("1"
                                                                (case-replace
                                                                 "prepare_receive_dirty_state`threads(receiver!1)`state`thread_cancel")
                                                                (("1"
                                                                  (replace
                                                                   -10
                                                                   *
                                                                   rl
                                                                   :hide?
                                                                   T)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   1)
                                                                  (("2"
                                                                    (case-replace
                                                                     " state_old!1`this = prepare_receive_dirty_state`threads(receiver!1)`partner")
                                                                    (("1"
                                                                      (case-replace
                                                                       "in_sender_list(receiver!1, prepare_receive_dirty_state WITH [(receiver_initialized) := TRUE])")
                                                                      (("1"
                                                                        (case-replace
                                                                         "ipc_receiver_ready_bool")
                                                                        (("1"
                                                                          (replace
                                                                           -12
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -11
                                                                             *
                                                                             rl
                                                                             :hide?
                                                                             T)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -10
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "ipc_receiver_ready_bool")
                                                                        (("1"
                                                                          (replace
                                                                           -10
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -9
                                                                             *
                                                                             rl
                                                                             :hide?
                                                                             T)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   *
                                                                   rl
                                                                   :hide?
                                                                   T)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -7
                                                                 *
                                                                 rl
                                                                 :hide?
                                                                 T)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 3 -7)
                                                        (("2"
                                                          (replace
                                                           -5
                                                           *
                                                           rl
                                                           :hide?
                                                           T)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "state_old!1`receiver_initialized")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -6)
                                                      (("2"
                                                        (case-replace
                                                         " state_old!1`receiver_initialized")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   17501 12910 t nil))
 (preemption_point_actions_no_timeout_ipc_in_progress_unchanged 0
  (preemption_point_actions_no_timeout_ipc_in_progress_unchanged-1 nil
   3388829369 3377646126
   ("" (induct "actions")
    (("1" (skolem!) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (lemma "preemption_point_actions_this_unchanged")
        (("3" (lemma "kill_this_unchanged")
          (("3" (lemma "receiver_ready_this_unchanged")
            (("3"
              (inst -3 "cons(cons1_var!1, cons2_var!1)" "partner!1"
               "FALSE" "state_old!1")
              (("3" (assert)
                (("3" (replace -3 * rl)
                  (("3" (expand "preemption_point_actions" +)
                    (("3" (inst -1 "partner!1" "state_old!1")
                      (("3" (inst -2 "partner!1" "state_old!1")
                        (("3"
                          (lemma
                           "receiver_ready_ipc_in_progress_unchanged")
                          (("3"
                            (lemma "kill_ipc_in_progress_unchanged")
                            (("3" (inst -1 "partner!1" "state_old!1")
                              (("3"
                                (inst
                                 -2
                                 "state_old!1`this"
                                 "partner!1"
                                 "state_old!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (replace -3 * rl)
                                    (("3"
                                      (replace -4 * rl)
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (lemma
                                             "preemption_point_actions_this_unchanged")
                                            (("3"
                                              (inst
                                               -1
                                               "cons2_var!1"
                                               "partner!1"
                                               "FALSE"
                                               "IF cons1_var!1 = Sys_thread_ex_regs
                                     THEN sys_thread_ex_regs
                                          (state_old!1`this, state_old!1)
                                     ELSIF cons1_var!1 = Kill
                                     THEN kill(partner!1, state_old!1)
                                     ELSIF cons1_var!1 = Receiver_ready
                                           AND
                                           NOT state_old!1`this = partner!1
                                     THEN receiver_ready
                                          (state_old!1`this,
                                           partner!1,
                                           state_old!1)
                                     ELSE state_old!1
                                     ENDIF")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (replace -1 * rl)
                                                  (("3"
                                                    (expand
                                                     "sys_thread_ex_regs")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (replace
                                                         -4
                                                         *
                                                         rl)
                                                        (("3"
                                                          (replace
                                                           -5
                                                           *
                                                           rl)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             *
                                                             rl)
                                                            (("3"
                                                              (hide-all-but
                                                               (1
                                                                -7
                                                                -3
                                                                -2))
                                                              (("3"
                                                                (case-replace
                                                                 "state_old!1`this = partner!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "cons1_var!1 = Sys_thread_ex_regs")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case-replace
                                                                         " cons1_var!1 = Kill")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     *
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         " cons1_var!1 = Sys_thread_ex_regs")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             " cons1_var!1 = Kill")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case-replace
                                                                                 " cons1_var!1 = Receiver_ready")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (receiver_ready_ipc_in_progress_unchanged formula-decl nil
     fiasco_state nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (kill_ipc_in_progress_unchanged formula-decl nil fiasco_state nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   2829 1760 t shostak))
 (preemption_point_no_timeout_ipc_in_progress_unchanged 0
  (preemption_point_no_timeout_ipc_in_progress_unchanged-1 nil
   3377546422 3377646127
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        ((""
          (lemma
           "preemption_point_actions_no_timeout_ipc_in_progress_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_no_timeout_ipc_in_progress_unchanged
     formula-decl nil fiasco_state nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   314 240 t nil))
 (preemption_point_actions_no_timeout_ipc_in_progress_unchanged2 0
  (preemption_point_actions_no_timeout_ipc_in_progress_unchanged2-1 nil
   3388830011 3377646130
   ("" (induct "actions")
    (("1" (skolem!)
      (("1" (ground)
        (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (assert)
        (("3" (lemma "preemption_point_actions_this_unchanged")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replace -1 * rl)
                (("3" (case-replace "allow_timeout!1")
                  (("1" (lemma "timeout_this_unchanged")
                    (("1" (lemma "kill_this_unchanged")
                      (("1" (lemma "receiver_ready_this_unchanged")
                        (("1" (expand "preemption_point_actions" +)
                          (("1" (lemma "kill_timeout_unchanged")
                            (("1"
                              (lemma
                               "receiver_ready_timeout_unchanged")
                              (("1"
                                (inst
                                 -1
                                 "state_old!1`this"
                                 "partner!1"
                                 "state_old!1")
                                (("1"
                                  (inst -2 "partner!1" "state_old!1")
                                  (("1"
                                    (inst -3 "partner!1" "state_old!1")
                                    (("1"
                                      (inst
                                       -4
                                       "partner!1"
                                       "state_old!1")
                                      (("1"
                                        (inst -5 "state_old!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "sys_thread_ex_regs")
                                            (("1"
                                              (case-replace
                                               "cons1_var!1 = Timeout")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (3 4))
                                                  (("1"
                                                    (lemma
                                                     "preemption_point_actions_timeout")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "timeout")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2 3 4 5)
                                                  (("2"
                                                    (lemma
                                                     "receiver_ready_ipc_in_progress_unchanged")
                                                    (("2"
                                                      (lemma
                                                       "kill_ipc_in_progress_unchanged")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "partner!1"
                                                         "state_old!1")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "state_old!1`this"
                                                           "partner!1"
                                                           "state_old!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "partner!1"
                                                               "TRUE"
                                                               "IF cons1_var!1 = Sys_thread_ex_regs
                                  THEN state_old!1
                                       WITH [(threads)
                                             (state_old!1`this)
                                             `state
                                             `thread_cancel
                                             := TRUE]
                                ELSIF cons1_var!1 = Kill
                                  THEN kill(partner!1, state_old!1)
                                ELSIF cons1_var!1 = Receiver_ready
                                      AND
                                      NOT state_old!1`this = partner!1
                                  THEN receiver_ready
                                       (state_old!1`this,
                                        partner!1,
                                        state_old!1)
                                ELSE state_old!1
                                ENDIF")
                                                              (("2"
                                                                (lemma
                                                                 "preemption_point_actions_this_unchanged")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "cons2_var!1"
                                                                   "partner!1"
                                                                   "TRUE"
                                                                   "IF cons1_var!1 = Sys_thread_ex_regs
                                  THEN state_old!1
                                       WITH [(threads)
                                             (state_old!1`this)
                                             `state
                                             `thread_cancel
                                             := TRUE]
                                ELSIF cons1_var!1 = Kill
                                  THEN kill(partner!1, state_old!1)
                                ELSIF cons1_var!1 = Receiver_ready
                                      AND
                                      NOT state_old!1`this = partner!1
                                  THEN receiver_ready
                                       (state_old!1`this,
                                        partner!1,
                                        state_old!1)
                                ELSE state_old!1
                                ENDIF")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       *
                                                                       rl)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         *
                                                                         rl)
                                                                        (("2"
                                                                          (case-replace
                                                                           " cons1_var!1 = Sys_thread_ex_regs")
                                                                          (("1"
                                                                            (reveal
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (reveal
                                                                             3
                                                                             4)
                                                                            (("2"
                                                                              (case-replace
                                                                               "cons1_var!1 = Kill")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case-replace
                                                                                 "cons1_var!1 = Receiver_ready")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   " state_old!1`this = partner!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (lemma
                       "preemption_point_actions_no_timeout_ipc_in_progress_unchanged")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (preemption_point_actions_timeout formula-decl nil fiasco_helpers
     nil)
    (kill_ipc_in_progress_unchanged formula-decl nil fiasco_state nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (receiver_ready_ipc_in_progress_unchanged formula-decl nil
     fiasco_state nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (kill_timeout_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (timeout_this_unchanged formula-decl nil fiasco_helpers nil)
    (preemption_point_actions_no_timeout_ipc_in_progress_unchanged
     formula-decl nil fiasco_state nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   2857 1830 t shostak))
 (preemption_point_no_timeout_ipc_in_progress_unchanged2 0
  (preemption_point_no_timeout_ipc_in_progress_unchanged2-1 nil
   3377546459 3377646130
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          ((""
            (lemma
             "preemption_point_actions_no_timeout_ipc_in_progress_unchanged2")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_no_timeout_ipc_in_progress_unchanged2
     formula-decl nil fiasco_state nil))
   323 220 t nil))
 (preemption_point_actions_not_thread_ipc_in_progress 0
  (preemption_point_actions_not_thread_ipc_in_progress-1 nil 3377646226
   3377647881
   ("" (induct "actions")
    (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (ground)
        (("2" (expand "preemption_point_actions")
          (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3"
        (lemma
         "preemption_point_actions_no_timeout_ipc_in_progress_unchanged")
        (("3" (lemma "preemption_point_actions_this_unchanged")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replace -1 * rl)
                (("3"
                  (inst -2 "cons(cons1_var!1, cons2_var!1)" "partner!1"
                   "state_old!1")
                  (("3" (assert)
                    (("3" (case-replace "allow_timeout!1")
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (expand "preemption_point_actions" -4)
                            (("1"
                              (inst -3 "partner!1" "TRUE"
                               "IF cons1_var!1 = Sys_thread_ex_regs
                                 THEN sys_thread_ex_regs
                                      (state_old!1`this, state_old!1)
                               ELSIF cons1_var!1 = Timeout
                                 THEN timeout
                                      (state_old!1`this, state_old!1)
                               ELSIF cons1_var!1 = Kill
                                 THEN kill(partner!1, state_old!1)
                               ELSIF cons1_var!1 = Receiver_ready
                                     AND
                                     NOT state_old!1`this = partner!1
                                 THEN receiver_ready
                                      (state_old!1`this,
                                       partner!1,
                                       state_old!1)
                               ELSE state_old!1
                               ENDIF")
                              (("1"
                                (lemma "kill_this_unchanged")
                                (("1"
                                  (lemma "timeout_this_unchanged")
                                  (("1"
                                    (lemma
                                     "receiver_ready_this_unchanged")
                                    (("1"
                                      (expand "sys_thread_ex_regs")
                                      (("1"
                                        (inst
                                         -1
                                         "partner!1"
                                         "state_old!1")
                                        (("1"
                                          (inst
                                           -3
                                           "partner!1"
                                           "state_old!1")
                                          (("1"
                                            (inst -2 "state_old!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "state_old!1`this = preemption_point_actions(cons2_var!1,
                                         partner!1,
                                         TRUE,
                                         IF cons1_var!1
                                            =
                                            Sys_thread_ex_regs
                                         THEN state_old!1
                                              WITH [(threads)
                                                    (state_old!1`this)
                                                    `state
                                                    `thread_cancel
                                                    := TRUE]
                                         ELSIF cons1_var!1 = Timeout
                                         THEN timeout
                                              (state_old!1`this,
                                               state_old!1)
                                         ELSIF cons1_var!1 = Kill
                                         THEN kill(partner!1, state_old!1)
                                         ELSIF cons1_var!1 = Receiver_ready
                                               AND
                                               NOT
                                               state_old!1`this = partner!1
                                         THEN receiver_ready
                                              (state_old!1`this,
                                               partner!1,
                                               state_old!1)
                                         ELSE state_old!1
                                         ENDIF)`this")
                                                (("1"
                                                  (replace -1 * rl)
                                                  (("1"
                                                    (lemma
                                                     "kill_ipc_in_progress_unchanged")
                                                    (("1"
                                                      (lemma
                                                       "receiver_ready_ipc_in_progress_unchanged")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "state_old!1`this"
                                                         "partner!1"
                                                         "state_old!1")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "partner!1"
                                                           "state_old!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case-replace
                                                               "cons1_var!1 = Sys_thread_ex_regs")
                                                              (("1"
                                                                (case-replace
                                                                 "cons1_var!1 = Timeout")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "timeout(state_old!1`this, state_old!1)`threads
              (timeout(state_old!1`this,
                       state_old!1)`this)`state`thread_ipc_in_progress")
                                                                    (("1"
                                                                      (replace
                                                                       -6
                                                                       *
                                                                       rl)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "timeout")
                                                                          (("1"
                                                                            (expand
                                                                             "state_change")
                                                                            (("1"
                                                                              (expand
                                                                               "state_change_dirty")
                                                                              (("1"
                                                                                (expand
                                                                                 "TS_empty")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case-replace
                                                                     "cons1_var!1 = Kill")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "cons1_var!1 = Receiver_ready")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case-replace
                                                                             "state_old!1`this = partner!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -7 -6 2)
                                                  (("2"
                                                    (lemma
                                                     "preemption_point_actions_this_unchanged")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case-replace
                                                           "cons1_var!1 = Sys_thread_ex_regs")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "cons1_var!1 = Timeout")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case-replace
                                                                   "cons1_var!1 = Kill")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case-replace
                                                                       "cons1_var!1 = Receiver_ready")
                                                                      (("1"
                                                                        (case-replace
                                                                         "state_old!1`this = partner!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (timeout_this_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_ipc_in_progress_unchanged formula-decl nil
     fiasco_state nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (kill_ipc_in_progress_unchanged formula-decl nil fiasco_state nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (preemption_point_actions_no_timeout_ipc_in_progress_unchanged
     formula-decl nil fiasco_state nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   1655212 9630 t shostak))
 (preemption_point_not_thread_ipc_in_progress 0
  (preemption_point_not_thread_ipc_in_progress-1 nil 3377645814
   3377645859
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          ((""
            (lemma
             "preemption_point_actions_not_thread_ipc_in_progress")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_not_thread_ipc_in_progress formula-decl
     nil fiasco_state nil))
   45175 480 t shostak))
 (preemption_point_actions_timeout_not_thread_ipc_in_progress 0
  (preemption_point_actions_timeout_not_thread_ipc_in_progress-1 nil
   3388833331 3377646098
   ("" (induct "actions")
    (("1" (skolem!)
      (("1" (ground)
        (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (flatten)
        (("2" (expand "preemption_point_actions")
          (("2" (propax) nil nil)) nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (case-replace "allow_timeout!1")
        (("1" (lemma "preemption_point_actions_this_unchanged")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replace -1 * rl)
                (("1" (expand "preemption_point_actions" (-4 -5))
                  (("1" (lemma "kill_timeout_unchanged")
                    (("1" (lemma "receiver_ready_timeout_unchanged")
                      (("1" (inst -2 "partner!1" "state_old!1")
                        (("1"
                          (inst -1 "state_old!1`this" "partner!1"
                           "state_old!1")
                          (("1"
                            (lemma
                             "receiver_ready_ipc_in_progress_unchanged")
                            (("1"
                              (lemma "kill_ipc_in_progress_unchanged")
                              (("1"
                                (inst -1 "partner!1" "state_old!1")
                                (("1"
                                  (inst
                                   -2
                                   "state_old!1`this"
                                   "partner!1"
                                   "state_old!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "kill_this_unchanged")
                                      (("1"
                                        (lemma
                                         "timeout_this_unchanged")
                                        (("1"
                                          (lemma
                                           "receiver_ready_this_unchanged")
                                          (("1"
                                            (inst
                                             -1
                                             "partner!1"
                                             "state_old!1")
                                            (("1"
                                              (inst
                                               -3
                                               "partner!1"
                                               "state_old!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "state_old!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 * rl)
                                                      (("1"
                                                        (case-replace
                                                         "cons1_var!1 = Timeout")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -9)
                                                            (("1"
                                                              (expand
                                                               "timeout")
                                                              (("1"
                                                                (expand
                                                                 "state_change")
                                                                (("1"
                                                                  (expand
                                                                   "state_change_dirty")
                                                                  (("1"
                                                                    (expand
                                                                     "TS_full")
                                                                    (("1"
                                                                      (expand
                                                                       "TS_empty")
                                                                      (("1"
                                                                        (lemma
                                                                         "preemption_point_actions_not_thread_ipc_in_progress")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "cons2_var!1"
                                                                           "partner!1"
                                                                           "TRUE"
                                                                           "state_old!1
                                 WITH [(threads)(state_old!1`this)`state
                                       := state_old!1`threads
                                          (state_old!1`this)`state
                                          WITH [thread_ready := TRUE,
                                                thread_cancel
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_cancel,
                                                thread_dead
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_dead,
                                                thread_busy
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_busy,
                                                thread_invalid
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_invalid,
                                                thread_polling
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_polling,
                                                thread_receiving
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_receiving,
                                                thread_ipc_in_progress
                                                := FALSE,
                                                thread_send_in_progress
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_send_in_progress,
                                                thread_transfer_in_progress
                                                := state_old!1`threads
                                                   (state_old!1`this)`state`thread_transfer_in_progress],
                                       timeout := TRUE]")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "preemption_point_actions_this_unchanged")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "cons2_var!1"
                                                                                 "partner!1"
                                                                                 "TRUE"
                                                                                 "state_old!1
                                    WITH [(threads)(state_old!1`this)`state
                                          := state_old!1`threads
                                             (state_old!1`this)`state
                                             WITH [thread_ready := TRUE,
                                                   thread_cancel
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_cancel,
                                                   thread_dead
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_dead,
                                                   thread_busy
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_busy,
                                                   thread_invalid
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_invalid,
                                                   thread_polling
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_polling,
                                                   thread_receiving
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_receiving,
                                                   thread_ipc_in_progress
                                                   := FALSE,
                                                   thread_send_in_progress
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_send_in_progress,
                                                   thread_transfer_in_progress
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state`thread_transfer_in_progress],
                                          timeout
                                          := TRUE]")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case-replace
                                                             "cons1_var!1 = Sys_thread_ex_regs")
                                                            (("1"
                                                              (expand
                                                               "sys_thread_ex_regs")
                                                              (("1"
                                                                (inst
                                                                 -9
                                                                 "partner!1"
                                                                 "TRUE"
                                                                 "state_old!1
                                 WITH [(threads)
                                       (state_old!1`this)
                                       `state
                                       `thread_cancel
                                       := TRUE]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       *
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "preemption_point_actions_this_unchanged")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "cons2_var!1"
                                                                           "partner!1"
                                                                           "TRUE"
                                                                           "state_old!1
                                 WITH [(threads)
                                       (state_old!1`this)
                                       `state
                                       `thread_cancel
                                       := TRUE]")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case-replace
                                                                 "cons1_var!1 = Kill")
                                                                (("1"
                                                                  (inst
                                                                   -9
                                                                   "partner!1"
                                                                   "TRUE"
                                                                   "kill(partner!1, state_old!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "preemption_point_actions_this_unchanged")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "cons2_var!1"
                                                                           "partner!1"
                                                                           "TRUE"
                                                                           "kill
                                    (partner!1,
                                     state_old!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case-replace
                                                                     "cons1_var!1 = Receiver_ready")
                                                                    (("1"
                                                                      (case-replace
                                                                       "state_old!1`this = partner!1")
                                                                      (("1"
                                                                        (inst
                                                                         -9
                                                                         "partner!1"
                                                                         "TRUE"
                                                                         "state_old!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             *
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "preemption_point_actions_this_unchanged")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "cons2_var!1"
                                                                                   "partner!1"
                                                                                   "TRUE"
                                                                                   "state_old!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -9
                                                                           "partner!1"
                                                                           "TRUE"
                                                                           "receiver_ready(state_old!1`this,
                                              partner!1,
                                              state_old!1)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "preemption_point_actions_this_unchanged")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "cons2_var!1"
                                                                                 "partner!1"
                                                                                 "TRUE"
                                                                                 "receiver_ready
                                    (state_old!1`this,
                                     partner!1,
                                     state_old!1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "preemption_point_actions_this_unchanged")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "cons2_var!1"
                                                                               "partner!1"
                                                                               "TRUE"
                                                                               "state_old!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "preemption_point_actions_timeout_unchanged")
          (("2"
            (inst -1 "cons(cons1_var!1, cons2_var!1)" "partner!1"
             "state_old!1")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list_induction formula-decl nil list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (kill_timeout_unchanged formula-decl nil fiasco_helpers nil)
    (receiver_ready_ipc_in_progress_unchanged formula-decl nil
     fiasco_state nil)
    (timeout_this_unchanged formula-decl nil fiasco_helpers nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state_change const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (preemption_point_actions_not_thread_ipc_in_progress formula-decl
     nil fiasco_state nil)
    (FALSE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (kill_ipc_in_progress_unchanged formula-decl nil fiasco_state nil)
    (receiver_ready_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (preemption_point_actions_timeout_unchanged formula-decl nil
     fiasco_helpers nil))
   228931 5750 t shostak))
 (preemption_point_timeout_not_thread_ipc_in_progress 0
  (preemption_point_timeout_not_thread_ipc_in_progress-2 nil 3377547428
   3377646130
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          ((""
            (lemma
             "preemption_point_actions_timeout_not_thread_ipc_in_progress")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_timeout_not_thread_ipc_in_progress
     formula-decl nil fiasco_state nil))
   389 210 t nil)
  (preemption_point_timeout_not_thread_ipc_in_progress-1 nil 3377546496
   3377547374
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "preemption_point_state"
           "preemption_point(partner!1, allow_timeout!1, state_old!1)"
           :hide? nil)
          (("" (expand "preemption_point")
            ((""
              (case-replace
               "preemption_action(1 + state_old!1`seed) = Sys_thread_ex_regs")
              (("1" (expand "sys_thread_ex_regs") (("1" (assert) nil)))
               ("2"
                (case-replace
                 " preemption_action(1 + state_old!1`seed) = Kill")
                (("1" (assert)
                  (("1" (expand "kill")
                    (("1"
                      (case-replace
                       "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
                      (("1" (assert) nil)
                       ("2"
                        (case-replace
                         "state_old!1`threads(partner!1)`state`thread_invalid")
                        (("1" (assert) nil)
                         ("2" (assert) (("2" (assert) nil)))))))))))
                 ("2"
                  (case-replace
                   "preemption_action(1 + state_old!1`seed) = Receiver_ready")
                  (("1" (assert)
                    (("1" (lemma "receiver_ready_timeout_unchanged")
                      (("1"
                        (inst -1 "state_old!1`this" "partner!1"
                         "state_old!1
                               WITH [seed := 1 + state_old!1`seed,
                                     (last_preemption_action) := Receiver_ready]")
                        (("1" (assert) nil)))))))
                   ("2" (assert)
                    (("2"
                      (case "not  preemption_action(1 + state_old!1`seed) = Timeout")
                      (("1" (assert) (("1" (assert) nil)))
                       ("2" (case "not allow_timeout!1")
                        (("1" (assert) (("1" (assert) nil)))
                         ("2" (assert)
                          (("2" (expand "timeout")
                            (("2" (expand "state_change")
                              (("2"
                                (expand "state_change_dirty")
                                (("2"
                                  (expand "TS_full")
                                  (("2"
                                    (expand "TS_empty")
                                    (("2"
                                      (assert)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 1383 960 nil nil))
 (kill_polling_unchanged 0
  (kill_polling_unchanged-1 nil 3377642363 3377646131
   ("" (skolem!)
    (("" (ground)
      (("" (expand "kill")
        (("" (assert)
          ((""
            (case-replace
             "state_old!1`threads(partner!1)`thread_lock = state_old!1`this")
            ((""
              (case-replace
               "state_old!1`threads(partner!1)`state`thread_invalid")
              (("" (assert)
                (("" (case-replace "state_old!1`this = partner!1")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (kill const-decl "System_state" fiasco_functions nil))
   247 170 t shostak))
 (timeout_polling_unchanged 0
  (timeout_polling_unchanged-1 nil 3377642347 3377646131
   ("" (skolem!)
    (("" (ground)
      (("" (expand "timeout")
        (("" (expand "state_change")
          (("" (expand "state_change_dirty")
            (("" (expand "TS_full")
              (("" (expand "TS_empty") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((state_change const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (timeout const-decl "System_state" fiasco_functions nil))
   552 400 t shostak))
 (receiver_ready_polling_unchanged 0
  (receiver_ready_polling_unchanged-1 nil 3377642597 3377646133
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "receiver_ready_this_unchanged")
          (("" (inst?)
            (("" (assert)
              ((""
                (name-replace "receiver_ready_state"
                 "receiver_ready(state_old!1`this, partner!1,
                                 state_old!1)" :hide? nil)
                (("" (expand "receiver_ready")
                  (("" (expand "sender_dequeue_head")
                    ((""
                      (name-replace "prepare_receive_dirty_state"
                       "prepare_receive_dirty(Receiver_partner_thread,
                                              partner!1,
                                              state_old!1)" :hide? nil)
                      ((""
                        (name-replace "ipc_receiver_ready_change_state"
                         "ipc_receiver_ready_change(state_old!1`this,
                                                       partner!1,
                                                       IF NOT
                                                          state_old!1`receiver_initialized
                                                       THEN prepare_receive_dirty_state
                                                            WITH [(receiver_initialized)
                                                                  := TRUE]
                                                       ELSE state_old!1
                                                       ENDIF)" :hide?
                         nil)
                        (("" (expand "prepare_receive_dirty")
                          (("" (expand "ipc_receiver_ready_change")
                            (("" (expand "ipc_init")
                              ((""
                                (expand "set_partner")
                                ((""
                                  (name-replace
                                   "state_add_dirty_state"
                                   "state_add_dirty
                                            (partner!1,
                                             TS_empty
                                             WITH [thread_transfer_in_progress
                                                   := TRUE],
                                             IF NOT
                                                state_old!1`receiver_initialized
                                             THEN prepare_receive_dirty_state
                                                  WITH [(receiver_initialized)
                                                        := TRUE]
                                             ELSE state_old!1
                                             ENDIF
                                             WITH [(threads)(partner!1)`partner
                                                   := state_old!1`this])"
                                   :hide?
                                   nil)
                                  ((""
                                    (name-replace
                                     "state_add_dirty_state2"
                                     "state_add_dirty(state_old!1`this,
                                            TS_empty
                                            WITH [thread_ready := TRUE,
                                                  thread_transfer_in_progress
                                                  := TRUE],
                                            state_add_dirty_state)"
                                     :hide?
                                     nil)
                                    ((""
                                      (expand "state_del_dirty")
                                      ((""
                                        (expand "state_change_dirty")
                                        ((""
                                          (expand "state_add_dirty")
                                          ((""
                                            (expand "TS_empty")
                                            ((""
                                              (expand "TS_full")
                                              ((""
                                                (name-replace
                                                 "ipc_receiver_ready_bool"
                                                 "ipc_receiver_ready(state_old!1`this,
                                                partner!1,
                                                IF NOT
                                                   state_old!1`receiver_initialized
                                                THEN prepare_receive_dirty_state
                                                     WITH [(receiver_initialized)
                                                           := TRUE]
                                                ELSE state_old!1
                                                ENDIF)"
                                                 :hide?
                                                 nil)
                                                ((""
                                                  (replace
                                                   -7
                                                   *
                                                   rl
                                                   :hide?
                                                   T)
                                                  ((""
                                                    (case
                                                     "state_old!1`threads(state_old!1`this)`state`thread_polling =
                     prepare_receive_dirty_state`threads(state_old!1`this)`state`thread_polling")
                                                    (("1"
                                                      (case
                                                       "state_old!1`threads(state_old!1`this)`state`thread_polling =
                         ipc_receiver_ready_change_state`threads(state_old!1`this)`state`thread_polling")
                                                      (("1"
                                                        (replace
                                                         -8
                                                         +
                                                         rl
                                                         :hide?
                                                         T)
                                                        (("1"
                                                          (case
                                                           "state_old!1`threads(state_old!1`this)`state`thread_polling =
                  prepare_receive_dirty_state WITH [(receiver_initialized) := TRUE]`threads
                      (state_old!1`this)`state`thread_polling")
                                                          (("1"
                                                            (case-replace
                                                             "state_old!1`receiver_initialized")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 +
                                                                 rl
                                                                 :hide?
                                                                 T)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (2))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (case
                                                                   "state_old!1`threads
                                            (state_old!1`this)`state`thread_polling
                                         =
                                         prepare_receive_dirty_state
                                           WITH [(receiver_initialized) := TRUE]
                                           WITH [(threads)(partner!1)`sender_list
                                                   := Dequeued]`threads
                                             (state_old!1`this)`state`thread_polling")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +
                                                                     rl
                                                                     :hide?
                                                                     T)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       +
                                                                       rl
                                                                       :hide?
                                                                       T)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         +
                                                                         rl
                                                                         :hide?
                                                                         T)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -1))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 -2))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -7 3)
                                                        (("2"
                                                          (replace
                                                           -5
                                                           +
                                                           rl
                                                           :hide?
                                                           T)
                                                          (("2"
                                                            (case-replace
                                                             "state_old!1`receiver_initialized")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 2 -5))
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (ipc_receiver_ready const-decl "bool" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1809 1250 t nil))
 (preemption_point_actions_polling_unchanged 0
  (preemption_point_actions_polling_unchanged-1 nil 3388828497
   3377646136
   ("" (induct "actions")
    (("1" (skolem!) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (propax) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (lemma "preemption_point_actions_this_unchanged")
        (("3" (lemma "preemption_point_actions_this_unchanged")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replace -1 * rl)
                (("3" (expand "preemption_point_actions" +)
                  (("3" (lemma "timeout_this_unchanged")
                    (("3" (lemma "kill_this_unchanged")
                      (("3" (lemma "receiver_ready_this_unchanged")
                        (("3" (expand "sys_thread_ex_regs")
                          (("3" (inst -1 "partner!1" "state_old!1")
                            (("3" (inst -2 "partner!1" "state_old!1")
                              (("3"
                                (inst -3 "state_old!1")
                                (("3"
                                  (inst
                                   -6
                                   "partner!1"
                                   "allow_timeout!1"
                                   "IF cons1_var!1 = Sys_thread_ex_regs
                                  THEN state_old!1
                                       WITH [(threads)
                                             (state_old!1`this)
                                             `state
                                             `thread_cancel
                                             := TRUE]
                                ELSIF cons1_var!1 = Timeout
                                      AND
                                      allow_timeout!1
                                  THEN timeout
                                       (state_old!1`this, state_old!1)
                                ELSIF cons1_var!1 = Kill
                                  THEN kill(partner!1, state_old!1)
                                ELSIF cons1_var!1 = Receiver_ready
                                      AND
                                      NOT state_old!1`this = partner!1
                                  THEN receiver_ready
                                       (state_old!1`this,
                                        partner!1,
                                        state_old!1)
                                ELSE state_old!1
                                ENDIF")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst
                                       -5
                                       "cons2_var!1"
                                       "partner!1"
                                       "allow_timeout!1"
                                       "IF cons1_var!1 = Sys_thread_ex_regs
                                  THEN state_old!1
                                       WITH [(threads)
                                             (state_old!1`this)
                                             `state
                                             `thread_cancel
                                             := TRUE]
                                ELSIF cons1_var!1 = Timeout
                                      AND
                                      allow_timeout!1
                                  THEN timeout
                                       (state_old!1`this, state_old!1)
                                ELSIF cons1_var!1 = Kill
                                  THEN kill(partner!1, state_old!1)
                                ELSIF cons1_var!1 = Receiver_ready
                                      AND
                                      NOT state_old!1`this = partner!1
                                  THEN receiver_ready
                                       (state_old!1`this,
                                        partner!1,
                                        state_old!1)
                                ELSE state_old!1
                                ENDIF")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -2 * rl)
                                          (("3"
                                            (replace -3 * rl)
                                            (("3"
                                              (replace -1 * rl)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (replace -5 * rl)
                                                  (("3"
                                                    (lemma
                                                     "receiver_ready_polling_unchanged")
                                                    (("3"
                                                      (lemma
                                                       "kill_polling_unchanged")
                                                      (("3"
                                                        (lemma
                                                         "timeout_polling_unchanged")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "state_old!1")
                                                          (("3"
                                                            (inst
                                                             -2
                                                             "partner!1"
                                                             "state_old!1")
                                                            (("3"
                                                              (inst
                                                               -3
                                                               "partner!1"
                                                               "state_old!1")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (replace
                                                                   -6
                                                                   *
                                                                   rl)
                                                                  (("3"
                                                                    (replace
                                                                     -5
                                                                     *
                                                                     rl)
                                                                    (("3"
                                                                      (replace
                                                                       -4
                                                                       *
                                                                       rl)
                                                                      (("3"
                                                                        (replace
                                                                         -1
                                                                         *
                                                                         rl)
                                                                        (("3"
                                                                          (replace
                                                                           -2
                                                                           *
                                                                           rl)
                                                                          (("3"
                                                                            (case-replace
                                                                             "state_old!1`this = partner!1")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               rl)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-9
                                                                                  1))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 *
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-9
                                                                                    2))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((kill_this_unchanged formula-decl nil fiasco_helpers nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (kill_polling_unchanged formula-decl nil fiasco_state nil)
    (timeout_polling_unchanged formula-decl nil fiasco_state nil)
    (receiver_ready_polling_unchanged formula-decl nil fiasco_state
     nil)
    (receiver_ready_this_unchanged formula-decl nil fiasco_helpers nil)
    (timeout_this_unchanged formula-decl nil fiasco_helpers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (preemption_point_actions_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   2862 1850 t shostak))
 (preemption_point_polling_unchanged 0
  (preemption_point_polling_unchanged-1 nil 3385446236 3377646136
   ("" (skolem!)
    (("" (ground)
      (("" (expand "preemption_point")
        (("" (lemma " preemption_point_actions_polling_unchanged")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_actions_polling_unchanged formula-decl nil
     fiasco_state nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preemption_point const-decl "System_state" fiasco_functions nil))
   373 250 t shostak))
 (abort_send_not_polling 0
  (abort_send_not_polling-1 nil 3385202802 3377646139
   ("" (skolem!)
    (("" (ground)
      (("" (expand "abort_send")
        (("" (expand "clear_dirty")
          ((""
            (name-replace "state_del_dirty_state" "state_del_dirty
                                      (state_old!1`this,
                                       TS_empty
                                       WITH [thread_send_in_progress
                                             := TRUE,
                                             thread_polling := TRUE,
                                             thread_ipc_in_progress
                                             := TRUE,
                                             thread_transfer_in_progress
                                             := TRUE],
                                       state_old!1)" :hide? nil)
            (("" (expand "state_del_dirty")
              (("" (expand "TS_empty")
                (("" (expand "sender_dequeue")
                  (("" (lemma "preemption_point_polling_unchanged")
                    (("" (lemma "preemption_point_polling_unchanged")
                      (("" (inst?)
                        ((""
                          (inst -2 "partner!1" "TRUE"
                           "IF in_sender_list(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_del_dirty_state))
                         THEN preemption_point(partner!1,
                                               FALSE,
                                               state_del_dirty_state)
                                WITH [(threads)(partner!1)`sender_list
                                      := Dequeued]
                       ELSE preemption_point(partner!1,
                                             FALSE,
                                             state_del_dirty_state)
                       ENDIF")
                          ((""
                            (lemma "preemption_point_this_unchanged")
                            ((""
                              (lemma "preemption_point_this_unchanged")
                              ((""
                                (inst?)
                                ((""
                                  (inst
                                   -2
                                   "partner!1"
                                   "TRUE"
                                   "IF in_sender_list(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_del_dirty_state))
                         THEN preemption_point(partner!1,
                                               FALSE,
                                               state_del_dirty_state)
                                WITH [(threads)(partner!1)`sender_list
                                      := Dequeued]
                       ELSE preemption_point(partner!1,
                                             FALSE,
                                             state_del_dirty_state)
                       ENDIF")
                                  ((""
                                    (assert)
                                    ((""
                                      (replace -1 * rl)
                                      ((""
                                        (replace -3 * rl)
                                        ((""
                                          (case
                                           "preemption_point(partner!1, FALSE,
                              state_del_dirty_state)`threads
               WITH [(partner!1)`sender_list := Dequeued]
                 (state_del_dirty_state`this)`state`thread_polling")
                                          (("1"
                                            (hide-all-but (-6 -4 -1))
                                            (("1"
                                              (replace
                                               -3
                                               *
                                               rl
                                               :hide?
                                               T)
                                              (("1"
                                                (beta)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (case-replace
                                                       "state_old!1`this = partner!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "preemption_point(partner!1, FALSE, state_del_dirty_state)`threads
           (state_del_dirty_state`this)`state`thread_polling")
                                            (("1"
                                              (hide-all-but (-1 -4 -6))
                                              (("1"
                                                (replace
                                                 -3
                                                 *
                                                 rl
                                                 :hide?
                                                 T)
                                                (("1"
                                                  (beta)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "in_sender_list(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_del_dirty_state))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3 * rl)
                                                    (("1"
                                                      (hide-all-but
                                                       (-4 -6 1 2))
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (case-replace
                                                           "state_del_dirty_state`this = partner!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite 1)
                                                  (("2"
                                                    (case-replace
                                                     "state_del_dirty_state`this = partner!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point_polling_unchanged formula-decl nil fiasco_state
     nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (abort_send const-decl "System_state" fiasco_functions nil))
   2219 1540 t shostak))
 (do_send_wait_finish_not_polling 0
  (do_send_wait_finish_not_polling-1 nil 3385446741 3377646143
   ("" (skolem!)
    (("" (ground)
      ((""
        (name-replace "do_send_wait_finish_state"
         " do_send_wait_finish(partner!1, state_old!1)" :hide? nil)
        (("" (expand "do_send_wait_finish")
          (("" (expand "sender_dequeue")
            ((""
              (name-replace "state_add_dirty_state" " state_add_dirty
                                                     (state_old!1`this,
                                                      TS_empty
                                                      WITH [thread_ipc_in_progress
                                                            := TRUE],
                                                      state_old!1)"
               :hide? nil)
              ((""
                (name-replace "preemption_point_state"
                 "preemption_point(partner!1,
                                          FALSE,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           IF state_old!1`timeout
                                           THEN state_add_dirty_state
                                           ELSE state_old!1
                                           ENDIF)
                                          WITH [(threads)
                                                (partner!1)
                                                `sender_list
                                                := Dequeued])" :hide?
                 nil)
                ((""
                  (name-replace "state_del_dirty_state"
                   "state_del_dirty(preemption_point_state`this,
                           TS_empty WITH [thread_polling := TRUE],
                           preemption_point_state)" :hide? nil)
                  (("" (expand "state_del_dirty")
                    (("" (expand "TS_empty")
                      (("" (expand "state_add_dirty")
                        (("" (lemma "abort_send_not_polling")
                          ((""
                            (case-replace "state_del_dirty_state`threads
             (state_del_dirty_state`this)`state`thread_cancel")
                            (("1"
                              (case-replace
                               " in_ipc(state_del_dirty_state`this, partner!1,
                    state_del_dirty_state)")
                              (("1"
                                (expand "state_change_dirty")
                                (("1"
                                  (expand "TS_full")
                                  (("1"
                                    (inst
                                     -3
                                     "partner!1"
                                     "state_del_dirty_state
                   WITH [(threads)(partner!1)`state
                           := state_del_dirty_state`threads
                                  (partner!1)`state
                                WITH [thread_ready := TRUE,
                                      thread_cancel := TRUE,
                                      thread_dead
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_dead,
                                      thread_busy
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_busy,
                                      thread_invalid
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_invalid,
                                      thread_polling
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_polling,
                                      thread_receiving
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_receiving,
                                      thread_ipc_in_progress := FALSE,
                                      thread_send_in_progress
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_send_in_progress,
                                      thread_transfer_in_progress
                                      := state_del_dirty_state`threads
                                         (partner!1)`state`thread_transfer_in_progress]]")
                                    (("1"
                                      (replace -7 * rl :hide? T)
                                      (("1"
                                        (beta)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite 1)
                                (("2"
                                  (inst
                                   -2
                                   "partner!1"
                                   "state_del_dirty_state")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite 1)
                              (("2"
                                (lemma
                                 "preemption_point_this_unchanged")
                                (("2"
                                  (lemma
                                   "preemption_point_this_unchanged")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst
                                       -2
                                       "partner!1"
                                       "FALSE"
                                       "preemption_point(partner!1,
                                        FALSE,
                                        IF state_old!1`timeout
                                        THEN state_add_dirty_state
                                        ELSE state_old!1
                                        ENDIF)
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                      (("2"
                                        (case-replace
                                         "in_ipc(state_del_dirty_state`this, partner!1,
                       state_del_dirty_state)")
                                        (("1"
                                          (case-replace
                                           "state_del_dirty_state`threads(partner!1)`state`thread_dead")
                                          (("1"
                                            (inst
                                             -5
                                             "partner!1"
                                             "state_del_dirty_state")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (rewrite 1)
                                              (("2"
                                                (case
                                                 "not state_del_dirty_state`threads(state_del_dirty_state`this)`state`thread_polling")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (case-replace
                                                     "state_old!1`timeout")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -9
                                                         *
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite 1)
                                                      (("2"
                                                        (replace
                                                         -8
                                                         *
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -9 * rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite 1)
                                          (("2"
                                            (inst
                                             -3
                                             "partner!1"
                                             "state_del_dirty_state")
                                            (("2"
                                              (expand
                                               "state_add_dirty_state")
                                              (("2"
                                                (expand
                                                 "state_add_dirty")
                                                (("2"
                                                  (expand "TS_empty")
                                                  (("2"
                                                    (case-replace
                                                     "state_old!1`timeout")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (abort_send_not_polling formula-decl nil fiasco_state nil) nil
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Sender_list type-decl nil fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   4283 2800 t shostak))
 (do_send_wait_loop_not_polling 0
  (do_send_wait_loop_not_polling-1 nil 3385448897 3377646145
   ("" (skolem!)
    (("" (ground)
      ((""
        (name-replace "do_send_wait_loop_state"
         "do_send_wait_loop(partner!1, state_old!1)" :hide? nil)
        (("" (expand "do_send_wait_loop")
          (("" (expand "lock_dirty")
            (("" (expand "clear_dirty")
              ((""
                (name-replace "preemption_point_state" "preemption_point
                                              (partner!1,
                                               TRUE,
                                               state_old!1
                                               WITH [(threads)
                                                     (partner!1)
                                                     `thread_lock
                                                     := Zero_thread])"
                 :hide? nil)
                (("" (lemma "preemption_point_this_unchanged")
                  ((""
                    (inst -1 "partner!1" "TRUE" "state_old!1
                         WITH [(threads)(partner!1)`thread_lock
                                 := Zero_thread]")
                    (("" (assert)
                      ((""
                        (case-replace "preemption_point_state`threads
           WITH [(partner!1)`thread_lock := preemption_point_state`this]
             (preemption_point_state`this)`state`thread_cancel")
                        (("1" (replace -4 * rl :hide? T)
                          (("1"
                            (lemma "do_send_wait_finish_not_polling")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite 1)
                          (("2"
                            (case-replace
                             "preemption_point_state`threads
           WITH [(partner!1)`thread_lock := preemption_point_state`this]
             (preemption_point_state`this)`state`thread_transfer_in_progress")
                            (("1" (replace -4 * rl :hide? T)
                              (("1"
                                (lemma
                                 "do_send_wait_finish_not_polling")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite 1)
                              (("2"
                                (case-replace
                                 "preemption_point_state`timeout")
                                (("1"
                                  (replace -4 * rl :hide? T)
                                  (("1"
                                    (lemma "abort_send_not_polling")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite 1)
                                  (("2"
                                    (case-replace
                                     "preemption_point_state`threads(partner!1)`state`thread_dead")
                                    (("1"
                                      (replace -4 * rl :hide? T)
                                      (("1"
                                        (lemma
                                         "abort_send_not_polling")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite 1)
                                      (("2"
                                        (expand "state_add_dirty")
                                        (("2"
                                          (expand "TS_empty")
                                          (("2"
                                            (replace -3 * rl :hide? T)
                                            (("2"
                                              (lemma
                                               "do_send_wait_finish_not_polling")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abort_send_not_polling formula-decl nil fiasco_state nil)
    (do_send_wait_finish_not_polling formula-decl nil fiasco_state nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (TRUE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (do_send_wait_loop const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1802 1270 t shostak))
 (do_send_wait_not_polling 0
  (do_send_wait_not_polling-1 nil 3385442715 3377646148
   ("" (skolem!)
    (("" (ground)
      ((""
        (name-replace "do_send_wait_state"
         "do_send_wait(partner!1, state_old!1)" :hide? nil)
        (("" (expand "do_send_wait")
          ((""
            (name-replace "state_add_dirty_state" " state_add_dirty
                                           (state_old!1`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE,
                                                  thread_send_in_progress
                                                  := TRUE,
                                                  thread_ipc_in_progress
                                                  := TRUE],
                                            state_old!1
                                            WITH [(assertions_held)
                                                  := state_old!1`assertions_held
                                                     AND
                                                     (state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      Zero_thread
                                                      OR
                                                      state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      state_old!1`this)])"
             :hide? nil)
            (("" (lemma "preemption_point_this_unchanged")
              (("" (lemma "preemption_point_this_unchanged")
                (("" (inst?)
                  (("" (expand "lock_dirty")
                    ((""
                      (inst -2 "partner!1" "TRUE" "sender_enqueue
                                        (partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_add_dirty_state
                                          WITH [(threads)
                                                (partner!1)
                                                `thread_lock
                                                := state_add_dirty_state`this]))")
                      (("" (lemma "sender_enqueue_this_unchanged")
                        (("" (inst?)
                          ((""
                            (case "state_add_dirty_state`this = state_old!1`this")
                            (("1" (expand "state_add_dirty")
                              (("1"
                                (expand "TS_empty")
                                (("1"
                                  (expand "clear_dirty")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case-replace
                                       "preemption_point(partner!1, FALSE,
                          state_add_dirty_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := state_add_dirty_state`this])`threads
             (preemption_point(partner!1, FALSE,
                               state_add_dirty_state
                                 WITH [(threads)(partner!1)`thread_lock
                                       := state_add_dirty_state`this])`this)`state`thread_cancel")
                                      (("1"
                                        (name-replace
                                         "preemption_point_state"
                                         "preemption_point(partner!1,
                                       FALSE,
                                       state_add_dirty_state
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_state`this])"
                                         :hide?
                                         nil)
                                        (("1"
                                          (expand "state_del_dirty")
                                          (("1"
                                            (expand "TS_ipc_end_mask")
                                            (("1"
                                              (expand
                                               "TS_ipc_sending_mask")
                                              (("1"
                                                (expand "TS_empty")
                                                (("1"
                                                  (case
                                                   "do_send_wait_state`this = state_old!1`this")
                                                  (("1"
                                                    (replace -1 *)
                                                    (("1"
                                                      (replace
                                                       -9
                                                       *
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (case-replace
                                                             "state_old!1`this = partner!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -9)
                                                    (("2"
                                                      (replace
                                                       -8
                                                       *
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("2"
                                                        (beta)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (replace -1 *)
                                          (("2"
                                            (replace -3 * rl)
                                            (("2"
                                              (case-replace
                                               "sender_ok(state_old!1`this, partner!1,
                   preemption_point(partner!1,
                                    FALSE,
                                    state_add_dirty_state
                                    WITH [(threads)(partner!1)`thread_lock
                                          := state_old!1`this]))")
                                              (("1"
                                                (hide -3 -5)
                                                (("1"
                                                  (lemma
                                                   "sender_ok_not_polling")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "partner!1"
                                                     "preemption_point(partner!1, FALSE,
                                 state_add_dirty_state
                                   WITH [(threads)(partner!1)`thread_lock
                                         := state_old!1`this])")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite 1)
                                                (("2"
                                                  (case-replace
                                                   " preemption_point(partner!1, TRUE,
                          sender_enqueue(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_add_dirty_state
                                          WITH [(threads)
                                                (partner!1)
                                                `thread_lock
                                                := state_old!1`this])))`timeout")
                                                  (("1"
                                                    (lemma
                                                     "abort_send_not_polling")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "partner!1"
                                                       "preemption_point(partner!1, TRUE,
                                  sender_enqueue(partner!1,
                                                 preemption_point
                                                 (partner!1,
                                                  FALSE,
                                                  state_add_dirty_state
                                                  WITH [(threads)
                                                        (partner!1)
                                                        `thread_lock
                                                        := state_old!1`this])))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite 1)
                                                    (("2"
                                                      (lemma
                                                       "do_send_wait_loop_not_polling")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "partner!1"
                                                         "preemption_point(partner!1,
                                         TRUE,
                                         sender_enqueue
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           state_add_dirty_state
                                           WITH [(threads)
                                                 (partner!1)
                                                 `thread_lock
                                                 := state_old!1`this])))")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2 -4))
                              (("2"
                                (replace -1 * rl :hide? T)
                                (("2"
                                  (expand "state_add_dirty")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TS_ipc_sending_mask const-decl "Thread_state" fiasco_states nil)
    (TS_ipc_end_mask const-decl "Thread_state" fiasco_states nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (sender_ok_not_polling formula-decl nil fiasco_state nil)
    (abort_send_not_polling formula-decl nil fiasco_state nil)
    (do_send_wait_loop_not_polling formula-decl nil fiasco_state nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_enqueue_this_unchanged formula-decl nil fiasco_helpers nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (do_send_wait const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   3205 2350 t shostak))
 (try_handshake_receiver_no_error_not_polling 0
  (try_handshake_receiver_no_error_not_polling-2 nil 3390191660
   3390192564
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "try_handshake_receiver_state"
           "try_handshake_receiver(partner!1, state_old!1)" :hide? nil)
          (("" (expand "try_handshake_receiver")
            (("" (expand "lock_dirty")
              (("" (expand "clear_dirty")
                (("" (lemma "preemption_point_polling_unchanged")
                  (("" (inst?)
                    (("" (assert)
                      (("" (assert)
                        (("" (case-replace "partner!1 = Zero_thread")
                          (("1" (assert) nil nil)
                           ("2"
                            (case-replace
                             "state_old!1`threads(partner!1)`state`thread_invalid")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace "partner!1 = Nil_thread")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   " state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                                  (("1"
                                    (case-replace
                                     "state_old!1`threads(state_old!1`this)`state`thread_cancel")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case-replace
                                         "sender_ok(state_old!1`this, partner!1,
                                   state_old!1 WITH [handshake_attempted := TRUE])")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "preemption_point_this_unchanged")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (lemma
                                                 "do_send_wait_not_polling")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "partner!1"
                                                   " state_old!1 WITH [handshake_attempted := TRUE]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (9 1 -4 -3))
                                                      (("2"
                                                        (replace
                                                         -1
                                                         *
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case-replace
                                       " preemption_point(partner!1, FALSE,
                                    state_old!1
                                      WITH [handshake_attempted := TRUE])`threads
                     WITH [(partner!1)`thread_lock
                             := preemption_point(partner!1,
                                                 FALSE,
                                                 state_old!1
                                                 WITH [handshake_attempted
                                                       := TRUE])`this]
                       (preemption_point(partner!1, FALSE,
                                         state_old!1
                                           WITH [handshake_attempted
                                                 := TRUE])`this)`state`thread_cancel")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "sender_ok(preemption_point(partner!1,
                                                    FALSE,
                                                    state_old!1
                                                    WITH [handshake_attempted
                                                          := TRUE])`this,
                                   partner!1,
                                   preemption_point(partner!1,
                                                    FALSE,
                                                    state_old!1
                                                    WITH [handshake_attempted := TRUE])
                                     WITH [(threads)(partner!1)`thread_lock
                                             := preemption_point
                                                (partner!1,
                                                 FALSE,
                                                 state_old!1
                                                 WITH [handshake_attempted
                                                       := TRUE])`this])")
                                          (("1"
                                            (lemma
                                             "preemption_point_this_unchanged")
                                            (("1"
                                              (hide-all-but
                                               (8 -4 -3 -1))
                                              (("1"
                                                (inst
                                                 -1
                                                 "partner!1"
                                                 "FALSE"
                                                 "state_old!1 WITH [handshake_attempted := TRUE]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       *
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         *
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "preemption_point_polling_unchanged")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (beta)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (case-replace
                                                                     "state_old!1`this = partner!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "do_send_wait_not_polling")
                                              (("2"
                                                (lemma
                                                 "preemption_point_this_unchanged")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "partner!1"
                                                     "preemption_point
                                                      (partner!1,
                                                       FALSE,
                                                       state_old!1
                                                       WITH [handshake_attempted
                                                             := TRUE])
                                                      WITH [(threads)
                                                            (partner!1)
                                                            `thread_lock
                                                            := preemption_point
                                                               (partner!1,
                                                                FALSE,
                                                                state_old!1
                                                                WITH [handshake_attempted
                                                                      := TRUE])`this]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         -4
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (do_send_wait_not_polling formula-decl nil fiasco_state nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (preemption_point_polling_unchanged formula-decl nil fiasco_state
     nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   901705 4080 nil nil)
  (try_handshake_receiver_no_error_not_polling-1 nil 3385802042
   3377646151
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "try_handshake_receiver_state"
           "try_handshake_receiver(partner!1, state_old!1)" :hide? nil)
          (("" (expand "try_handshake_receiver")
            (("" (expand "lock_dirty")
              (("" (expand "clear_dirty")
                (("" (lemma "preemption_point_polling_unchanged")
                  (("" (inst?)
                    (("" (assert)
                      (("" (assert)
                        (("" (case-replace "partner!1 = Zero_thread")
                          (("1" (assert) nil nil)
                           ("2"
                            (case-replace
                             "state_old!1`threads(partner!1)`state`thread_invalid")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace "partner!1 = Nil_thread")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   " state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                                  (("1"
                                    (case-replace
                                     "state_old!1`threads(state_old!1`this)`state`thread_cancel")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case-replace
                                         "sender_ok(state_old!1`this, partner!1,
                       state_old!1 WITH [handshake_attempted := TRUE])")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "sender_ok_not_polling")
                                            (("1"
                                              (inst
                                               -1
                                               "partner!1"
                                               "state_old!1 WITH [handshake_attempted := TRUE]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "preemption_point_this_unchanged")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (lemma
                                                 "do_send_wait_not_polling")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "partner!1"
                                                   " state_old!1 WITH [handshake_attempted := TRUE]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -4
                                                       -5
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case-replace
                                       " preemption_point(partner!1, FALSE,
                          state_old!1
                            WITH [handshake_attempted := TRUE])`threads
           WITH [(partner!1)`thread_lock
                   := preemption_point(partner!1,
                                       FALSE,
                                       state_old!1
                                       WITH [handshake_attempted
                                             := TRUE])`this]
             (preemption_point(partner!1, FALSE,
                               state_old!1
                                 WITH [handshake_attempted
                                       := TRUE])`this)`state`thread_cancel")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "sender_ok(preemption_point(partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [handshake_attempted
                                              := TRUE])`this,
                       partner!1,
                       preemption_point(partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [handshake_attempted := TRUE])
                         WITH [(threads)(partner!1)`thread_lock
                                 := preemption_point
                                    (partner!1,
                                     FALSE,
                                     state_old!1
                                     WITH [handshake_attempted
                                           := TRUE])`this])")
                                          (("1"
                                            (lemma
                                             "sender_ok_not_polling")
                                            (("1"
                                              (lemma
                                               "preemption_point_this_unchanged")
                                              (("1"
                                                (inst
                                                 -1
                                                 "partner!1"
                                                 "FALSE"
                                                 "state_old!1
                                   WITH [handshake_attempted
                                         := TRUE]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     *
                                                     rl
                                                     :hide?
                                                     T)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "partner!1"
                                                       "preemption_point(partner!1, FALSE,
                                 state_old!1
                                   WITH [handshake_attempted := TRUE])
                  WITH [(threads)(partner!1)`thread_lock
                          := state_old!1`this]")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "do_send_wait_not_polling")
                                              (("2"
                                                (lemma
                                                 "preemption_point_this_unchanged")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "partner!1"
                                                     "preemption_point
                                        (partner!1,
                                         FALSE,
                                         state_old!1
                                         WITH [handshake_attempted
                                               := TRUE])
                                        WITH [(threads)
                                              (partner!1)
                                              `thread_lock
                                              := preemption_point
                                                 (partner!1,
                                                  FALSE,
                                                  state_old!1
                                                  WITH [handshake_attempted
                                                        := TRUE])`this]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         -4
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_polling_unchanged formula-decl nil fiasco_state
     nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (sender_ok_not_polling formula-decl nil fiasco_state nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (do_send_wait_not_polling formula-decl nil fiasco_state nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil))
   2601 1870 t shostak))
 (try_handshake_receiver_not_polling 0
  (try_handshake_receiver_not_polling-1 nil 3385971658 3377646153
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "try_handshake_receiver_state"
           "try_handshake_receiver(partner!1, state_old!1)" :hide? nil)
          (("" (expand "try_handshake_receiver")
            (("" (expand "lock_dirty")
              (("" (case-replace "partner!1 = Zero_thread")
                (("1" (assert) nil nil)
                 ("2"
                  (case-replace
                   "state_old!1`threads(partner!1)`state`thread_invalid ")
                  (("1" (assert) nil nil)
                   ("2" (case-replace "partner!1 = Nil_thread")
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (expand "clear_dirty")
                        (("2"
                          (case-replace
                           "state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                          (("1"
                            (case-replace
                             " state_old!1`threads(state_old!1`this)`state`thread_cancel")
                            (("1" (assert)
                              (("1"
                                (replace -3 * rl :hide? T)
                                (("1"
                                  (beta)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (case-replace
                                       " state_old!1`this = partner!1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case-replace
                                 "sender_ok(state_old!1`this, partner!1,
                       state_old!1 WITH [handshake_attempted := TRUE])")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lemma "do_send_wait_not_polling")
                                    (("2"
                                      (inst
                                       -1
                                       "partner!1"
                                       " state_old!1 WITH [handshake_attempted := TRUE]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "do_send_wait_this_unchanged")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace
                                                 -3
                                                 *
                                                 rl
                                                 :hide?
                                                 T)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case-replace
                               "preemption_point(partner!1, FALSE,
                          state_old!1
                            WITH [handshake_attempted := TRUE])`threads
           WITH [(partner!1)`thread_lock
                   := preemption_point(partner!1,
                                       FALSE,
                                       state_old!1
                                       WITH [handshake_attempted
                                             := TRUE])`this]
             (preemption_point(partner!1, FALSE,
                               state_old!1
                                 WITH [handshake_attempted
                                       := TRUE])`this)`state`thread_cancel")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "preemption_point_polling_unchanged")
                                  (("1"
                                    (lemma
                                     "preemption_point_this_unchanged")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (replace
                                               -3
                                               *
                                               rl
                                               :hide?
                                               T)
                                              (("1"
                                                (replace -1 * rl)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (case-replace
                                                     "state_old!1`this = partner!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   " sender_ok(preemption_point(partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [handshake_attempted
                                              := TRUE])`this,
                       partner!1,
                       preemption_point(partner!1,
                                        FALSE,
                                        state_old!1
                                        WITH [handshake_attempted := TRUE])
                         WITH [(threads)(partner!1)`thread_lock
                                 := preemption_point
                                    (partner!1,
                                     FALSE,
                                     state_old!1
                                     WITH [handshake_attempted
                                           := TRUE])`this])")
                                  (("1"
                                    (lemma
                                     "preemption_point_this_unchanged")
                                    (("1"
                                      (lemma
                                       "preemption_point_polling_unchanged")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace
                                               -3
                                               *
                                               rl
                                               :hide?
                                               T)
                                              (("1"
                                                (replace -1 *)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (case-replace
                                                     "preemption_point(partner!1, FALSE,
                          state_old!1
                            WITH [handshake_attempted := TRUE])`this
          = partner!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "do_send_wait_not_polling")
                                      (("2"
                                        (inst
                                         -1
                                         "partner!1"
                                         "preemption_point(partner!1,
                                                 FALSE,
                                                 state_old!1
                                                 WITH [handshake_attempted
                                                       := TRUE])
                                  WITH [(threads)(partner!1)`thread_lock
                                        := preemption_point
                                           (partner!1,
                                            FALSE,
                                            state_old!1
                                            WITH [handshake_attempted
                                                  := TRUE])`this]")
                                        (("2"
                                          (lemma
                                           "preemption_point_this_unchanged")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "do_send_wait_this_unchanged")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -3
                                                       *
                                                       rl
                                                       :hide?
                                                       T)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (do_send_wait_this_unchanged formula-decl nil fiasco_helpers nil)
    (do_send_wait_not_polling formula-decl nil fiasco_state nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (preemption_point_polling_unchanged formula-decl nil fiasco_state
     nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil))
   2539 1880 t shostak))
 (do_ipc_send_part_not_polling 0
  (do_ipc_send_part_not_polling-1 nil 3385971207 3377646191
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "do_ipc_send_part_state"
           "do_ipc_send_part(partner!1, have_receive!1, state_old!1)"
           :hide? nil)
          (("" (expand "do_ipc_send_part")
            ((""
              (name-replace "transfer_msg_state"
               "transfer_msg       (partner!1,
                                                                      ipc_init
                                                                      (try_handshake_receiver
                                                                       (partner!1,
                                                                        state_old!1)`this,
                                                                       partner!1,
                                                                       try_handshake_receiver
                                                                       (partner!1,
                                                                        state_old!1)
                                                                       WITH [(assertions_held)
                                                                             := try_handshake_receiver
                                                                                (partner!1,
                                                                                 state_old!1)`assertions_held
                                                                                AND
                                                                                NOT
                                                                                try_handshake_receiver
                                                                                (partner!1,
                                                                                 state_old!1)`threads
                                                                                (try_handshake_receiver
                                                                                 (partner!1,
                                                                                  state_old!1)`this)`state`thread_polling]))"
               :hide? nil)
              (("" (expand "clear_dirty_dont_switch")
                (("" (expand "wake_receiver")
                  (("" (expand "clear_dirty")
                    (("" (expand "state_change_dirty")
                      (("" (expand "TS_full")
                        (("" (expand "TS_empty")
                          (("" (expand "transfer_msg")
                            (("" (expand "ipc_init")
                              ((""
                                (expand "state_add_dirty")
                                ((""
                                  (expand "set_partner")
                                  ((""
                                    (expand "TS_empty")
                                    ((""
                                      (case-replace
                                       " try_handshake_receiver(partner!1, state_old!1)`error")
                                      (("1"
                                        (lemma
                                         "try_handshake_receiver_not_polling")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "try_handshake_receiver_not_polling")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "try_handshake_receiver_this_unchanged")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       " transfer_msg_state`this = state_old!1`this")
                                                      (("1"
                                                        (expand
                                                         "TS_ipc_end_mask")
                                                        (("1"
                                                          (expand
                                                           "TS_ipc_sending_mask")
                                                          (("1"
                                                            (expand
                                                             "TS_empty")
                                                            (("1"
                                                              (case-replace
                                                               " have_receive!1")
                                                              (("1"
                                                                (case-replace
                                                                 " in_ipc(transfer_msg_state`this, partner!1,
                    transfer_msg_state
                      WITH [(assertions_held)
                              := transfer_msg_state`assertions_held AND
                                  (transfer_msg_state`threads
                                       (partner!1)`thread_lock
                                    = Zero_thread
                                    OR
                                    transfer_msg_state`threads
                                    (partner!1)`thread_lock
                                    =
                                    transfer_msg_state`this),
                            (threads)(partner!1)`thread_lock
                              := Zero_thread])")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     *
                                                                     rl
                                                                     :hide?
                                                                     T)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case-replace
                                                                         "state_old!1`this = partner!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "state_del")
                                                                      (("2"
                                                                        (expand
                                                                         "state_del_dirty")
                                                                        (("2"
                                                                          (replace
                                                                           -5
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case-replace
                                                                               "state_old!1`this = partner!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case-replace
                                                                   "in_ipc(transfer_msg_state`this, partner!1,
                          transfer_msg_state
                            WITH [(assertions_held)
                                    := transfer_msg_state`assertions_held
                                       AND
                                       (transfer_msg_state`threads
                                        (partner!1)`thread_lock
                                        =
                                        Zero_thread
                                        OR
                                        transfer_msg_state`threads
                                        (partner!1)`thread_lock
                                        =
                                        transfer_msg_state`this)])")
                                                                  (("1"
                                                                    (expand
                                                                     "state_del")
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       *
                                                                       rl
                                                                       :hide?
                                                                       T)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "state_del_dirty")
                                                                          (("1"
                                                                            (case-replace
                                                                             "state_old!1`this = partner!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "state_del")
                                                                      (("2"
                                                                        (expand
                                                                         "state_del_dirty")
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case-replace
                                                                               "state_old!1`this = partner!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1 -2))
                                                        (("2"
                                                          (replace
                                                           -2
                                                           +
                                                           rl
                                                           :hide?
                                                           T)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (transfer_msg const-decl "System_state" fiasco_functions nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wake_receiver const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver_not_polling formula-decl nil fiasco_state
     nil)
    (TS_ipc_sending_mask const-decl "Thread_state" fiasco_states nil)
    (state_del const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (TS_ipc_end_mask const-decl "Thread_state" fiasco_states nil)
    (try_handshake_receiver_this_unchanged formula-decl nil
     fiasco_helpers nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (clear_dirty_dont_switch const-decl "System_state" fiasco_functions
     nil))
   37295 22100 t shostak))
 (sys_ipc_not_polling 0
  (sys_ipc_not_polling-3 nil 3388815965 3377646192
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "sys_ipc_state"
           "sys_ipc(have_send!1, partner!1, have_receive!1, sender!1, state_old!1)"
           :hide? nil)
          (("" (expand "sys_ipc")
            (("" (expand "do_ipc")
              (("" (expand "do_ipc_receive_part")
                (("" (lemma "do_ipc_send_part_not_polling")
                  (("" (case-replace "have_send!1")
                    (("1" (case-replace "have_receive!1")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "do_ipc_send_part(partner!1, TRUE,
                                          state_old!1
                                            WITH [(error) := FALSE,
                                                  (timeout) := FALSE,
                                                  (handshake_attempted) := FALSE,
                                                  (assertions_held) := TRUE,
                                                  (receiver_initialized) := FALSE])`error")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case-replace "have_receive!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_send_part_not_polling formula-decl nil fiasco_state nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil))
   1301 710 nil nil)
  (sys_ipc_not_polling-2 nil 3377630112 3388815947
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "sys_ipc_state"
           "sys_ipc(have_send!1, partner!1, have_receive!1, state_old!1)"
           :hide? nil)
          (("" (expand "sys_ipc")
            (("" (expand "do_ipc")
              (("" (expand "do_ipc_receive_part")
                (("" (lemma "do_ipc_send_part_not_polling")
                  (("" (case-replace "have_send!1")
                    (("1" (case-replace "have_receive!1")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "do_ipc_send_part(partner!1, TRUE,
                                    state_old!1
                                      WITH [(error) := FALSE,
                                            (timeout) := FALSE,
                                            (handshake_attempted) := FALSE,
                                            (assertions_held) := TRUE,
                                            (receiver_initialized) := FALSE])`error")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case-replace "have_receive!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_send_part_not_polling formula-decl nil fiasco_state nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil))
   21693 50 t nil)
  (sys_ipc_not_polling-1 nil 3385966100 3377629741
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "sys_ipc_state"
           "sys_ipc(have_send!1, partner!1, have_receive!1, state_old!1)"
           :hide? nil)
          (("" (expand "sys_ipc")
            (("" (expand "do_ipc")
              (("" (expand "do_ipc_receive_part")
                (("" (lemma "do_ipc_send_part_not_polling")
                  (("" (case-replace "have_send!1")
                    (("1" (case-replace "have_receive!1")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "do_ipc_send_part(partner!1, TRUE,
                              state_old!1
                                WITH [(error) := FALSE,
                                      (timeout) := FALSE,
                                      (handshake_attempted) := FALSE,
                                      (assertions_held) := TRUE,
                                      (receiver_initialized) := FALSE,
                                      (last_preemption_action)
                                      := Nothing])`error")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case-replace "have_receive!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (do_ipc_send_part_not_polling formula-decl nil fiasco_state nil)
    (do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (Nothing? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Nothing adt-constructor-decl "(Nothing?)" fiasco_types nil)
    (do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil))
   269 140 t shostak)))

