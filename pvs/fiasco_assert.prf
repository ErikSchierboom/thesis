(fiasco_assert
 (sender_dequeue_assertions_held 0
  (sender_dequeue_assertions_held-1 nil 3377462183 3377630448
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "sender_dequeue") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((sender_dequeue const-decl "System_state" fiasco_functions nil))
   321 140 t shostak))
 (sender_enqueue_assertions_held 0
  (sender_enqueue_assertions_held-1 nil 3377435600 3377630449
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "sender_enqueue") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((sender_enqueue const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   351 200 t shostak))
 (timeout_assertions_held 0
  (timeout_assertions_held-1 nil 3377640723 3377640735
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "timeout")
          (("" (expand "state_change")
            (("" (expand "state_change_dirty") (("" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((timeout const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (state_change const-decl "System_state" fiasco_functions nil))
   12032 250 t shostak))
 (kill_assertions_held 0
  (kill_assertions_held-1 nil 3377640712 3377640720
   ("" (skolem!)
    (("" (ground)
      (("" (flatten) (("" (expand "kill") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked ((kill const-decl "System_state" fiasco_functions nil))
   7906 50 t shostak))
 (receiver_ready_assertions_held 0
  (receiver_ready_assertions_held-1 nil 3385441492 3377630451
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "receiver_ready")
          (("" (expand "sender_dequeue_head")
            ((""
              (name-replace "prepare_receive_dirty_state"
               "prepare_receive_dirty(Receiver_partner_thread,
                                        receiver!1,
                                        state_old!1)" :hide? nil)
              ((""
                (name-replace "ipc_receiver_ready_change_state"
                 "ipc_receiver_ready_change(state_old!1`this,
                                                 receiver!1,
                                                 IF NOT
                                                    state_old!1`receiver_initialized
                                                 THEN prepare_receive_dirty_state
                                                      WITH [(receiver_initialized)
                                                            := TRUE]
                                                 ELSE state_old!1
                                                 ENDIF)" :hide? nil)
                ((""
                  (case "prepare_receive_dirty_state`assertions_held")
                  (("1"
                    (case "ipc_receiver_ready_change_state`assertions_held")
                    (("1" (assert)
                      (("1"
                        (case-replace
                         "state_old!1`receiver_initialized")
                        (("1" (assert) nil nil)
                         ("2" (rewrite 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "ipc_receiver_ready_change")
                        (("2" (expand "ipc_init")
                          (("2" (expand "set_partner")
                            (("2"
                              (name-replace "state_add_dirty_state"
                               "state_add_dirty
                                      (receiver!1,
                                       TS_empty
                                       WITH [thread_transfer_in_progress
                                             := TRUE],
                                       IF NOT
                                          state_old!1`receiver_initialized
                                       THEN prepare_receive_dirty_state
                                            WITH [(receiver_initialized)
                                                  := TRUE]
                                       ELSE state_old!1
                                       ENDIF
                                       WITH [(threads)(receiver!1)`partner
                                             := state_old!1`this])"
                               :hide? nil)
                              (("2"
                                (name-replace
                                 "state_add_dirty_state2"
                                 "state_add_dirty(state_old!1`this,
                                      TS_empty
                                      WITH [thread_ready := TRUE,
                                            thread_transfer_in_progress
                                            := TRUE],
                                      state_add_dirty_state)"
                                 :hide?
                                 nil)
                                (("2"
                                  (expand "state_del_dirty")
                                  (("2"
                                    (expand "state_add_dirty")
                                    (("2"
                                      (expand "TS_empty")
                                      (("2"
                                        (case-replace
                                         "state_old!1`receiver_initialized")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 -3 1))
                    (("2" (expand "prepare_receive_dirty")
                      (("2" (expand "set_partner")
                        (("2" (expand "state_change_dirty")
                          (("2" (expand "TS_full")
                            (("2" (expand "TS_empty")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((receiver_ready const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (prepare_receive_dirty const-decl "System_state" fiasco_functions
     nil)
    (Receiver_partner_thread const-decl "Thread_pointer" fiasco_types
     nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ipc_receiver_ready_change const-decl "System_state"
     fiasco_functions nil)
    (sender_dequeue_head const-decl "System_state" fiasco_functions
     nil))
   2143 1300 t shostak))
 (preemption_point_actions_assertions_held 0
  (preemption_point_actions_assertions_held-1 nil 3388827888 3388828136
   ("" (induct "actions")
    (("1" (skolem!)
      (("1" (ground)
        (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (expand "preemption_point_actions")
        (("2" (flatten) nil nil)) nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "preemption_point_actions" +)
        (("3" (inst?)
          (("3" (expand "sys_thread_ex_regs")
            (("3" (lemma "receiver_ready_assertions_held")
              (("3" (lemma "kill_assertions_held")
                (("3" (lemma "timeout_assertions_held")
                  (("3" (inst -1 "state_old!1")
                    (("3" (inst -2 "partner!1" "state_old!1")
                      (("3"
                        (inst -3 "state_old!1`this" "partner!1"
                         "state_old!1")
                        (("3" (assert)
                          (("3" (replace -5)
                            (("3" (replace -1 * rl)
                              (("3"
                                (replace -2 * rl)
                                (("3"
                                  (replace -3 * rl)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sys_thread_ex_regs? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Sys_thread_ex_regs adt-constructor-decl "(Sys_thread_ex_regs?)"
     fiasco_types nil)
    (sys_thread_ex_regs const-decl "System_state" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Timeout? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Timeout adt-constructor-decl "(Timeout?)" fiasco_types nil)
    (timeout const-decl "System_state" fiasco_functions nil)
    (Kill? adt-recognizer-decl "[Preemption_action -> boolean]"
     fiasco_types nil)
    (Kill adt-constructor-decl "(Kill?)" fiasco_types nil)
    (kill const-decl "System_state" fiasco_functions nil)
    (Receiver_ready? adt-recognizer-decl
     "[Preemption_action -> boolean]" fiasco_types nil)
    (Receiver_ready adt-constructor-decl "(Receiver_ready?)"
     fiasco_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (receiver_ready const-decl "System_state" fiasco_functions nil)
    (receiver_ready_assertions_held formula-decl nil fiasco_assert nil)
    (timeout_assertions_held formula-decl nil fiasco_assert nil)
    (kill_assertions_held formula-decl nil fiasco_assert nil)
    (list_induction formula-decl nil list_adt nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (preemption_point_actions def-decl "System_state" fiasco_functions
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   248263 550 t shostak))
 (preemption_point_assertions_held 0
  (preemption_point_assertions_held-1 nil 3377371611 3388828166
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "preemption_point")
          (("" (lemma "preemption_point_actions_assertions_held")
            (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((preemption_point const-decl "System_state" fiasco_functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (list type-decl nil list_adt nil)
    (Preemption_actions type-eq-decl nil fiasco_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preemption_action const-decl "Preemption_actions" fiasco_functions
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point_actions_assertions_held formula-decl nil
     fiasco_assert nil))
   17380 150 t shostak))
 (abort_send_assertions_held 0
  (abort_send_assertions_held-1 nil 3383634455 3377630455
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "abort_send")
          (("" (expand "sender_dequeue")
            (("" (expand "state_del_dirty")
              (("" (expand "TS_empty")
                (("" (expand "clear_dirty")
                  (("" (lemma "preemption_point_assertions_held")
                    (("" (lemma "preemption_point_assertions_held")
                      (("" (inst?)
                        ((""
                          (inst -2 " partner!1" "TRUE"
                           "IF in_sender_list(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_old!1
                                          WITH [(threads)
                                                (state_old!1`this)
                                                `state
                                                := state_old!1`threads
                                                   (state_old!1`this)`state
                                                   WITH [thread_ready
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_ready,
                                                         thread_cancel
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_cancel,
                                                         thread_dead
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_dead,
                                                         thread_busy
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_busy,
                                                         thread_invalid
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_invalid,
                                                         thread_polling
                                                         := FALSE,
                                                         thread_receiving
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_receiving,
                                                         thread_ipc_in_progress
                                                         := FALSE,
                                                         thread_send_in_progress
                                                         := FALSE,
                                                         thread_transfer_in_progress
                                                         := FALSE]]))
                         THEN preemption_point(partner!1,
                                               FALSE,
                                               state_old!1
                                               WITH [(threads)
                                                     (state_old!1`this)
                                                     `state
                                                     := state_old!1`threads
                                                        (state_old!1`this)`state
                                                        WITH [thread_ready
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_ready,
                                                              thread_cancel
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_cancel,
                                                              thread_dead
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_dead,
                                                              thread_busy
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_busy,
                                                              thread_invalid
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_invalid,
                                                              thread_polling
                                                              := FALSE,
                                                              thread_receiving
                                                              := state_old!1`threads
                                                                 (state_old!1`this)`state`thread_receiving,
                                                              thread_ipc_in_progress
                                                              := FALSE,
                                                              thread_send_in_progress
                                                              := FALSE,
                                                              thread_transfer_in_progress
                                                              := FALSE]])
                                WITH [(threads)(partner!1)`sender_list
                                      := Dequeued]
                       ELSE preemption_point(partner!1,
                                             FALSE,
                                             state_old!1
                                             WITH [(threads)
                                                   (state_old!1`this)
                                                   `state
                                                   := state_old!1`threads
                                                      (state_old!1`this)`state
                                                      WITH [thread_ready
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_ready,
                                                            thread_cancel
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_cancel,
                                                            thread_dead
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_dead,
                                                            thread_busy
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_busy,
                                                            thread_invalid
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_invalid,
                                                            thread_polling
                                                            := FALSE,
                                                            thread_receiving
                                                            := state_old!1`threads
                                                               (state_old!1`this)`state`thread_receiving,
                                                            thread_ipc_in_progress
                                                            := FALSE,
                                                            thread_send_in_progress
                                                            := FALSE,
                                                            thread_transfer_in_progress
                                                            := FALSE]])
                       ENDIF")
                          ((""
                            (case-replace "in_sender_list(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_old!1
                                          WITH [(threads)
                                                (state_old!1`this)
                                                `state
                                                := state_old!1`threads
                                                   (state_old!1`this)`state
                                                   WITH [thread_ready
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_ready,
                                                         thread_cancel
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_cancel,
                                                         thread_dead
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_dead,
                                                         thread_busy
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_busy,
                                                         thread_invalid
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_invalid,
                                                         thread_polling
                                                         := FALSE,
                                                         thread_receiving
                                                         := state_old!1`threads
                                                            (state_old!1`this)`state`thread_receiving,
                                                         thread_ipc_in_progress
                                                         := FALSE,
                                                         thread_send_in_progress
                                                         := FALSE,
                                                         thread_transfer_in_progress
                                                         := FALSE]]))")
                            (("1" (assert) (("1" (assert) nil nil))
                              nil)
                             ("2" (assert) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((abort_send const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (FALSE const-decl "bool" booleans nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil))
   2902 2110 t shostak))
 (do_send_wait_finish_assertions_held 0
  (do_send_wait_finish_assertions_held-3 nil 3386578294 3377630463
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state" "preemption_point
                                            (partner!1,
                                             FALSE,
                                             IF state_old!1`timeout
                                             THEN state_add_dirty
                                                  (state_old!1`this,
                                                   TS_empty
                                                   WITH [thread_ipc_in_progress
                                                         := TRUE],
                                                   state_old!1)
                                             ELSE state_old!1
                                             ENDIF)" :hide? nil)
            ((""
              (name-replace "preemption_point_state2" "preemption_point
                                          (partner!1,
                                           FALSE,
                                           sender_dequeue
                                           (partner!1,
                                            preemption_point_state))"
               :hide? nil)
              ((""
                (name-replace "state_del_dirty_state"
                 "state_del_dirty(preemption_point_state2`this,
                                             TS_empty
                                             WITH [thread_polling := TRUE],
                                             preemption_point_state2)"
                 :hide? nil)
                (("" (lemma "abort_send_assertions_held")
                  (("" (lemma "preemption_point_assertions_held")
                    (("" (lemma "preemption_point_assertions_held")
                      (("" (inst?)
                        ((""
                          (inst -2 "partner!1" "FALSE"
                           "IF state_old!1`timeout
                             THEN state_add_dirty(state_old!1`this,
                                                  TS_empty
                                                  WITH [thread_ipc_in_progress
                                                        := TRUE],
                                                  state_old!1)
                           ELSE state_old!1
                           ENDIF")
                          (("" (lemma "sender_dequeue_assertions_held")
                            (("" (inst?)
                              ((""
                                (name-replace
                                 "state_add_dirty_state"
                                 "state_add_dirty(state_old!1`this,
                                   TS_empty
                                     WITH [thread_ipc_in_progress := TRUE],
                                   state_old!1)"
                                 :hide?
                                 nil)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "state_del_dirty")
                                    ((""
                                      (expand "TS_empty")
                                      ((""
                                        (name-replace
                                         "state_change_dirty_state"
                                         "state_change_dirty(partner!1,
                                                    TS_full
                                                    WITH [thread_ipc_in_progress
                                                          := FALSE],
                                                    TS
                                                    WITH [thread_ready := TRUE,
                                                          thread_cancel
                                                          := TRUE,
                                                          thread_dead := FALSE,
                                                          thread_busy := FALSE,
                                                          thread_invalid
                                                          := FALSE,
                                                          thread_polling
                                                          := FALSE,
                                                          thread_receiving
                                                          := FALSE,
                                                          thread_ipc_in_progress
                                                          := FALSE,
                                                          thread_send_in_progress
                                                          := FALSE,
                                                          thread_transfer_in_progress
                                                          := FALSE],
                                                    state_del_dirty_state)"
                                         :hide?
                                         nil)
                                        ((""
                                          (expand "state_change_dirty")
                                          ((""
                                            (expand "TS_full")
                                            ((""
                                              (case
                                               "state_add_dirty_state`assertions_held")
                                              (("1"
                                                (beta)
                                                (("1"
                                                  (case
                                                   "state_del_dirty_state`assertions_held")
                                                  (("1"
                                                    (case
                                                     "state_change_dirty_state`assertions_held")
                                                    (("1"
                                                      (case-replace
                                                       "state_del_dirty_state`threads
                     (state_del_dirty_state`this)`state`thread_cancel")
                                                      (("1"
                                                        (case-replace
                                                         "in_ipc(state_del_dirty_state`this, partner!1,
                              state_del_dirty_state)")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             -3)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite 1)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (rewrite
                                                               -3)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite 1)
                                                        (("2"
                                                          (case-replace
                                                           "in_ipc(state_del_dirty_state`this, partner!1,
                              state_del_dirty_state)")
                                                          (("1"
                                                            (case-replace
                                                             "state_del_dirty_state`threads(partner!1)`state`thread_dead")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (rewrite
                                                                 -4)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "in_sender_list")
                                                                (("2"
                                                                  (case
                                                                   "state_del_dirty_state`threads(partner!1)`sender_list = Dequeued")
                                                                  (("1"
                                                                    (rewrite
                                                                     -4)
                                                                    (("1"
                                                                      (rewrite
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "preemption_point_state2`threads(preemption_point_state2`this)`state`thread_ipc_in_progress")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -13
                                                                           -9
                                                                           -8
                                                                           -7
                                                                           -6
                                                                           -3
                                                                           -2
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "sender_dequeue")
                                                                            (("2"
                                                                              (lemma
                                                                               "preemption_point_this_unchanged")
                                                                              (("2"
                                                                                (lemma
                                                                                 "preemption_point_this_unchanged")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "partner!1"
                                                                                   "FALSE"
                                                                                   "preemption_point_state
                                           WITH [(threads)(partner!1)`sender_list
                                                   := Dequeued]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "partner!1"
                                                                                     "FALSE"
                                                                                     "IF state_old!1`timeout THEN state_add_dirty_state
                                         ELSE state_old!1
                                         ENDIF")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -7
                                                                                         *)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           *
                                                                                           rl)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "partner!1"
                                                                                                 "preemption_point_state
                                           WITH [(threads)(partner!1)`sender_list
                                                   := Dequeued]")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "partner!1"
                                                                                                   "IF state_old!1`timeout THEN state_add_dirty_state
                                         ELSE state_old!1
                                         ENDIF")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "state_old!1`timeout")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "state_old!1`this = partner!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "state_old!1`this = partner!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "sender_dequeue")
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -14
                                                                       -15
                                                                       -10
                                                                       -9
                                                                       -8
                                                                       -7)
                                                                      (("2"
                                                                        (lemma
                                                                         "preemption_point_dequeued_unchanged")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "partner!1"
                                                                           "FALSE"
                                                                           "preemption_point_state
                                         WITH [(threads)(partner!1)`sender_list
                                                 := Dequeued]")
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             +
                                                                             rl
                                                                             :hide?
                                                                             T)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "preemption_point_state2`threads(partner!1)`sender_list = Dequeued")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -6
                                                                                    1))
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "partner!1 = preemption_point_state2`this")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -5
                                                                                    -1))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     *
                                                                                     rl
                                                                                     :hide?
                                                                                     T)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite 1)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (rewrite
                                                                 -2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -13)
                                                      (("2"
                                                        (case-replace
                                                         "state_old!1`timeout")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3 -12)
                                                    (("2"
                                                      (case-replace
                                                       "state_old!1`timeout")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 -10 -2))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged formula-decl
     nil fiasco_state nil)
    (preemption_point_dequeued_unchanged formula-decl nil
     fiasco_helpers nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS const-decl "Thread_state" fiasco_types nil)
    (sender_dequeue_assertions_held formula-decl nil fiasco_assert nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   7172 5210 t nil)
  (do_send_wait_finish_assertions_held-2 nil 3386574811 3386578179
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state" "preemption_point
                                          (partner!1,
                                           FALSE,
                                           IF state_old!1`timeout
                                           THEN state_add_dirty
                                                (state_old!1`this,
                                                 TS_empty
                                                 WITH [thread_ipc_in_progress
                                                       := TRUE],
                                                 state_old!1)
                                           ELSE state_old!1
                                           ENDIF)" :hide? nil)
            ((""
              (name-replace "preemption_point_state2" "preemption_point
                                        (partner!1,
                                         FALSE,
                                         sender_dequeue
                                         (partner!1,
                                          preemption_point_state))"
               :hide? nil)
              ((""
                (name-replace "state_del_dirty_state"
                 "state_del_dirty(preemption_point_state2`this,
                                           TS_empty
                                           WITH [thread_polling := TRUE],
                                           preemption_point_state2)"
                 :hide? nil)
                (("" (lemma "abort_send_assertions_held")
                  (("" (lemma "preemption_point_assertions_held")
                    (("" (lemma "preemption_point_assertions_held")
                      (("" (inst?)
                        ((""
                          (inst -2 "partner!1" "FALSE"
                           "IF state_old!1`timeout
                           THEN state_add_dirty(state_old!1`this,
                                                TS_empty
                                                WITH [thread_ipc_in_progress
                                                      := TRUE],
                                                state_old!1)
                         ELSE state_old!1
                         ENDIF")
                          (("" (lemma "sender_dequeue_assertions_held")
                            (("" (inst?)
                              ((""
                                (name-replace
                                 "state_add_dirty_state"
                                 "state_add_dirty(state_old!1`this,
                                 TS_empty
                                   WITH [thread_ipc_in_progress := TRUE],
                                 state_old!1)"
                                 :hide?
                                 nil)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "state_del_dirty")
                                    ((""
                                      (expand "TS_empty")
                                      ((""
                                        (name-replace
                                         "state_change_dirty_state"
                                         "state_change_dirty(partner!1,
                                                  TS_full
                                                  WITH [thread_ipc_in_progress
                                                        := FALSE],
                                                  TS
                                                  WITH [thread_ready := TRUE,
                                                        thread_cancel
                                                        := TRUE,
                                                        thread_dead := FALSE,
                                                        thread_busy := FALSE,
                                                        thread_invalid
                                                        := FALSE,
                                                        thread_polling
                                                        := FALSE,
                                                        thread_receiving
                                                        := FALSE,
                                                        thread_ipc_in_progress
                                                        := FALSE,
                                                        thread_send_in_progress
                                                        := FALSE,
                                                        thread_transfer_in_progress
                                                        := FALSE],
                                                  state_del_dirty_state)"
                                         :hide?
                                         nil)
                                        ((""
                                          (expand "state_change_dirty")
                                          ((""
                                            (expand "TS_full")
                                            ((""
                                              (case
                                               "state_add_dirty_state`assertions_held")
                                              (("1"
                                                (beta)
                                                (("1"
                                                  (case
                                                   "state_del_dirty_state`assertions_held")
                                                  (("1"
                                                    (case
                                                     "state_change_dirty_state`assertions_held")
                                                    (("1"
                                                      (case-replace
                                                       "state_del_dirty_state`threads
             (state_del_dirty_state`this)`state`thread_cancel")
                                                      (("1"
                                                        (case-replace
                                                         "in_ipc(state_del_dirty_state`this, partner!1,
                    state_del_dirty_state)")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             -3)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite 1)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (rewrite
                                                               -3)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite 1)
                                                        (("2"
                                                          (case-replace
                                                           "in_ipc(state_del_dirty_state`this, partner!1,
                    state_del_dirty_state)")
                                                          (("1"
                                                            (case-replace
                                                             "state_del_dirty_state`threads(partner!1)`state`thread_dead")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (rewrite
                                                                 -4)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "in_sender_list")
                                                                (("2"
                                                                  (case
                                                                   "state_del_dirty_state`threads(partner!1)`sender_list = Dequeued")
                                                                  (("1"
                                                                    (rewrite
                                                                     -4)
                                                                    (("1"
                                                                      (rewrite
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "preemption_point_state2`threads(preemption_point_state2`this)`state`thread_ipc_in_progress")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -13
                                                                           -9
                                                                           -8
                                                                           -7
                                                                           -6
                                                                           -3
                                                                           -2
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "sender_dequeue")
                                                                            (("2"
                                                                              (lemma
                                                                               "preemption_point_this_unchanged")
                                                                              (("2"
                                                                                (lemma
                                                                                 "preemption_point_this_unchanged")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "partner!1"
                                                                                   "FALSE"
                                                                                   "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "partner!1"
                                                                                     "FALSE"
                                                                                     "IF state_old!1`timeout THEN state_add_dirty_state
                       ELSE state_old!1
                       ENDIF")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -7
                                                                                         *)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           *
                                                                                           rl)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "partner!1"
                                                                                                 "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "partner!1"
                                                                                                   "IF state_old!1`timeout THEN state_add_dirty_state
                       ELSE state_old!1
                       ENDIF")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "state_old!1`timeout")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "sender_dequeue")
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -14
                                                                         -15
                                                                         -10
                                                                         -9
                                                                         -8
                                                                         -7)
                                                                        (("2"
                                                                          (lemma
                                                                           "preemption_point_dequeued_unchanged")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "partner!1"
                                                                             "FALSE"
                                                                             "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                            (("2"
                                                                              (replace
                                                                               -5
                                                                               +
                                                                               rl
                                                                               :hide?
                                                                               T)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "preemption_point_state2`threads(partner!1)`sender_list = Dequeued")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -6
                                                                                      1))
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "partner!1 = preemption_point_state2`this")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -5
                                                                                      -1))
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       *
                                                                                       rl
                                                                                       :hide?
                                                                                       T)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite 1)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (rewrite
                                                                 -2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -13)
                                                      (("2"
                                                        (case-replace
                                                         "state_old!1`timeout")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3 -12)
                                                    (("2"
                                                      (case-replace
                                                       "state_old!1`timeout")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 -10 -2))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (TRUE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (sender_dequeue_assertions_held formula-decl nil fiasco_assert nil)
    (TS const-decl "Thread_state" fiasco_types nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (preemption_point_dequeued_unchanged formula-decl nil
     fiasco_helpers nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged formula-decl
     nil fiasco_state nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (do_send_wait_finish const-decl "System_state" fiasco_functions
     nil))
   3365905 26400 t nil)
  (do_send_wait_finish_assertions_held-1 nil 3383632897 3386574702
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_finish")
          ((""
            (name-replace "preemption_point_state" "preemption_point
                                        (partner!1,
                                         FALSE,
                                         IF state_old!1`timeout
                                         THEN state_add_dirty
                                              (state_old!1`this,
                                               TS_empty
                                               WITH [thread_ipc_in_progress
                                                     := TRUE],
                                               state_old!1)
                                         ELSE state_old!1
                                         ENDIF)" :hide? nil)
            ((""
              (name-replace "preemption_point_state2" "preemption_point
                                      (partner!1,
                                       FALSE,
                                       sender_dequeue
                                       (partner!1,
                                        preemption_point_state))"
               :hide? nil)
              ((""
                (name-replace "state_del_dirty_state"
                 "state_del_dirty(preemption_point_state2`this,
                                         TS_empty
                                         WITH [thread_polling := TRUE],
                                         preemption_point_state2)"
                 :hide? nil)
                (("" (lemma "abort_send_assertions_held")
                  (("" (lemma "preemption_point_assertions_held")
                    (("" (lemma "preemption_point_assertions_held")
                      (("" (inst?)
                        ((""
                          (inst -2 "partner!1" "FALSE"
                           "IF state_old!1`timeout
                         THEN state_add_dirty(state_old!1`this,
                                              TS_empty
                                              WITH [thread_ipc_in_progress
                                                    := TRUE],
                                              state_old!1)
                       ELSE state_old!1
                       ENDIF")
                          (("" (lemma "sender_dequeue_assertions_held")
                            (("" (inst?)
                              ((""
                                (name-replace
                                 "state_add_dirty_state"
                                 "state_add_dirty(state_old!1`this,
                               TS_empty
                                 WITH [thread_ipc_in_progress := TRUE],
                               state_old!1)"
                                 :hide?
                                 nil)
                                ((""
                                  (expand "state_add_dirty")
                                  ((""
                                    (expand "state_del_dirty")
                                    ((""
                                      (expand "TS_empty")
                                      ((""
                                        (name-replace
                                         "state_change_dirty_state"
                                         "state_change_dirty(partner!1,
                                                TS_full
                                                WITH [thread_ipc_in_progress
                                                      := FALSE],
                                                TS
                                                WITH [thread_ready := TRUE,
                                                      thread_cancel
                                                      := TRUE,
                                                      thread_dead := FALSE,
                                                      thread_busy := FALSE,
                                                      thread_invalid
                                                      := FALSE,
                                                      thread_polling
                                                      := FALSE,
                                                      thread_receiving
                                                      := FALSE,
                                                      thread_ipc_in_progress
                                                      := FALSE,
                                                      thread_send_in_progress
                                                      := FALSE,
                                                      thread_transfer_in_progress
                                                      := FALSE],
                                                state_del_dirty_state)"
                                         :hide?
                                         nil)
                                        ((""
                                          (expand "state_change_dirty")
                                          ((""
                                            (expand "TS_full")
                                            ((""
                                              (case-replace
                                               "state_del_dirty_state`threads
             (state_del_dirty_state`this)`state`thread_cancel")
                                              (("1"
                                                (case-replace
                                                 "in_ipc(state_del_dirty_state`this, partner!1,
                    state_del_dirty_state)")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (case-replace
                                                     "state_old!1`timeout")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite 1)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         " state_old!1`timeout")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite 1)
                                                (("2"
                                                  (case-replace
                                                   "in_ipc(state_del_dirty_state`this, partner!1,
                    state_del_dirty_state)")
                                                  (("1"
                                                    (case-replace
                                                     "state_del_dirty_state`threads(partner!1)`state`thread_dead")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           " state_old!1`timeout")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite 1)
                                                      (("2"
                                                        (expand
                                                         "sender_dequeue")
                                                        (("2"
                                                          (hide -7)
                                                          (("2"
                                                            (expand
                                                             "in_sender_list")
                                                            (("2"
                                                              (case
                                                               " state_del_dirty_state`this = state_old!1`this")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 *)
                                                                (("1"
                                                                  (lemma
                                                                   "preemption_point_dequeued_unchanged")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "partner!1"
                                                                     "FALSE"
                                                                     "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                    (("1"
                                                                      (lemma
                                                                       "preemption_point_this_unchanged")
                                                                      (("1"
                                                                        (lemma
                                                                         "preemption_point_this_unchanged")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "partner!1"
                                                                             "FALSE"
                                                                             " IF state_old!1`timeout THEN state_add_dirty_state
                       ELSE state_old!1
                       ENDIF")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "preemption_point_dequeued_unchanged")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "partner!1"
                                                                                   "FALSE"
                                                                                   "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "preemption_point_no_timeout_ipc_in_progress_unchanged")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "partner!1"
                                                                                         "IF state_old!1`timeout THEN state_add_dirty_state
                       ELSE state_old!1
                       ENDIF")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "partner!1"
                                                                                           "preemption_point_state
                         WITH [(threads)(partner!1)`sender_list
                                 := Dequeued]")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "state_old!1`timeout")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -7
                                                                  -8
                                                                  -9
                                                                  -3))
                                                                (("2"
                                                                  (lemma
                                                                   "preemption_point_this_unchanged")
                                                                  (("2"
                                                                    (lemma
                                                                     "preemption_point_this_unchanged")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "partner!1"
                                                                         "FALSE"
                                                                         "IF state_old!1`timeout THEN state_add_dirty_state
                       ELSE state_old!1
                       ENDIF")
                                                                        (("2"
                                                                          (case-replace
                                                                           "state_old!1`timeout")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case-replace
                                                           "state_old!1`timeout")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((do_send_wait_finish const-decl "System_state" fiasco_functions
     nil)
    (sender_dequeue const-decl "System_state" fiasco_functions nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (preemption_point_dequeued_unchanged formula-decl nil
     fiasco_helpers nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged formula-decl
     nil fiasco_state nil)
    (Sender_list type-decl nil fiasco_types nil)
    (Dequeued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Dequeued adt-constructor-decl "(Dequeued?)" fiasco_types nil)
    (in_sender_list const-decl "bool" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (TS_full const-decl "Thread_state" fiasco_states nil)
    (TS const-decl "Thread_state" fiasco_types nil)
    (sender_dequeue_assertions_held formula-decl nil fiasco_assert nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Preemption_action type-decl nil fiasco_types nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   83477 24070 t shostak))
 (do_send_wait_loop_assertions_held 0
  (do_send_wait_loop_assertions_held-3 nil 3388817710 3388817816
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_loop")
          (("" (expand "clear_dirty")
            (("" (expand "lock_dirty")
              ((""
                (name-replace "preemption_point_state" "preemption_point
                                                    (partner!1,
                                                     TRUE,
                                                     state_old!1
                                                     WITH [(threads)
                                                           (partner!1)
                                                           `thread_lock
                                                           := Zero_thread])"
                 :hide? nil)
                (("" (lemma "preemption_point_this_unchanged")
                  (("" (inst?)
                    (("" (assert)
                      (("" (lemma "preemption_point_assertions_held")
                        (("" (inst?)
                          (("" (assert)
                            ((""
                              (case-replace
                               "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_cancel")
                              (("1"
                                (lemma
                                 "do_send_wait_finish_assertions_held")
                                (("1"
                                  (inst
                                   -1
                                   "partner!1"
                                   " preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "preemption_point_state`timeout")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "state_old!1`this = partner!1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "state_old!1`this = partner!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite 1)
                                (("2"
                                  (case-replace
                                   "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_transfer_in_progress")
                                  (("1"
                                    (lemma
                                     "do_send_wait_finish_assertions_held")
                                    (("1"
                                      (inst
                                       -1
                                       "partner!1"
                                       "preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "preemption_point_state`timeout")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case-replace
                                               "state_old!1`this = partner!1")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "state_old!1`this = partner!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "not_transfer_in_progress_not_in_ipc")
                                      (("2"
                                        (case-replace
                                         "preemption_point_state`threads
           WITH [(partner!1)`thread_lock := preemption_point_state`this]
             (preemption_point_state`this)`state`thread_cancel")
                                        (("1"
                                          (lemma
                                           "do_send_wait_finish_assertions_held")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "preemption_point_state`timeout")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     " preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -6
                                                           *)
                                                          (("1"
                                                            (replace
                                                             -5
                                                             *
                                                             rl)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (case-replace
                                                                 " state_old!1`this = partner!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "preemption_point_state`threads
            WITH [(partner!1)`thread_lock := preemption_point_state`this]
              (preemption_point_state`this)`state`thread_transfer_in_progress")
                                          (("1"
                                            (hide-all-but (-1 1))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case-replace
                                                 " preemption_point_state`this = partner!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "preemption_point_state`timeout")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "abort_send_assertions_held")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               *)
                                                              (("1"
                                                                (case
                                                                 " in_ipc(preemption_point_state`this, partner!1,
                 preemption_point_state
                   WITH [(threads)(partner!1)`thread_lock
                           := preemption_point_state`this])")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (3
                                                                    -1
                                                                    -6))
                                                                  (("1"
                                                                    (expand
                                                                     "in_ipc")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "preemption_point_state`threads
            WITH [(partner!1)`thread_lock := preemption_point_state`this]
              (preemption_point_state`this)`state`thread_ipc_in_progress")
                                                                    (("1"
                                                                      (lemma
                                                                       "preemption_point_timeout_not_thread_ipc_in_progress")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           *)
                                                                          (("1"
                                                                            (beta)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (6
                                                                                -4
                                                                                -2
                                                                                -1))
                                                                              (("1"
                                                                                (replace
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     "state_old!1`this = partner!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "preemption_point_state`threads(partner!1)`state`thread_dead")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "partner!1"
                                                       "preemption_point_state")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "abort_send_assertions_held")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (case
                                                               "NOT in_ipc(preemption_point_state`this,
                                         partner!1,
                                         preemption_point_state
                                         WITH [(threads)
                                               (partner!1)
                                               `thread_lock
                                               := preemption_point_state`this])")
                                                              (("1"
                                                                (replace
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (4
                                                                  -1))
                                                                (("2"
                                                                  (expand
                                                                   "in_ipc")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "state_add_dirty")
                                                      (("2"
                                                        (expand
                                                         "TS_empty")
                                                        (("2"
                                                          (case
                                                           "NOT
                                       in_ipc
                                       (preemption_point_state`this,
                                        partner!1,
                                        preemption_point_state
                                        WITH [(threads)
                                              (partner!1)
                                              `thread_lock
                                              := preemption_point_state`this])")
                                                          (("1"
                                                            (case
                                                             "preemption_point_state`threads
                                       WITH [(partner!1)`thread_lock
                                             := preemption_point_state`this]
                                       (preemption_point_state`this)`state`thread_ipc_in_progress")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "do_send_wait_finish_assertions_held")
                                                                (("1"
                                                                  (name-replace
                                                                   "do_send_wait_finish_input"
                                                                   "preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this,
                                  (assertions_held) := TRUE,
                                  (threads)(preemption_point_state`this)
                                             `state
                                    := preemption_point_state`threads
                                       WITH [(partner!1)`thread_lock
                                             := preemption_point_state`this]
                                       (preemption_point_state`this)`state
                                       WITH [thread_ready
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_ready,
                                             thread_cancel := FALSE,
                                             thread_dead
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_dead,
                                             thread_busy
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_busy,
                                             thread_invalid
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_invalid,
                                             thread_polling := TRUE,
                                             thread_receiving
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_receiving,
                                             thread_ipc_in_progress
                                             := TRUE,
                                             thread_send_in_progress
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_send_in_progress,
                                             thread_transfer_in_progress
                                             := FALSE]]"
                                                                   :hide?
                                                                   nil)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (case
                                                                       "do_send_wait_finish_input`assertions_held")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (beta)
                                                                          (("1"
                                                                            (case
                                                                             "do_send_wait_finish_input`threads
            (do_send_wait_finish_input`this)`state`thread_ipc_in_progress")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -4
                                                                                -2))
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 *
                                                                                 rl
                                                                                 :hide?
                                                                                 T)
                                                                                (("2"
                                                                                  (beta)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "preemption_point_state`this = partner!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -5
                                                                          1))
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                4
                                                                8
                                                                -6
                                                                -4
                                                                -3))
                                                              (("2"
                                                                (lemma
                                                                 "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case-replace
                                                                       "state_old!1`this = partner!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -4
                                                              -5
                                                              3))
                                                            (("2"
                                                              (replace
                                                               -4
                                                               *)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 *
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "partner!1"
                                                                   "preemption_point_state")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       *
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "in_ipc")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((clear_dirty const-decl "System_state" fiasco_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (FALSE const-decl "bool" booleans nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (preemption_point_timeout_not_thread_ipc_in_progress formula-decl
     nil fiasco_state nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (not_transfer_in_progress_not_in_ipc formula-decl nil fiasco_state
     nil)
    (do_send_wait_finish_assertions_held formula-decl nil fiasco_assert
     nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged2
     formula-decl nil fiasco_state nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (do_send_wait_loop const-decl "System_state" fiasco_functions nil))
   104067 4080 nil nil)
  (do_send_wait_loop_assertions_held-2 nil 3388817520 nil
   (";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
    (skolem!)
    ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
      (ground)
      ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
        (flatten)
        ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
          (name-replace "sys_ipc_state"
           "sys_ipc(have_send!1, partner!1, have_receive!1, sender!1, state_old!1)"
           :hide? nil)
          ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
            (expand "sys_ipc")
            ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
              (expand "do_ipc")
              ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
                (expand "do_ipc_receive_part")
                ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
                  (lemma "do_ipc_send_part_not_polling")
                  ((";;; Proof sys_ipc_not_polling-2 for formula fiasco_state.sys_ipc_not_polling"
                    (case-replace "have_send!1")
                    (("1" (case-replace "have_receive!1")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "do_ipc_send_part(partner!1, TRUE,
                                          state_old!1
                                            WITH [(error) := FALSE,
                                                  (timeout) := FALSE,
                                                  (handshake_attempted) := FALSE,
                                                  (assertions_held) := TRUE,
                                                  (receiver_initialized) := FALSE])`error")
                          (("1" (inst?) (("1" (assert) nil)))
                           ("2" (assert)
                            (("2" (inst?) (("2" (assert) nil)))))))))
                       ("2" (assert)
                        (("2" (inst?) (("2" (assert) nil)))))))
                     ("2" (assert)
                      (("2" (case-replace "have_receive!1")
                        (("1" (assert) nil)
                         ("2" (assert) nil))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil nil nil nil nil)
  (do_send_wait_loop_assertions_held-1 nil 3383632776 3377630468
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait_loop")
          (("" (expand "clear_dirty")
            (("" (expand "lock_dirty")
              ((""
                (name-replace "preemption_point_state" "preemption_point
                                                    (partner!1,
                                                     TRUE,
                                                     state_old!1
                                                     WITH [(threads)
                                                           (partner!1)
                                                           `thread_lock
                                                           := Zero_thread])"
                 :hide? nil)
                (("" (lemma "preemption_point_this_unchanged")
                  (("" (inst?)
                    (("" (assert)
                      (("" (lemma "preemption_point_assertions_held")
                        (("" (inst?)
                          (("" (assert)
                            ((""
                              (case-replace
                               "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_cancel")
                              (("1"
                                (lemma
                                 "do_send_wait_finish_assertions_held")
                                (("1"
                                  (inst
                                   -1
                                   "partner!1"
                                   " preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "preemption_point_state`timeout")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "state_old!1`this = partner!1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "state_old!1`this = partner!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite 1)
                                (("2"
                                  (case-replace
                                   "preemption_point_state`threads
             (preemption_point_state`this)`state`thread_transfer_in_progress")
                                  (("1"
                                    (lemma
                                     "do_send_wait_finish_assertions_held")
                                    (("1"
                                      (inst
                                       -1
                                       "partner!1"
                                       "preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "preemption_point_state`timeout")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case-replace
                                               "state_old!1`this = partner!1")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "state_old!1`this = partner!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "not_transfer_in_progress_not_in_ipc")
                                      (("2"
                                        (case-replace
                                         "preemption_point_state`threads
           WITH [(partner!1)`thread_lock := preemption_point_state`this]
             (preemption_point_state`this)`state`thread_cancel")
                                        (("1"
                                          (lemma
                                           "do_send_wait_finish_assertions_held")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "preemption_point_state`timeout")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     " preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -6
                                                           *)
                                                          (("1"
                                                            (replace
                                                             -5
                                                             *
                                                             rl)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (case-replace
                                                                 " state_old!1`this = partner!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "preemption_point_state`threads
            WITH [(partner!1)`thread_lock := preemption_point_state`this]
              (preemption_point_state`this)`state`thread_transfer_in_progress")
                                          (("1"
                                            (hide-all-but (-1 1))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case-replace
                                                 " preemption_point_state`this = partner!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "preemption_point_state`timeout")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "abort_send_assertions_held")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               *)
                                                              (("1"
                                                                (case
                                                                 " in_ipc(preemption_point_state`this, partner!1,
                 preemption_point_state
                   WITH [(threads)(partner!1)`thread_lock
                           := preemption_point_state`this])")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (3
                                                                    -1
                                                                    -6))
                                                                  (("1"
                                                                    (expand
                                                                     "in_ipc")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "preemption_point_state`threads
            WITH [(partner!1)`thread_lock := preemption_point_state`this]
              (preemption_point_state`this)`state`thread_ipc_in_progress")
                                                                    (("1"
                                                                      (lemma
                                                                       "preemption_point_timeout_not_thread_ipc_in_progress")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           *)
                                                                          (("1"
                                                                            (beta)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (6
                                                                                -4
                                                                                -2
                                                                                -1))
                                                                              (("1"
                                                                                (replace
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     "state_old!1`this = partner!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "preemption_point_state`threads(partner!1)`state`thread_dead")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "partner!1"
                                                       "preemption_point_state")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "abort_send_assertions_held")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (case
                                                               "NOT in_ipc(preemption_point_state`this,
                                         partner!1,
                                         preemption_point_state
                                         WITH [(threads)
                                               (partner!1)
                                               `thread_lock
                                               := preemption_point_state`this])")
                                                              (("1"
                                                                (replace
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (4
                                                                  -1))
                                                                (("2"
                                                                  (expand
                                                                   "in_ipc")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "state_add_dirty")
                                                      (("2"
                                                        (expand
                                                         "TS_empty")
                                                        (("2"
                                                          (case
                                                           "NOT
                                       in_ipc
                                       (preemption_point_state`this,
                                        partner!1,
                                        preemption_point_state
                                        WITH [(threads)
                                              (partner!1)
                                              `thread_lock
                                              := preemption_point_state`this])")
                                                          (("1"
                                                            (case
                                                             "preemption_point_state`threads
                                       WITH [(partner!1)`thread_lock
                                             := preemption_point_state`this]
                                       (preemption_point_state`this)`state`thread_ipc_in_progress")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "do_send_wait_finish_assertions_held")
                                                                (("1"
                                                                  (name-replace
                                                                   "do_send_wait_finish_input"
                                                                   "preemption_point_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := preemption_point_state`this,
                                  (assertions_held) := TRUE,
                                  (threads)(preemption_point_state`this)
                                             `state
                                    := preemption_point_state`threads
                                       WITH [(partner!1)`thread_lock
                                             := preemption_point_state`this]
                                       (preemption_point_state`this)`state
                                       WITH [thread_ready
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_ready,
                                             thread_cancel := FALSE,
                                             thread_dead
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_dead,
                                             thread_busy
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_busy,
                                             thread_invalid
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_invalid,
                                             thread_polling := TRUE,
                                             thread_receiving
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_receiving,
                                             thread_ipc_in_progress
                                             := TRUE,
                                             thread_send_in_progress
                                             := preemption_point_state`threads
                                                WITH [(partner!1)
                                                      `thread_lock
                                                      := preemption_point_state`this]
                                                (preemption_point_state`this)`state`thread_send_in_progress,
                                             thread_transfer_in_progress
                                             := FALSE]]"
                                                                   :hide?
                                                                   nil)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (case
                                                                       "do_send_wait_finish_input`assertions_held")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (beta)
                                                                          (("1"
                                                                            (case
                                                                             "do_send_wait_finish_input`threads
            (do_send_wait_finish_input`this)`state`thread_ipc_in_progress")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -4
                                                                                -2))
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 *
                                                                                 rl
                                                                                 :hide?
                                                                                 T)
                                                                                (("2"
                                                                                  (beta)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "preemption_point_state`this = partner!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -5
                                                                          1))
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           *
                                                                           rl
                                                                           :hide?
                                                                           T)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                4
                                                                8
                                                                -6
                                                                -4
                                                                -3))
                                                              (("2"
                                                                (lemma
                                                                 "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case-replace
                                                                       "state_old!1`this = partner!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -4
                                                              -5
                                                              3))
                                                            (("2"
                                                              (replace
                                                               -4
                                                               *)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 *
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "partner!1"
                                                                   "preemption_point_state")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       *
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "in_ipc")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait_loop const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged2
     formula-decl nil fiasco_state nil)
    (do_send_wait_finish_assertions_held formula-decl nil fiasco_assert
     nil)
    (not_transfer_in_progress_not_in_ipc formula-decl nil fiasco_state
     nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preemption_point_timeout_not_thread_ipc_in_progress formula-decl
     nil fiasco_state nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (TRUE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil))
   5770 4310 t shostak))
 (do_send_wait_assertions_held 0
  (do_send_wait_assertions_held-2 nil 3377448173 3377630471
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait")
          ((""
            (name-replace "state_add_dirty_state" "state_add_dirty
                                           (state_old!1`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE,
                                                  thread_send_in_progress
                                                  := TRUE,
                                                  thread_ipc_in_progress
                                                  := TRUE],
                                            state_old!1
                                            WITH [(assertions_held)
                                                  := state_old!1`assertions_held
                                                     AND
                                                     (state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      Zero_thread
                                                      OR
                                                      state_old!1`threads
                                                      (partner!1)`thread_lock
                                                      =
                                                      state_old!1`this)])"
             :hide? nil)
            (("" (expand "lock_dirty")
              (("" (expand "clear_dirty")
                (("" (expand "state_add_dirty")
                  (("" (expand "TS_empty")
                    (("" (expand "state_del_dirty")
                      (("" (lemma "preemption_point_assertions_held")
                        (("" (lemma "preemption_point_assertions_held")
                          (("" (lemma "sender_enqueue_assertions_held")
                            (("" (inst?)
                              ((""
                                (inst?)
                                ((""
                                  (inst
                                   -3
                                   "partner!1"
                                   "TRUE"
                                   "sender_enqueue
                                                   (partner!1,
                                                    preemption_point
                                                    (partner!1,
                                                     FALSE,
                                                     state_add_dirty_state
                                                     WITH [(threads)
                                                           (partner!1)
                                                           `thread_lock
                                                           := state_add_dirty_state`this]))")
                                  ((""
                                    (case
                                     "state_add_dirty_state`assertions_held")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "preemption_point(partner!1, FALSE,
                          state_add_dirty_state
                            WITH [(threads)(partner!1)`thread_lock
                                    := state_add_dirty_state`this])`threads
             (preemption_point(partner!1, FALSE,
                               state_add_dirty_state
                                 WITH [(threads)(partner!1)`thread_lock
                                       := state_add_dirty_state`this])`this)`state`thread_cancel")
                                          (("1"
                                            (rewrite 1)
                                            (("1"
                                              (case-replace
                                               "sender_ok(preemption_point(partner!1,
                                    FALSE,
                                    state_add_dirty_state
                                    WITH [(threads)(partner!1)`thread_lock
                                          := state_add_dirty_state`this])`this,
                   partner!1,
                   preemption_point(partner!1,
                                    FALSE,
                                    state_add_dirty_state
                                    WITH [(threads)(partner!1)`thread_lock
                                          := state_add_dirty_state`this]))")
                                              (("1"
                                                (rewrite 1)
                                                (("1"
                                                  (case-replace
                                                   "preemption_point(partner!1, TRUE,
                          sender_enqueue(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_add_dirty_state
                                          WITH [(threads)
                                                (partner!1)
                                                `thread_lock
                                                := state_add_dirty_state`this])))`timeout")
                                                  (("1"
                                                    (lemma
                                                     "abort_send_assertions_held")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "do_send_wait_loop_assertions_held")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (beta)
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               1)
                                                              (("2"
                                                                (case
                                                                 "preemption_point(partner!1, TRUE,
                       sender_enqueue(partner!1,
                                      preemption_point
                                      (partner!1,
                                       FALSE,
                                       state_add_dirty_state
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_state`this])))`threads
          (preemption_point(partner!1, TRUE,
                            sender_enqueue(partner!1,
                                           preemption_point
                                           (partner!1,
                                            FALSE,
                                            state_add_dirty_state
                                            WITH [(threads)
                                                  (partner!1)
                                                  `thread_lock
                                                  := state_add_dirty_state`this])))`this)`state`thread_ipc_in_progress")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (3
                                                                    2
                                                                    1
                                                                    -8
                                                                    -7
                                                                    -6))
                                                                  (("2"
                                                                    (lemma
                                                                     "sender_enqueue_timeout_unchanged")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "partner!1"
                                                                             "TRUE"
                                                                             "sender_enqueue(partner!1,
                                           preemption_point
                                           (partner!1,
                                            FALSE,
                                            state_add_dirty_state
                                            WITH [(threads)
                                                  (partner!1)
                                                  `thread_lock
                                                  := state_add_dirty_state`this]))")
                                                                            (("2"
                                                                              (lemma
                                                                               "preemption_point_timeout_unchanged")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "partner!1"
                                                                                 "state_add_dirty_state
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_state`this]")
                                                                                (("2"
                                                                                  (beta)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "state_add_dirty_state`timeout")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (3
                                                                                          -5
                                                                                          -1))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           *
                                                                                           rl
                                                                                           :hide?
                                                                                           T)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -3
                                                                                         *
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           *
                                                                                           rl)
                                                                                          (("2"
                                                                                            (case
                                                                                             "preemption_point(partner!1, FALSE,
                        state_add_dirty_state
                          WITH [(threads)(partner!1)`thread_lock
                                  := state_add_dirty_state`this])`timeout")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                -2))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               " sender_enqueue(partner!1,
                      preemption_point(partner!1,
                                       FALSE,
                                       state_add_dirty_state
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_state`this]))`timeout")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -4
                                                                                                  2))
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   *
                                                                                                   rl
                                                                                                   :hide?
                                                                                                   T)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "preemption_point_no_timeout_ipc_in_progress_unchanged2")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "partner!1"
                                                                                                   "FALSE"
                                                                                                   "state_add_dirty_state
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_state`this]")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "sender_enqueue_ipc_in_progress_unchanged")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (beta)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (2
                                                                                                                -4
                                                                                                                -2
                                                                                                                -1))
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "state_add_dirty_state`threads
        WITH [(partner!1)`thread_lock := state_add_dirty_state`this]
          (state_add_dirty_state`this)`state`thread_ipc_in_progress")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -3))
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     *
                                                                                                                     rl
                                                                                                                     :hide?
                                                                                                                     T)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "state_old!1`this = partner!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 4 -3 -2 -1)
                                      (("2"
                                        (replace -1 * rl :hide? T)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_send_wait const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (do_send_wait_loop_assertions_held formula-decl nil fiasco_assert
     nil)
    (preemption_point_no_timeout_ipc_in_progress_unchanged2
     formula-decl nil fiasco_state nil)
    (preemption_point_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (sender_enqueue_ipc_in_progress_unchanged formula-decl nil
     fiasco_state nil)
    (sender_enqueue_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sender_enqueue_assertions_held formula-decl nil fiasco_assert nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   2702 1920 t nil)
  (do_send_wait_assertions_held-1 nil 3383632126 3377447451
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_send_wait")
          ((""
            (case "preemption_point(partner!1, FALSE,
                          lock_dirty(partner!1,
                                     state_add_dirty
                                     (state_old!1`this,
                                      TS_empty
                                      WITH [thread_polling := TRUE,
                                            thread_send_in_progress
                                            := TRUE,
                                            thread_ipc_in_progress
                                            := TRUE],
                                      state_old!1)))`threads
             (preemption_point(partner!1, FALSE,
                               lock_dirty(partner!1,
                                          state_add_dirty
                                          (state_old!1`this,
                                           TS_empty
                                           WITH [thread_polling := TRUE,
                                                 thread_send_in_progress
                                                 := TRUE,
                                                 thread_ipc_in_progress
                                                 := TRUE],
                                           state_old!1)))`this)`state`thread_cancel")
            (("1" (assert)
              (("1" (expand "clear_dirty")
                (("1" (expand "lock_dirty")
                  (("1" (expand "state_del_dirty")
                    (("1" (expand "state_add_dirty")
                      (("1" (lemma "preemption_point_assertions_held")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (case "sender_ok(preemption_point(partner!1,
                                    FALSE,
                                    lock_dirty
                                    (partner!1,
                                     state_add_dirty
                                     (state_old!1`this,
                                      TS_empty
                                      WITH [thread_polling := TRUE,
                                            thread_send_in_progress
                                            := TRUE,
                                            thread_ipc_in_progress
                                            := TRUE],
                                      state_old!1)))`this,
                   partner!1,
                   preemption_point(partner!1,
                                    FALSE,
                                    lock_dirty
                                    (partner!1,
                                     state_add_dirty
                                     (state_old!1`this,
                                      TS_empty
                                      WITH [thread_polling := TRUE,
                                            thread_send_in_progress
                                            := TRUE,
                                            thread_ipc_in_progress
                                            := TRUE],
                                      state_old!1))))")
                (("1" (assert)
                  (("1" (hide 1 2 -1)
                    (("1" (expand "lock_dirty")
                      (("1" (expand "state_add_dirty")
                        (("1"
                          (lemma "preemption_point_assertions_held")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (case "preemption_point(partner!1, TRUE,
                          sender_enqueue(partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          lock_dirty
                                          (partner!1,
                                           state_add_dirty
                                           (state_old!1`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE,
                                                  thread_send_in_progress
                                                  := TRUE,
                                                  thread_ipc_in_progress
                                                  := TRUE],
                                            state_old!1)))))`timeout")
                    (("1" (assert)
                      (("1" (hide 1 2 3 -1)
                        (("1" (expand "sender_enqueue")
                          (("1"
                            (case "sender_list_status
                                     (1
                                      +
                                      preemption_point
                                      (partner!1,
                                       FALSE,
                                       lock_dirty
                                       (partner!1,
                                        state_add_dirty
                                        (state_old!1`this,
                                         TS_empty
                                         WITH [thread_polling := TRUE,
                                               thread_send_in_progress
                                               := TRUE,
                                               thread_ipc_in_progress
                                               := TRUE],
                                         state_old!1)))`seed)
                                     =
                                     Empty")
                            (("1" (assert)
                              (("1"
                                (expand "lock_dirty")
                                (("1"
                                  (name-replace
                                   "state_add_dirty_temp"
                                   "state_add_dirty
                                                       (state_old!1`this,
                                                        TS_empty
                                                        WITH [thread_polling
                                                              := TRUE,
                                                              thread_send_in_progress
                                                              := TRUE,
                                                              thread_ipc_in_progress
                                                              := TRUE],
                                                        state_old!1)"
                                   :hide?
                                   nil)
                                  (("1"
                                    (expand "state_add_dirty")
                                    (("1"
                                      (lemma
                                       "preemption_point_assertions_held")
                                      (("1"
                                        (lemma
                                         "preemption_point_assertions_held")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst
                                             -2
                                             "partner!1"
                                             "TRUE"
                                             " preemption_point(partner!1,
                                                   FALSE,
                                                   state_add_dirty_temp
                                                   WITH [(threads)
                                                         (partner!1)
                                                         `thread_lock
                                                         := state_add_dirty_temp`this])
                                    WITH [seed
                                          := 1
                                             +
                                             preemption_point
                                             (partner!1,
                                              FALSE,
                                              state_add_dirty_temp
                                              WITH [(threads)
                                                    (partner!1)
                                                    `thread_lock
                                                    := state_add_dirty_temp`this])`seed,
                                          (threads)(partner!1)`sender_list
                                          := First]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "abort_send_assertions_held")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "preemption_point_assertions_held")
                                                    (("2"
                                                      (lemma
                                                       "preemption_point_assertions_held")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "partner!1"
                                                           "TRUE"
                                                           "preemption_point(partner!1,
                                                   FALSE,
                                                   state_add_dirty_temp
                                                   WITH [(threads)
                                                         (partner!1)
                                                         `thread_lock
                                                         := state_add_dirty_temp`this])
                                    WITH [seed
                                          := 1
                                             +
                                             preemption_point
                                             (partner!1,
                                              FALSE,
                                              state_add_dirty_temp
                                              WITH [(threads)
                                                    (partner!1)
                                                    `thread_lock
                                                    := state_add_dirty_temp`this])`seed,
                                          (threads)(partner!1)`sender_list
                                          := First]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "abort_send_assertions_held")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "preemption_point_assertions_held")
                                                    (("3"
                                                      (lemma
                                                       "preemption_point_assertions_held")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (hide 3)
                                                          (("3"
                                                            (delete -2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "TS_empty")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 1)
                                (("2"
                                  (expand "lock_dirty")
                                  (("2"
                                    (name-replace
                                     "state_add_dirty_temp"
                                     "state_add_dirty(state_old!1`this,
                                               TS_empty
                                               WITH [thread_polling
                                                     := TRUE,
                                                     thread_send_in_progress
                                                     := TRUE,
                                                     thread_ipc_in_progress
                                                     := TRUE],
                                               state_old!1)"
                                     :hide?
                                     nil)
                                    (("2"
                                      (expand "state_add_dirty")
                                      (("2"
                                        (expand "TS_empty")
                                        (("2"
                                          (lemma
                                           "preemption_point_assertions_held")
                                          (("2"
                                            (lemma
                                             "preemption_point_assertions_held")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst
                                                 -2
                                                 "partner!1"
                                                 "TRUE"
                                                 "preemption_point(partner!1,
                                                   FALSE,
                                                   state_add_dirty_temp
                                                   WITH [(threads)
                                                         (partner!1)
                                                         `thread_lock
                                                         := state_add_dirty_temp`this])
                                    WITH [seed
                                          := 1
                                             +
                                             preemption_point
                                             (partner!1,
                                              FALSE,
                                              state_add_dirty_temp
                                              WITH [(threads)
                                                    (partner!1)
                                                    `thread_lock
                                                    := state_add_dirty_temp`this])`seed,
                                          (threads)(partner!1)`sender_list
                                          := Enqueued]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "abort_send_assertions_held")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "lock_dirty")
                        (("2" (hide 2 3)
                          (("2"
                            (lemma "preemption_point_assertions_held")
                            (("2"
                              (lemma
                               "preemption_point_assertions_held")
                              (("2"
                                (name-replace
                                 "state_add_dirty_temp"
                                 "state_add_dirty
                                           (state_old!1`this,
                                            TS_empty
                                            WITH [thread_polling := TRUE,
                                                  thread_send_in_progress
                                                  := TRUE,
                                                  thread_ipc_in_progress
                                                  := TRUE],
                                            state_old!1)"
                                 :hide?
                                 nil)
                                (("2"
                                  (name-replace
                                   "preemption_point_temp"
                                   " preemption_point(partner!1,
                                         TRUE,
                                         sender_enqueue
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           state_add_dirty_temp
                                           WITH [(threads)
                                                 (partner!1)
                                                 `thread_lock
                                                 := state_add_dirty_temp`this])))"
                                   :hide?
                                   nil)
                                  (("2"
                                    (lemma
                                     "preemption_point_allow_timeout")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "state_add_dirty")
                                          (("2"
                                            (expand "TS_empty")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "preemption_point_not_timeout_thread_ipc_in_progress")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "not state_add_dirty_temp`threads
        WITH [(partner!1)`thread_lock := state_add_dirty_temp`this]
          (state_add_dirty_temp`this)`state`thread_ipc_in_progress")
                                                        (("1"
                                                          (hide
                                                           2
                                                           3
                                                           4
                                                           5
                                                           -)
                                                          (("1"
                                                            (expand
                                                             "state_add_dirty_temp")
                                                            (("1"
                                                              (expand
                                                               "state_add_dirty")
                                                              (("1"
                                                                (expand
                                                                 "TS_empty")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (delete -2)
                                                            (("2"
                                                              (lemma
                                                               "preemption_point_not_timeout_thread_ipc_in_progress")
                                                              (("2"
                                                                (lemma
                                                                 "preemption_point_not_timeout_thread_ipc_in_progress")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "partner!1"
                                                                   "FALSE"
                                                                   "state_add_dirty_temp
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_temp`this]")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "state_add_dirty_temp
              WITH [(threads)(partner!1)`thread_lock
                      := state_add_dirty_temp`this]`timeout")
                                                                      (("1"
                                                                        (expand
                                                                         "state_add_dirty_temp"
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (delete
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "partner!1"
                                                                               "TRUE"
                                                                               "sender_enqueue(partner!1,
                                      preemption_point
                                      (partner!1,
                                       FALSE,
                                       state_add_dirty_temp
                                       WITH [(threads)
                                             (partner!1)
                                             `thread_lock
                                             := state_add_dirty_temp`this]))")
                                                                              (("2"
                                                                                (lemma
                                                                                 "sender_enqueue_assertions_held")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -5
                                                                                         -7
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1
                                                                                           2
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "preemption_point_temp")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "preemption_point_not_timeout_thread_ipc_in_progress")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     " state_add_dirty_temp`this = partner!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "preemption_point_not_timeout_thread_ipc_in_progress")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "partner!1"
                                                                                                                 "TRUE"
                                                                                                                 "sender_enqueue
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           state_add_dirty_temp
                                           WITH [(threads)
                                                 (partner!1)
                                                 `thread_lock
                                                 := partner!1]))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (postpone)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "preemption_point_not_timeout_thread_ipc_in_progress")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "partner!1"
                                                                                                                         "TRUE"
                                                                                                                         "sender_enqueue
                                         (partner!1,
                                          preemption_point
                                          (partner!1,
                                           FALSE,
                                           state_add_dirty_temp
                                           WITH [(threads)
                                                 (partner!1)
                                                 `thread_lock
                                                 := partner!1]))")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (postpone)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((do_send_wait const-decl "System_state" fiasco_functions nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (sender_enqueue const-decl "System_state" fiasco_functions nil)
    (Sender_list_status type-decl nil fiasco_types nil)
    (sender_list_status const-decl "Sender_list_status"
     fiasco_functions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Empty? adt-recognizer-decl "[Sender_list_status -> boolean]"
     fiasco_types nil)
    (Empty adt-constructor-decl "(Empty?)" fiasco_types nil)
    (First adt-constructor-decl "(First?)" fiasco_types nil)
    (First? adt-recognizer-decl "[Sender_list -> boolean]" fiasco_types
     nil)
    (Sender_list type-decl nil fiasco_types nil)
    (abort_send_assertions_held formula-decl nil fiasco_assert nil)
    (Enqueued? adt-recognizer-decl "[Sender_list -> boolean]"
     fiasco_types nil)
    (Enqueued adt-constructor-decl "(Enqueued?)" fiasco_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (do_send_wait_loop_assertions_held formula-decl nil fiasco_assert
     nil)
    (TRUE const-decl "bool" booleans nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_state type-eq-decl nil fiasco_types nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   3081823 41750 t shostak))
 (try_handshake_receiver_assertions_held 0
  (try_handshake_receiver_assertions_held-1 nil 3384142895 3377630473
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "try_handshake_receiver")
          ((""
            (name-replace "lock_dirty_state" "lock_dirty
                                        (partner!1,
                                         preemption_point
                                         (partner!1,
                                          FALSE,
                                          state_old!1
                                          WITH [handshake_attempted
                                                := TRUE]))" :hide? nil)
            (("" (case-replace "partner!1 = Zero_thread")
              (("" (rewrite 1)
                ((""
                  (case-replace
                   "state_old!1`threads(partner!1)`state`thread_invalid")
                  (("" (rewrite 1)
                    (("" (case-replace "partner!1 = Nil_thread")
                      (("" (rewrite 1)
                        ((""
                          (case-replace
                           " state_old!1`threads(partner!1)`thread_lock = Zero_thread")
                          (("1"
                            (case-replace
                             "state_old!1`threads(state_old!1`this)`state`thread_cancel")
                            (("1" (expand "clear_dirty")
                              (("1" (propax) nil nil)) nil)
                             ("2" (rewrite 1)
                              (("2"
                                (case-replace
                                 " sender_ok(state_old!1`this, partner!1,
                       state_old!1 WITH [handshake_attempted := TRUE])")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (rewrite 1)
                                  (("2"
                                    (lemma
                                     "do_send_wait_assertions_held")
                                    (("2"
                                      (inst
                                       -1
                                       "partner!1"
                                       "state_old!1
                     WITH [handshake_attempted := TRUE]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "NOT do_send_wait(partner!1,
                        state_old!1
                          WITH [handshake_attempted := TRUE])`error")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "do_send_wait_error_lock_free")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite 1)
                            (("2"
                              (case-replace "lock_dirty_state`threads
             (lock_dirty_state`this)`state`thread_cancel")
                              (("1"
                                (expand "clear_dirty")
                                (("1"
                                  (expand "lock_dirty")
                                  (("1"
                                    (lemma
                                     "preemption_point_assertions_held")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite 1)
                                (("2"
                                  (case-replace
                                   "sender_ok(lock_dirty_state`this, partner!1, lock_dirty_state)")
                                  (("1"
                                    (expand "lock_dirty")
                                    (("1"
                                      (lemma
                                       "preemption_point_assertions_held")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite 1)
                                    (("2"
                                      (expand "lock_dirty")
                                      (("2"
                                        (lemma
                                         "do_send_wait_assertions_held")
                                        (("2"
                                          (inst
                                           -1
                                           "partner!1"
                                           "lock_dirty_state")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "preemption_point_assertions_held")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "do_send_wait_error_lock_free")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "do_send_wait(partner!1, lock_dirty_state)`error")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "preemption_point_timeout_unchanged")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "preemption_point_this_unchanged")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "preemption_point_timeout_unchanged")
                                                                (("2"
                                                                  (lemma
                                                                   "preemption_point_this_unchanged")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (Nil_thread const-decl "Thread_pointer" fiasco_types nil)
    (do_send_wait_error_lock_free formula-decl nil fiasco_lock nil)
    (do_send_wait const-decl "System_state" fiasco_functions nil)
    (do_send_wait_assertions_held formula-decl nil fiasco_assert nil)
    (sender_ok const-decl "bool" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (preemption_point_assertions_held formula-decl nil fiasco_assert
     nil)
    (preemption_point_this_unchanged formula-decl nil fiasco_helpers
     nil)
    (preemption_point_timeout_unchanged formula-decl nil fiasco_helpers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (preemption_point const-decl "System_state" fiasco_functions nil)
    (lock_dirty const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   1527 960 t shostak))
 (do_ipc_send_part_assertions_held 0
  (do_ipc_send_part_assertions_held-1 nil 3383554359 3377630482
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "do_ipc_send_part")
          ((""
            (name-replace "transfer_msg_state" "transfer_msg
                                                                     (partner!1,
                                                                      ipc_init
                                                                      (try_handshake_receiver
                                                                       (partner!1,
                                                                        state_old!1)`this,
                                                                       partner!1,
                                                                       try_handshake_receiver
                                                                       (partner!1,
                                                                        state_old!1)
                                                                       WITH [(assertions_held)
                                                                             := try_handshake_receiver
                                                                                (partner!1,
                                                                                 state_old!1)`assertions_held
                                                                                AND
                                                                                NOT
                                                                                try_handshake_receiver
                                                                                (partner!1,
                                                                                 state_old!1)`threads
                                                                                (try_handshake_receiver
                                                                                 (partner!1,
                                                                                  state_old!1)`this)`state`thread_polling]))"
             :hide? nil)
            (("" (expand "clear_dirty_dont_switch")
              (("" (expand "clear_dirty")
                ((""
                  (case-replace
                   "try_handshake_receiver(partner!1, state_old!1)`error")
                  (("1"
                    (lemma "try_handshake_receiver_assertions_held")
                    (("1" (inst?)
                      (("1" (assert) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (lemma
                       "try_handshake_receiver_no_error_lock_free_or_held")
                      (("2"
                        (lemma
                         "try_handshake_receiver_assertions_held")
                        (("2" (expand "wake_receiver")
                          (("2" (inst -1 "partner!1" "state_old!1")
                            (("2" (inst -2 "partner!1" "state_old!1")
                              (("2"
                                (expand "transfer_msg")
                                (("2"
                                  (expand "ipc_init")
                                  (("2"
                                    (expand "set_partner")
                                    (("2"
                                      (lemma
                                       "try_handshake_receiver_no_error_not_polling")
                                      (("2"
                                        (inst
                                         -1
                                         "partner!1"
                                         "state_old!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "transfer_msg_state`assertions_held")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "state_add_dirty")
                                                (("1"
                                                  (expand "TS_empty")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case-replace
                                                       "have_receive!1")
                                                      (("1"
                                                        (case-replace
                                                         "in_ipc(transfer_msg_state`this, partner!1,
                    transfer_msg_state
                      WITH [(assertions_held)
                              := (transfer_msg_state`threads
                                      (partner!1)`thread_lock
                                   = Zero_thread
                                   OR
                                   transfer_msg_state`threads
                                       (partner!1)`thread_lock
                                    = transfer_msg_state`this),
                            (threads)(partner!1)`thread_lock
                              := Zero_thread])")
                                                        (("1"
                                                          (expand
                                                           "state_change_dirty")
                                                          (("1"
                                                            (case
                                                             "try_handshake_receiver(partner!1, state_old!1)`threads
          (partner!1)`thread_lock
       = Zero_thread")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "try_handshake_receiver(partner!1, state_old!1)`threads
           (partner!1)`thread_lock
        = try_handshake_receiver(partner!1, state_old!1)`this")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite 1)
                                                          (("2"
                                                            (expand
                                                             "state_del")
                                                            (("2"
                                                              (expand
                                                               "state_del_dirty")
                                                              (("2"
                                                                (case-replace
                                                                 "try_handshake_receiver(partner!1, state_old!1)`threads
          (partner!1)`thread_lock
       = Zero_thread")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "try_handshake_receiver(partner!1, state_old!1)`threads
           (partner!1)`thread_lock
        = try_handshake_receiver(partner!1, state_old!1)`this")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "state_change_dirty")
                                                        (("2"
                                                          (expand
                                                           "state_del")
                                                          (("2"
                                                            (expand
                                                             "state_del_dirty")
                                                            (("2"
                                                              (rewrite
                                                               1)
                                                              (("2"
                                                                (case-replace
                                                                 "in_ipc(transfer_msg_state`this, partner!1,
                transfer_msg_state
                  WITH [(assertions_held)
                          := (transfer_msg_state`threads
                                  (partner!1)`thread_lock
                               = Zero_thread
                               OR
                               transfer_msg_state`threads
                                   (partner!1)`thread_lock
                                = transfer_msg_state`this)])")
                                                                (("1"
                                                                  (case-replace
                                                                   "try_handshake_receiver(partner!1, state_old!1)`threads
          (partner!1)`thread_lock
       = Zero_thread")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case-replace
                                                                     "try_handshake_receiver(partner!1, state_old!1)`threads
           (partner!1)`thread_lock
        = try_handshake_receiver(partner!1, state_old!1)`this")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   1)
                                                                  (("2"
                                                                    (case-replace
                                                                     "try_handshake_receiver(partner!1, state_old!1)`threads
          (partner!1)`thread_lock
       = Zero_thread")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case-replace
                                                                       "try_handshake_receiver(partner!1, state_old!1)`threads
           (partner!1)`thread_lock
        = try_handshake_receiver(partner!1, state_old!1)`this")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -3 1))
                                              (("2"
                                                (expand
                                                 "state_add_dirty")
                                                (("2"
                                                  (expand "TS_empty")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((do_ipc_send_part const-decl "System_state" fiasco_functions nil)
    (clear_dirty_dont_switch const-decl "System_state" fiasco_functions
     nil)
    (try_handshake_receiver_assertions_held formula-decl nil
     fiasco_assert nil)
    (try_handshake_receiver_no_error_lock_free_or_held formula-decl nil
     fiasco_lock nil)
    (wake_receiver const-decl "System_state" fiasco_functions nil)
    (try_handshake_receiver_no_error_not_polling formula-decl nil
     fiasco_state nil)
    (TS_empty const-decl "Thread_state" fiasco_states nil)
    (state_del_dirty const-decl "System_state" fiasco_functions nil)
    (state_del const-decl "System_state" fiasco_functions nil)
    (state_change_dirty const-decl "System_state" fiasco_functions nil)
    (in_ipc const-decl "bool" fiasco_functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Zero_thread const-decl "Thread_pointer" fiasco_types nil)
    (state_add_dirty const-decl "System_state" fiasco_functions nil)
    (set_partner const-decl "System_state" fiasco_functions nil)
    (clear_dirty const-decl "System_state" fiasco_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (try_handshake_receiver const-decl "System_state" fiasco_functions
     nil)
    (ipc_init const-decl "System_state" fiasco_functions nil)
    (transfer_msg const-decl "System_state" fiasco_functions nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   9036 7080 t shostak))
 (assertions_held 0
  (assertions_held-1 nil 3377368064 3377630482
   ("" (skolem!)
    (("" (ground)
      (("" (flatten)
        (("" (expand "sys_ipc")
          (("" (case-replace " have_send!1")
            (("1" (expand "do_ipc")
              (("1" (case-replace "have_receive!1")
                (("1" (expand "do_ipc_receive_part")
                  (("1" (lemma "do_ipc_send_part_assertions_held")
                    (("1" (inst?)
                      (("1" (assert) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite 1)
                  (("2" (lemma "do_ipc_send_part_assertions_held")
                    (("2" (inst?)
                      (("2" (assert) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite 1)
              (("2" (case-replace "have_receive!1")
                (("1" (expand "do_ipc")
                  (("1" (expand "do_ipc_receive_part")
                    (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (rewrite 1) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (do_ipc_send_part_assertions_held formula-decl nil fiasco_assert
     nil)
    (FALSE const-decl "bool" booleans nil)
    (System_state type-eq-decl nil fiasco_types nil)
    (L4_timeout type-eq-decl nil fiasco_types nil)
    (Thread_list type-eq-decl nil fiasco_types nil)
    (This_thread_pointer type-eq-decl nil fiasco_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ipc_err type-eq-decl nil fiasco_types nil)
    (TRUE const-decl "bool" booleans nil)
    (Thread_pointer type-eq-decl nil fiasco_types nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (do_ipc_receive_part const-decl "System_state" fiasco_functions
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (do_ipc const-decl "System_state" fiasco_functions nil)
    (sys_ipc const-decl "System_state" fiasco_functions nil))
   348 180 t shostak)))

